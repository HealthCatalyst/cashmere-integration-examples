/**
 * @fileoverview added by tsickle
 * Generated from: lib/pop/popover-anchoring.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Optional } from '@angular/core';
import { ConnectionPositionPair, Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { Directionality } from '@angular/cdk/bidi';
import { ESCAPE } from '@angular/cdk/keycodes';
import { TemplatePortal } from '@angular/cdk/portal';
import { Subject } from 'rxjs';
import { takeUntil, take, filter, tap } from 'rxjs/operators';
import { PopoverNotificationService, NotificationAction } from './notification.service';
/**
 * Configuration provided by the popover for the anchoring service
 * to build the correct overlay config.
 * @record
 */
function PopoverConfig() { }
if (false) {
    /** @type {?} */
    PopoverConfig.prototype.horizontalAlign;
    /** @type {?} */
    PopoverConfig.prototype.verticalAlign;
    /** @type {?} */
    PopoverConfig.prototype.hasBackdrop;
    /** @type {?} */
    PopoverConfig.prototype.backdropClass;
    /** @type {?} */
    PopoverConfig.prototype.scrollStrategy;
    /** @type {?} */
    PopoverConfig.prototype.forceAlignment;
    /** @type {?} */
    PopoverConfig.prototype.lockAlignment;
}
export class HcPopoverAnchoringService {
    /**
     * @param {?} _overlay
     * @param {?} _ngZone
     * @param {?} _dir
     */
    constructor(_overlay, _ngZone, _dir) {
        this._overlay = _overlay;
        this._ngZone = _ngZone;
        this._dir = _dir;
        /**
         * Emits when the popover is opened.
         */
        this.popoverOpened = new Subject();
        /**
         * Emits when the popover is closed.
         */
        this.popoverClosed = new Subject();
        /**
         * Whether the popover is presently open.
         */
        this._popoverOpen = false;
        /**
         * Emits when the service is destroyed.
         */
        this._onDestroy = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // Destroy popover before terminating subscriptions so that any resulting
        // detachments update 'closed state'
        this._destroyPopover();
        // Terminate subscriptions
        if (this._notificationsSubscription) {
            this._notificationsSubscription.unsubscribe();
        }
        if (this._positionChangeSubscription) {
            this._positionChangeSubscription.unsubscribe();
        }
        this._onDestroy.next();
        this._onDestroy.complete();
        this.popoverOpened.complete();
        this.popoverClosed.complete();
    }
    /**
     * Anchor a popover instance to a view and connection element.
     * @param {?} popover
     * @param {?} viewContainerRef
     * @param {?} anchor
     * @return {?}
     */
    anchor(popover, viewContainerRef, anchor) {
        // Destroy any previous popovers
        this._destroyPopover();
        // Assign local refs
        this._popover = popover;
        this._viewContainerRef = viewContainerRef;
        this._anchor = anchor;
        // Provide notification service as a communication channel between popover and anchor.
        // Then subscribe to notifications to take appropriate actions.
        this._popover._notifications = this._notifications = this._anchor._notifications = new PopoverNotificationService();
        this._subscribeToNotifications();
    }
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    isPopoverOpen() {
        return this._popoverOpen;
    }
    /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    togglePopover() {
        return this._popoverOpen ? this.closePopover() : this.openPopover();
    }
    /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    openPopover(options = {}) {
        if (!this._popoverOpen) {
            this._applyOpenOptions(options);
            this._popover._componentOverlay = this._createOverlay();
            this._subscribeToBackdrop();
            this._subscribeToEscape();
            this._subscribeToDetachments();
            this._saveOpenedState();
            this._popover._savePreviouslyFocusedElement();
        }
    }
    /**
     * Closes the popover.
     * @param {?=} value
     * @param {?=} neighborSubMenusAreOpen
     * @return {?}
     */
    closePopover(value, neighborSubMenusAreOpen = false) {
        if (this._popover._componentOverlay) {
            this._saveClosedState(value, neighborSubMenusAreOpen);
            this._popover._componentOverlay.detach();
            this._popover._restoreFocusAndDestroyTrap();
        }
    }
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    realignPopoverToAnchor() {
        if (this._popover._componentOverlay) {
            /** @type {?} */
            const config = this._popover._componentOverlay.getConfig();
            /** @type {?} */
            const strategy = (/** @type {?} */ (config.positionStrategy));
            strategy.reapplyLastPosition();
        }
    }
    /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    getAnchorElement() {
        return this._anchor._elementRef;
    }
    /**
     * Apply behavior properties on the popover based on the open options.
     * @private
     * @param {?} options
     * @return {?}
     */
    _applyOpenOptions(options) {
        // Only override restoreFocus as `false` if the option is explicitly `false`
        /** @type {?} */
        const restoreFocus = options.restoreFocus !== false;
        this._popover._restoreFocusOverride = restoreFocus;
        // Only override autoFocus as `false` if the option is explicitly `false`
        /** @type {?} */
        const autoFocus = options.autoFocus !== false;
        this._popover._autoFocusOverride = autoFocus;
    }
    /**
     * Create an overlay to be attached to the portal.
     * @private
     * @return {?}
     */
    _createOverlay() {
        // Create overlay if it doesn't yet exist
        if (!this._overlayRef) {
            this._portal = new TemplatePortal(this._popover._templateRef, this._viewContainerRef);
            /** @type {?} */
            const popoverConfig = {
                horizontalAlign: this._popover.horizontalAlign,
                verticalAlign: this._popover.verticalAlign,
                hasBackdrop: this._popover.hasBackdrop,
                backdropClass: this._popover.backdropClass,
                scrollStrategy: this._popover.scrollStrategy,
                forceAlignment: this._popover.forceAlignment,
                lockAlignment: this._popover.lockAlignment
            };
            /** @type {?} */
            const overlayConfig = this._getOverlayConfig(popoverConfig, this._anchor);
            this._subscribeToPositionChanges((/** @type {?} */ (overlayConfig.positionStrategy)));
            this._overlayRef = this._overlay.create(overlayConfig);
        }
        else if (this._popover.horizontalAlign === 'mouse' || this._popover.verticalAlign === 'mouse') {
            /* If aligning to mouse clicks - adjust the strategy based on the most current click */
            this._overlayRef.updatePositionStrategy(this._getPositionStrategy(this._popover.horizontalAlign, this._popover.verticalAlign, this._popover.forceAlignment, this._popover.lockAlignment, this._anchor._elementRef));
        }
        // Actually open the popover
        this._overlayRef.attach(this._portal);
        return this._overlayRef;
    }
    /**
     * Removes the popover from the DOM. Does NOT update open state.
     * @private
     * @return {?}
     */
    _destroyPopover() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
    }
    /**
     * Destroys the popover immediately if it is closed, or waits until it
     * has been closed to destroy it.
     * @private
     * @return {?}
     */
    _destroyPopoverOnceClosed() {
        if (this.isPopoverOpen() && this._overlayRef) {
            this._overlayRef
                .detachments()
                .pipe(take(1), takeUntil(this._onDestroy))
                .subscribe((/**
             * @return {?}
             */
            () => this._destroyPopover()));
        }
        else {
            this._destroyPopover();
        }
    }
    /**
     * Call appropriate anchor method when an event is dispatched through
     * the notification service.
     * @private
     * @return {?}
     */
    _subscribeToNotifications() {
        if (this._notificationsSubscription) {
            this._notificationsSubscription.unsubscribe();
        }
        this._notificationsSubscription = this._notifications.events().subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            switch (event.action) {
                case NotificationAction.OPEN:
                    this.openPopover(event.value);
                    break;
                case NotificationAction.CLOSE:
                    this.closePopover(event.value);
                    break;
                case NotificationAction.TOGGLE:
                    this.togglePopover();
                    break;
                case NotificationAction.REPOSITION:
                // TODO: When the overlay's position can be dynamically changed, do not destroy
                case NotificationAction.UPDATE_CONFIG:
                    this._destroyPopoverOnceClosed();
                    break;
                case NotificationAction.REALIGN:
                    this.realignPopoverToAnchor();
                    break;
            }
        }));
    }
    /**
     * Close popover when backdrop is clicked.
     * @private
     * @return {?}
     */
    _subscribeToBackdrop() {
        if (!this._overlayRef) {
            return;
        }
        this._overlayRef
            .backdropClick()
            .pipe(tap((/**
         * @return {?}
         */
        () => this._popover.backdropClicked.emit())), filter((/**
         * @return {?}
         */
        () => this._popover.interactiveClose)), takeUntil(this.popoverClosed), takeUntil(this._onDestroy))
            .subscribe((/**
         * @return {?}
         */
        () => this.closePopover()));
    }
    /**
     * Close popover when escape keydown event occurs.
     * @private
     * @return {?}
     */
    _subscribeToEscape() {
        if (!this._overlayRef) {
            return;
        }
        this._overlayRef
            .keydownEvents()
            .pipe(tap((/**
         * @param {?} event
         * @return {?}
         */
        event => this._popover.overlayKeydown.emit(event))), filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event.keyCode === ESCAPE)), filter((/**
         * @return {?}
         */
        () => this._popover.interactiveClose)), takeUntil(this.popoverClosed), takeUntil(this._onDestroy))
            .subscribe((/**
         * @return {?}
         */
        () => this.closePopover()));
    }
    /**
     * Set state back to closed when detached.
     * @private
     * @return {?}
     */
    _subscribeToDetachments() {
        if (!this._overlayRef) {
            return;
        }
        this._overlayRef
            .detachments()
            .pipe(takeUntil(this._onDestroy))
            .subscribe((/**
         * @return {?}
         */
        () => this._saveClosedState()));
    }
    /**
     * Save the opened state of the popover and emit.
     * @private
     * @return {?}
     */
    _saveOpenedState() {
        if (!this._popoverOpen) {
            this._popover._open = this._popoverOpen = true;
            if (this._popover.parent) {
                this._popover.parent._subMenuOpen = true;
            }
            this.popoverOpened.next();
            if (typeof this._context === 'undefined') {
                this._popover.opened.emit();
            }
            else {
                this._popover.opened.emit(this._context);
            }
        }
    }
    /**
     * Save the closed state of the popover and emit.
     * @private
     * @param {?=} value
     * @param {?=} neighborSubMenusAreOpen
     * @return {?}
     */
    _saveClosedState(value, neighborSubMenusAreOpen = false) {
        if (this._popoverOpen) {
            this._popover._open = this._popoverOpen = false;
            if (this._popover.parent) {
                this._popover.parent._subMenuOpen = neighborSubMenusAreOpen;
            }
            this.popoverClosed.next(value);
            this._popover.closed.emit(value);
        }
    }
    /**
     * Gets the text direction of the containing app.
     * @private
     * @return {?}
     */
    _getDirection() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /**
     * Create and return a config for creating the overlay.
     * @private
     * @param {?} config
     * @param {?} anchor
     * @return {?}
     */
    _getOverlayConfig(config, anchor) {
        return new OverlayConfig({
            positionStrategy: this._getPositionStrategy(config.horizontalAlign, config.verticalAlign, config.forceAlignment, config.lockAlignment, anchor._elementRef),
            // make it hard for users to shoot themselves in the foot by disabling backdrop if hover is the trigger
            hasBackdrop: anchor.trigger !== 'hover' ? config.hasBackdrop : false,
            backdropClass: config.backdropClass || 'cdk-overlay-transparent-backdrop',
            scrollStrategy: this._getScrollStrategyInstance(config.scrollStrategy),
            direction: this._getDirection(),
            // disable pointer events for hover popovers to avoid potential flickering issues
            panelClass: anchor.trigger === 'hover' ? 'overlay-pointer-events' : ''
        });
    }
    /**
     * Listen to changes in the position of the overlay and set the correct alignment classes,
     * ensuring that the animation origin is correct, even with a fallback position.
     * @private
     * @param {?} position
     * @return {?}
     */
    _subscribeToPositionChanges(position) {
        if (this._positionChangeSubscription) {
            this._positionChangeSubscription.unsubscribe();
        }
        this._positionChangeSubscription = position.positionChanges.pipe(takeUntil(this._onDestroy)).subscribe((/**
         * @param {?} change
         * @return {?}
         */
        change => {
            // Position changes may occur outside the Angular zone
            this._ngZone.run((/**
             * @return {?}
             */
            () => {
                this._popover._setAlignmentClassesForAnimation(getHorizontalPopoverAlignment(change.connectionPair.overlayX), getVerticalPopoverAlignment(change.connectionPair.overlayY));
                this._popover._setAlignmentClassesForArrow(getHPopAlignmentForArrow(change.connectionPair.overlayX, change.connectionPair.originX), getVPopAlignmentForArrow(change.connectionPair.overlayY, change.connectionPair.originY));
            }));
        }));
    }
    /**
     * Map a scroll strategy string type to an instance of a scroll strategy.
     * @private
     * @param {?} strategy
     * @return {?}
     */
    _getScrollStrategyInstance(strategy) {
        switch (strategy) {
            case 'block':
                return this._overlay.scrollStrategies.block();
            case 'reposition':
                return this._overlay.scrollStrategies.reposition();
            case 'close':
                return this._overlay.scrollStrategies.close();
            case 'noop':
            default:
                return this._overlay.scrollStrategies.noop();
        }
    }
    /**
     * Create and return a position strategy based on config provided to the component instance.
     * @private
     * @param {?} horizontalTarget
     * @param {?} verticalTarget
     * @param {?} forceAlignment
     * @param {?} lockAlignment
     * @param {?} anchor
     * @return {?}
     */
    _getPositionStrategy(horizontalTarget, verticalTarget, forceAlignment, lockAlignment, anchor) {
        // Attach the overlay at the preferred position
        /** @type {?} */
        const targetPosition = getPosition(horizontalTarget, verticalTarget, this._popover._offsetPos);
        /** @type {?} */
        const positions = [targetPosition];
        /** @type {?} */
        const strategy = this._overlay
            .position()
            .flexibleConnectedTo(anchor)
            .withFlexibleDimensions(false)
            .withPush(false)
            .withViewportMargin(0)
            .withLockedPosition(lockAlignment);
        // Unless the alignment is forced, add fallbacks based on the preferred positions
        if (!forceAlignment) {
            /** @type {?} */
            const fallbacks = this._getFallbacks(horizontalTarget, verticalTarget);
            positions.push(...fallbacks);
        }
        return strategy.withPositions(positions);
    }
    /**
     * Get fallback positions based around target alignments.
     * @private
     * @param {?} hTarget
     * @param {?} vTarget
     * @return {?}
     */
    _getFallbacks(hTarget, vTarget) {
        // Determine if the target alignments overlap the anchor
        /** @type {?} */
        const horizontalOverlapAllowed = hTarget !== 'before' && hTarget !== 'after';
        /** @type {?} */
        const verticalOverlapAllowed = vTarget !== 'above' && vTarget !== 'below';
        // If a target alignment doesn't cover the anchor, don't let any of the fallback alignments
        // cover the anchor
        /** @type {?} */
        const possibleHorizontalAlignments = horizontalOverlapAllowed
            ? ['before', 'start', 'center', 'end', 'after', 'mouse']
            : ['before', 'after'];
        /** @type {?} */
        const possibleVerticalAlignments = verticalOverlapAllowed
            ? ['above', 'start', 'center', 'end', 'below', 'mouse']
            : ['above', 'below'];
        // Create fallbacks for each allowed prioritized fallback alignment combo
        /** @type {?} */
        const fallbacks = [];
        prioritizeAroundTarget(hTarget, possibleHorizontalAlignments).forEach((/**
         * @param {?} h
         * @return {?}
         */
        h => {
            prioritizeAroundTarget(vTarget, possibleVerticalAlignments).forEach((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                fallbacks.push(getPosition(h, v, this._popover._offsetPos));
            }));
        }));
        // Remove the first item since it will be the target alignment and isn't considered a fallback
        return fallbacks.slice(1, fallbacks.length);
    }
}
HcPopoverAnchoringService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HcPopoverAnchoringService.ctorParameters = () => [
    { type: Overlay },
    { type: NgZone },
    { type: Directionality, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * Emits when the popover is opened.
     * @type {?}
     */
    HcPopoverAnchoringService.prototype.popoverOpened;
    /**
     * Emits when the popover is closed.
     * @type {?}
     */
    HcPopoverAnchoringService.prototype.popoverClosed;
    /**
     * Reference to the overlay containing the popover component.
     * @type {?}
     */
    HcPopoverAnchoringService.prototype._overlayRef;
    /**
     * Reference to the target popover.
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._popover;
    /**
     * Stores the context assigned to the popover
     * @type {?}
     */
    HcPopoverAnchoringService.prototype._context;
    /**
     * Reference to the view container for the popover template.
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._viewContainerRef;
    /**
     * Reference to the anchor
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._anchor;
    /**
     * Reference to a template portal where the overlay will be attached.
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._portal;
    /**
     * Communications channel with the popover.
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._notifications;
    /**
     * Single subscription to notifications service events.
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._notificationsSubscription;
    /**
     * Single subscription to position changes.
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._positionChangeSubscription;
    /**
     * Whether the popover is presently open.
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._popoverOpen;
    /**
     * Emits when the service is destroyed.
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._onDestroy;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchoringService.prototype._dir;
}
/**
 * Helper function to convert an overlay connection position to equivalent popover alignment for arrow positioning
 * @param {?} hOverlay
 * @param {?} hOrigin
 * @return {?}
 */
function getHPopAlignmentForArrow(hOverlay, hOrigin) {
    if (hOverlay === hOrigin) {
        return hOverlay;
    }
    if (hOverlay === 'start') {
        return 'after';
    }
    if (hOverlay === 'end') {
        return 'before';
    }
    return 'center';
}
/**
 * Helper function to convert an overlay connection position to equivalent popover alignment for arrow positioning.
 * @param {?} vOverlay
 * @param {?} vOrigin
 * @return {?}
 */
function getVPopAlignmentForArrow(vOverlay, vOrigin) {
    if (vOverlay === vOrigin && (vOverlay === 'top' || vOverlay === 'bottom')) {
        return vOverlay === 'top' ? 'start' : 'end';
    }
    if (vOverlay === 'top') {
        return 'below';
    }
    if (vOverlay === 'bottom') {
        return 'above';
    }
    return 'center';
}
/**
 * Helper function to get a cdk position pair from HcPopover alignments.
 * @param {?} h
 * @param {?} v
 * @param {?} offset
 * @return {?}
 */
function getPosition(h, v, offset) {
    const { originX, overlayX } = getHorizontalConnectionPosPair(h);
    const { originY, overlayY } = getVerticalConnectionPosPair(v);
    return new ConnectionPositionPair({ originX, originY }, { overlayX, overlayY }, offset[0], offset[1]);
}
/**
 * Helper function to convert an overlay connection position to equivalent popover alignment.
 * @param {?} h
 * @return {?}
 */
function getHorizontalPopoverAlignment(h) {
    if (h === 'start') {
        return 'after';
    }
    if (h === 'end') {
        return 'before';
    }
    return 'center';
}
/**
 * Helper function to convert an overlay connection position to equivalent popover alignment.
 * @param {?} v
 * @return {?}
 */
function getVerticalPopoverAlignment(v) {
    if (v === 'top') {
        return 'below';
    }
    if (v === 'bottom') {
        return 'above';
    }
    return 'center';
}
/**
 * Helper function to convert alignment to origin/overlay position pair.
 * @param {?} h
 * @return {?}
 */
function getHorizontalConnectionPosPair(h) {
    switch (h) {
        case 'before':
            return { originX: 'start', overlayX: 'end' };
        case 'start':
        case 'mouse':
            return { originX: 'start', overlayX: 'start' };
        case 'end':
            return { originX: 'end', overlayX: 'end' };
        case 'after':
            return { originX: 'end', overlayX: 'start' };
        default:
            return { originX: 'center', overlayX: 'center' };
    }
}
/**
 * Helper function to convert alignment to origin/overlay position pair.
 * @param {?} v
 * @return {?}
 */
function getVerticalConnectionPosPair(v) {
    switch (v) {
        case 'above':
            return { originY: 'top', overlayY: 'bottom' };
        case 'start':
        case 'mouse':
            return { originY: 'top', overlayY: 'top' };
        case 'end':
            return { originY: 'bottom', overlayY: 'bottom' };
        case 'below':
            return { originY: 'bottom', overlayY: 'top' };
        default:
            return { originY: 'center', overlayY: 'center' };
    }
}
/**
 * Helper function that takes an ordered array options and returns a reorderded
 * array around the target item. e.g.:
 *
 * target: 3; options: [1, 2, 3, 4, 5, 6, 7];
 *
 * return: [3, 4, 2, 5, 1, 6, 7]
 * @template T
 * @param {?} target
 * @param {?} options
 * @return {?}
 */
function prioritizeAroundTarget(target, options) {
    /** @type {?} */
    const targetIndex = options.indexOf(target);
    // Set the first item to be the target
    /** @type {?} */
    const reordered = [target];
    // Make left and right stacks where the highest priority item is last
    /** @type {?} */
    const left = options.slice(0, targetIndex);
    /** @type {?} */
    const right = options.slice(targetIndex + 1, options.length).reverse();
    // Alternate between stacks until one is empty
    while (left.length && right.length) {
        /** @type {?} */
        const r = right.pop();
        if (r) {
            reordered.push(r);
        }
        /** @type {?} */
        const l = left.pop();
        if (l) {
            reordered.push(l);
        }
    }
    // Flush out right side
    while (right.length) {
        /** @type {?} */
        const r2 = right.pop();
        if (r2) {
            reordered.push(r2);
        }
    }
    // Flush out left side
    while (left.length) {
        /** @type {?} */
        const l2 = left.pop();
        if (l2) {
            reordered.push(l2);
        }
    }
    return reordered;
}
//# sourceMappingURL=data:application/json;base64,