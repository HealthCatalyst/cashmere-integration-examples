/**
 * @fileoverview added by tsickle
 * Generated from: lib/pop/popover.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Inject, Input, ViewChild, ViewEncapsulation, TemplateRef, Optional, Output, ContentChildren, QueryList } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { transformPopover } from './popover.animations';
import { NotificationAction, PopoverNotification } from './notification.service';
import { getUnanchoredPopoverError, getInvalidHorizontalAlignError, getInvalidVerticalAlignError, getInvalidScrollStrategyError } from './popover.errors';
import { VALID_SCROLL, VALID_HORIZ_ALIGN, VALID_VERT_ALIGN } from './types';
import { MenuItemDirective } from './directives/menu-item.directive';
import { Subject } from 'rxjs';
// See http://cubic-bezier.com/#.25,.8,.25,1 for reference.
/** @type {?} */
const DEFAULT_TRANSITION = '100ms linear';
/** @type {?} */
const EMPTY_TRANSITION = '0ms linear';
export class HcPopComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _focusTrapFactory
     * @param {?} _document
     */
    constructor(_elementRef, _focusTrapFactory, _document) {
        this._elementRef = _elementRef;
        this._focusTrapFactory = _focusTrapFactory;
        this._document = _document;
        /**
         * Whether or not to disable default popover container styles. *Defaults to `false`.*
         */
        this.disableStyle = false;
        /**
         * Whether or not to show a connection arrow when possible. *Defaults to `true`.*
         */
        this.showArrow = true;
        this._horizontalAlign = 'center';
        this._verticalAlign = 'below';
        this._forceAlignment = false;
        this._lockAlignment = false;
        this._autoFocus = false;
        this._autoFocusOverride = false;
        this._restoreFocus = true;
        this._restoreFocusOverride = true;
        this._scrollStrategy = 'reposition';
        this._hasBackdrop = true;
        this._interactiveClose = true;
        this._openTransition = DEFAULT_TRANSITION;
        this._closeTransition = DEFAULT_TRANSITION;
        /**
         * Should the popover animate? *Defaults to `true`.*
         */
        this.shouldAnimate = true;
        /**
         * Optional backdrop class. *Defaults to `''`.*
         */
        this.backdropClass = '';
        /**
         * Set to true if clicking anywhere inside the popover should close it. *Defaults to `false`.*
         */
        this.autoCloseOnContentClick = false;
        /**
         * Emits when the popover is opened. If `context` was set on the anchor, it will be emitted with this event.
         */
        this.opened = new EventEmitter();
        /**
         * Emits when the popover is closed.
         */
        this.closed = new EventEmitter();
        /**
         * Emits when the popover has finished opening.
         */
        this.afterOpen = new EventEmitter();
        /**
         * Emits when the popover has finished closing.
         */
        this.afterClose = new EventEmitter();
        /**
         * Emits when the backdrop is clicked.
         */
        this.backdropClicked = new EventEmitter();
        /**
         * Emits when a keydown event is targeted to this popover's overlay.
         */
        this.overlayKeydown = new EventEmitter();
        /**
         * Stores the click coordinates for mouse-based positioning
         */
        this._offsetPos = [0, 0];
        /**
         * Classes to be added to the popover for setting the correct transform origin.
         */
        this._classList = {};
        this._yAlignClass = '';
        this._xAlignClass = '';
        /**
         * Whether the popover is presently open.
         */
        this._open = false;
        /**
         * If this menu has children, keep track of whether any of them are open
         */
        this._subMenuOpen = false;
        /**
         * Reference to subscription of parent popover close events
         */
        this._parentClose = new Subject();
        /**
         * Block this popover from closing its parent on close
         */
        this._parentCloseBlock = false;
    }
    /**
     * Alignment of the popover on the horizontal axis. Can be `before`, `start`, `center`, `end`, `after`, or `mouse`.
     * *Defaults to `center`.*
     * @return {?}
     */
    get horizontalAlign() {
        return this._horizontalAlign;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set horizontalAlign(val) {
        this._validateHorizontalAlign(val);
        if (this._horizontalAlign !== val) {
            this._horizontalAlign = val;
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));
        }
    }
    /**
     * Alignment of the popover on the x axis. Alias for `horizontalAlign`. *Defaults to `"center"`.*
     * @return {?}
     */
    get xAlign() {
        return this.horizontalAlign;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set xAlign(val) {
        this.horizontalAlign = val;
    }
    /**
     * Alignment of the popover on the vertical axis. Can be `above`, `start`, `center`, `end`, `below`, or `mouse`.
     * *Defaults to `"below"`.*
     * @return {?}
     */
    get verticalAlign() {
        return this._verticalAlign;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set verticalAlign(val) {
        this._validateVerticalAlign(val);
        if (this._verticalAlign !== val) {
            this._verticalAlign = val;
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));
        }
    }
    /**
     * Alignment of the popover on the y axis. Alias for `verticalAlign`. *Defaults to `"below"`.*
     * @return {?}
     */
    get yAlign() {
        return this.verticalAlign;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set yAlign(val) {
        this.verticalAlign = val;
    }
    /**
     * Whether the popover always opens with the specified alignment. *Defaults to `false`.*
     * @return {?}
     */
    get forceAlignment() {
        return this._forceAlignment;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set forceAlignment(val) {
        /** @type {?} */
        const coercedVal = coerceBooleanProperty(val);
        if (this._forceAlignment !== coercedVal) {
            this._forceAlignment = coercedVal;
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));
        }
    }
    /**
     * Whether the popover's alignment is locked after opening. This prevents the popover
     * from changing its alignement when scrolling or changing the size of the viewport.
     * *Defaults to `false`.*
     * @return {?}
     */
    get lockAlignment() {
        return this._lockAlignment;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set lockAlignment(val) {
        /** @type {?} */
        const coercedVal = coerceBooleanProperty(val);
        if (this._lockAlignment !== coercedVal) {
            this._lockAlignment = coerceBooleanProperty(val);
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));
        }
    }
    /**
     * Whether the first focusable element should be focused on open. *Defaults to `false`.*
     * @return {?}
     */
    get autoFocus() {
        return this._autoFocus && this._autoFocusOverride;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set autoFocus(val) {
        this._autoFocus = coerceBooleanProperty(val);
    }
    /**
     * Whether the popover should return focus to the previously focused element after closing. *Defaults to `true`.*
     * @return {?}
     */
    get restoreFocus() {
        return this._restoreFocus && this._restoreFocusOverride;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set restoreFocus(val) {
        this._restoreFocus = coerceBooleanProperty(val);
    }
    /**
     * How the popover should handle scrolling. *Defaults to `"reposition"`.*
     * @return {?}
     */
    get scrollStrategy() {
        return this._scrollStrategy;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set scrollStrategy(val) {
        this._validateScrollStrategy(val);
        if (this._scrollStrategy !== val) {
            this._scrollStrategy = val;
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.UPDATE_CONFIG));
        }
    }
    /**
     * Whether the popover should have a backdrop (includes closing on click). *Defaults to `true`.*
     * @return {?}
     */
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set hasBackdrop(val) {
        this._hasBackdrop = coerceBooleanProperty(val);
        this._dispatchConfigNotification(new PopoverNotification(NotificationAction.UPDATE_CONFIG));
    }
    /**
     * Whether the popover should close when the user clicks the backdrop or presses ESC. *Defaults to `true`.*
     * @return {?}
     */
    get interactiveClose() {
        return this._interactiveClose;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set interactiveClose(val) {
        this._interactiveClose = coerceBooleanProperty(val);
        this._dispatchConfigNotification(new PopoverNotification(NotificationAction.UPDATE_CONFIG));
    }
    /**
     * Custom transition to use while opening. *Defaults to `'200ms cubic-bezier(0.25, 0.8, 0.25, 1)'`.*
     * @return {?}
     */
    get openTransition() {
        return this._openTransition;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set openTransition(val) {
        if (val) {
            this._openTransition = val;
        }
    }
    /**
     * Custom transition to use while closing. *Defaults to `'200ms cubic-bezier(0.25, 0.8, 0.25, 1)'`.*
     * @return {?}
     */
    get closeTransition() {
        return this._closeTransition;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set closeTransition(val) {
        if (val) {
            this._closeTransition = val;
        }
    }
    /**
     * A link to an associated parent menu that will be closed when this menu closes.
     * @return {?}
     */
    get parent() {
        return this._parentMenu;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set parent(val) {
        if (this._parentMenu) {
            this._parentClose.unsubscribe();
        }
        this._parentMenu = val;
        this._parentClose = this._parentMenu.closed.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (this.isOpen()) {
                this.close();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._setAlignmentClasses();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._notifications) {
            this._notifications.dispose();
        }
        if (this._parentMenu) {
            this._parentClose.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    _popContainerClicked() {
        if (this.autoCloseOnContentClick) {
            this.close();
        }
    }
    /**
     * Open this popover.
     * @param {?=} options
     * @return {?}
     */
    open(options = {}) {
        /** @type {?} */
        const notification = new PopoverNotification(NotificationAction.OPEN, options);
        this._dispatchActionNotification(notification);
    }
    /**
     * Close this popover and its parent (if linked).
     * @param {?=} value
     * @return {?}
     */
    close(value) {
        /** @type {?} */
        const notification = new PopoverNotification(NotificationAction.CLOSE, value);
        this._dispatchActionNotification(notification);
        if (this.parent && !this._parentCloseBlock) {
            this.parent.close();
        }
    }
    /**
     * Toggle this popover open or closed.
     * @return {?}
     */
    toggle() {
        if (this.parent) {
            this.parent._subMenuOpen = !this.isOpen();
        }
        /** @type {?} */
        const notification = new PopoverNotification(NotificationAction.TOGGLE);
        this._dispatchActionNotification(notification);
    }
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    realign() {
        /** @type {?} */
        const notification = new PopoverNotification(NotificationAction.REALIGN);
        this._dispatchActionNotification(notification);
    }
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    isOpen() {
        return this._open;
    }
    /**
     * Gets an animation config with customized (or default) transition values.
     * @return {?}
     */
    _getAnimation() {
        return {
            value: 'visible',
            params: {
                openTransition: this.shouldAnimate ? this.openTransition : EMPTY_TRANSITION,
                closeTransition: this.shouldAnimate ? this.closeTransition : EMPTY_TRANSITION
            }
        };
    }
    /**
     * Callback for when the popover is finished animating in or out.
     * @param {?} event
     * @return {?}
     */
    _onAnimationDone(event) {
        if (event.toState === 'visible') {
            this._trapFocus();
            this.afterOpen.emit();
        }
        else if (event.toState === 'void') {
            this._restoreFocusAndDestroyTrap();
            this.afterClose.emit();
        }
    }
    /**
     * Apply alignment classes based on alignment inputs.
     * @param {?=} horizAlign
     * @param {?=} vertAlign
     * @return {?}
     */
    _setAlignmentClasses(horizAlign = this.horizontalAlign, vertAlign = this.verticalAlign) {
        this._setAlignmentClassesForAnimation(horizAlign, vertAlign);
        this._setAlignmentClassesForArrow();
    }
    /**
     * @param {?=} horizAlign
     * @param {?=} vertAlign
     * @return {?}
     */
    _setAlignmentClassesForAnimation(horizAlign = this.horizontalAlign, vertAlign = this.verticalAlign) {
        this._classList['hc-pop-before'] = horizAlign === 'before' || horizAlign === 'end';
        this._classList['hc-pop-after'] = horizAlign === 'after' || horizAlign === 'start';
        this._classList['hc-pop-above'] = vertAlign === 'above' || vertAlign === 'end';
        this._classList['hc-pop-below'] = vertAlign === 'below' || vertAlign === 'start';
        this._classList['hc-pop-center'] = horizAlign === 'center' || vertAlign === 'center';
    }
    /**
     * @param {?=} xAlign
     * @param {?=} yAlign
     * @return {?}
     */
    _setAlignmentClassesForArrow(xAlign = this.horizontalAlign, yAlign = this.verticalAlign) {
        this._classList['hc-pop-show-arrow'] =
            (this.showArrow &&
                (xAlign === 'start' || xAlign === 'center' || xAlign === 'end') &&
                (yAlign === 'above' || yAlign === 'below')) ||
                ((yAlign === 'start' || yAlign === 'center' || yAlign === 'end') && (xAlign === 'before' || xAlign === 'after'));
        this._yAlignClass = this._classList['hc-pop-show-arrow'] ? `hc-pop-arrow-y-${yAlign}` : '';
        this._xAlignClass = this._classList['hc-pop-show-arrow'] ? `hc-pop-arrow-x-${xAlign}` : '';
    }
    /**
     * Set the focus of an hcMenu based on a keyboard arrow press
     * @param {?} downPress
     * @return {?}
     */
    _keyFocus(downPress) {
        /** @type {?} */
        let itemArray = this._menuItems.toArray();
        if (!downPress) {
            itemArray.reverse();
        }
        /** @type {?} */
        let selected = false;
        // Determine if any item in the menu is currently focused, and select the next (or previous)
        for (let i = 0; i < itemArray.length; i++) {
            if (selected && !itemArray[i].ref.nativeElement.classList.contains('hc-divider') && !itemArray[i].ref.nativeElement.disabled) {
                itemArray[i].focus();
                return;
            }
            if (itemArray[i].ref.nativeElement === document.activeElement) {
                selected = true;
            }
        }
        // If no item is focused, selected the first (or last) item that isn't a divider or disabled
        for (let i = 0; i < itemArray.length; i++) {
            if (!itemArray[i].ref.nativeElement.classList.contains('hc-divider') && !itemArray[i].ref.nativeElement.disabled) {
                itemArray[i].focus();
                return;
            }
        }
    }
    /**
     * Restore focus to the element focused before the popover opened. Also destroy trap.
     * @return {?}
     */
    _restoreFocusAndDestroyTrap() {
        /** @type {?} */
        const toFocus = this._previouslyFocusedElement;
        // Must check active element is focusable for IE sake
        if (toFocus && 'focus' in toFocus && this.restoreFocus && this._previouslyFocusedElement) {
            this._previouslyFocusedElement.focus();
        }
        this._previouslyFocusedElement = null;
        if (this._focusTrap) {
            this._focusTrap.destroy();
            this._focusTrap = undefined;
        }
    }
    /**
     * Save a reference to the element focused before the popover was opened.
     * @return {?}
     */
    _savePreviouslyFocusedElement() {
        if (this._document) {
            this._previouslyFocusedElement = (/** @type {?} */ (this._document.activeElement));
        }
    }
    /**
     * Move the focus inside the focus trap and remember where to return later.
     * @private
     * @return {?}
     */
    _trapFocus() {
        // There won't be a focus trap element if the close animation starts before open finishes
        if (!this._focusTrapElement) {
            return;
        }
        if (!this._focusTrap && this._focusTrapElement) {
            this._focusTrap = this._focusTrapFactory.create(this._focusTrapElement.nativeElement);
        }
        if (this.autoFocus && this._focusTrap) {
            this._focusTrap.focusInitialElementWhenReady();
        }
    }
    /**
     * Dispatch a notification to the notification service, if possible.
     * @private
     * @param {?} notification
     * @return {?}
     */
    _dispatchConfigNotification(notification) {
        if (this._notifications) {
            this._notifications.dispatch(notification);
        }
    }
    /**
     * Dispatch a notification to the notification service and throw if unable to.
     * @private
     * @param {?} notification
     * @return {?}
     */
    _dispatchActionNotification(notification) {
        if (!this._notifications) {
            throw getUnanchoredPopoverError();
        }
        this._notifications.dispatch(notification);
    }
    /**
     * Throws an error if the alignment is not a valid horizontalAlign.
     * @private
     * @param {?} pos
     * @return {?}
     */
    _validateHorizontalAlign(pos) {
        if (VALID_HORIZ_ALIGN.indexOf(pos) === -1) {
            throw getInvalidHorizontalAlignError(pos);
        }
    }
    /**
     * Throws an error if the alignment is not a valid verticalAlign.
     * @private
     * @param {?} pos
     * @return {?}
     */
    _validateVerticalAlign(pos) {
        if (VALID_VERT_ALIGN.indexOf(pos) === -1) {
            throw getInvalidVerticalAlignError(pos);
        }
    }
    /**
     * Throws an error if the scroll strategy is not a valid strategy.
     * @private
     * @param {?} strategy
     * @return {?}
     */
    _validateScrollStrategy(strategy) {
        if (VALID_SCROLL.indexOf(strategy) === -1) {
            throw getInvalidScrollStrategyError(strategy);
        }
    }
}
HcPopComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-pop',
                encapsulation: ViewEncapsulation.None,
                animations: [transformPopover],
                template: "<ng-template>\n  <div class=\"hc-pop-container\"\n      #focusTrapElement\n      class=\"{{_yAlignClass}} {{_xAlignClass}}\"\n      [class.hc-pop-container-basic]=\"!disableStyle\"\n      [ngClass]=\"_classList\"\n      (click)=\"_popContainerClicked()\"\n      [@transformPopover]=\"_getAnimation()\"\n      (@transformPopover.done)=\"_onAnimationDone($event)\">\n    <ng-content></ng-content>\n    <div *ngIf=\"showArrow\" class=\"hc-pop-arrow {{_yAlignClass}} {{_xAlignClass}}\"></div>\n  </div>\n</ng-template>\n",
                styles: [".cdk-global-overlay-wrapper,.cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed;z-index:2100}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper{display:-webkit-box;display:flex;position:absolute;z-index:2100}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:2100;display:-webkit-box;display:flex;max-width:100%;max-height:100%}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;-webkit-tap-highlight-color:transparent;-webkit-transition:opacity .4s cubic-bezier(.25,.8,.25,1);transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:1}@media screen and (-ms-high-contrast:active){.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.6}}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.32)}.cdk-overlay-transparent-backdrop,.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{opacity:0}.cdk-overlay-connected-position-bounding-box{position:absolute;z-index:2100;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;min-width:1px;min-height:1px}.cdk-global-scrollblock{position:fixed;width:100%;overflow-y:scroll}.hc-pop-before.hc-pop-above{-webkit-transform-origin:right bottom;transform-origin:right bottom}[dir=rtl] .hc-pop-before.hc-pop-above{-webkit-transform-origin:left bottom;transform-origin:left bottom}.hc-pop-before.hc-pop-center{-webkit-transform-origin:right center;transform-origin:right center}[dir=rtl] .hc-pop-before.hc-pop-center{-webkit-transform-origin:left center;transform-origin:left center}.hc-pop-before.hc-pop-below{-webkit-transform-origin:right top;transform-origin:right top}[dir=rtl] .hc-pop-before.hc-pop-below{-webkit-transform-origin:left top;transform-origin:left top}.hc-pop-center.hc-pop-above{-webkit-transform-origin:center bottom;transform-origin:center bottom}.hc-pop-center.hc-pop-below{-webkit-transform-origin:center top;transform-origin:center top}.hc-pop-after.hc-pop-above{-webkit-transform-origin:left bottom;transform-origin:left bottom}[dir=rtl] .hc-pop-after.hc-pop-above{-webkit-transform-origin:right bottom;transform-origin:right bottom}.hc-pop-after.hc-pop-center{-webkit-transform-origin:left center;transform-origin:left center}[dir=rtl] .hc-pop-after.hc-pop-center{-webkit-transform-origin:right center;transform-origin:right center}.hc-pop-after.hc-pop-below{-webkit-transform-origin:left top;transform-origin:left top}[dir=rtl] .hc-pop-after.hc-pop-below{-webkit-transform-origin:right top;transform-origin:right top}.hc-pop-container-basic{background-color:#fff;border:1px solid #ccc;border-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12);color:#333;padding:12px}.hc-pop-show-arrow .hc-pop-arrow{background-color:#fff;border-style:solid;border-width:1px;display:block;height:10px;position:absolute;-webkit-transform:rotate(45deg);transform:rotate(45deg);width:10px}.hc-pop-arrow-x-start .hc-pop-arrow{left:5px}.hc-pop-arrow-x-center .hc-pop-arrow{left:calc(50% - 6px)}.hc-pop-arrow-x-end .hc-pop-arrow{left:calc(100% - 15px)}.hc-pop-arrow-y-start .hc-pop-arrow{top:5px}.hc-pop-arrow-y-center .hc-pop-arrow{top:calc(50% - 6px)}.hc-pop-arrow-y-end .hc-pop-arrow{top:calc(100% - 15px)}.hc-pop-arrow-y-above .hc-pop-arrow{border-color:transparent #ccc #ccc transparent;bottom:-6px}.hc-pop-arrow-y-below .hc-pop-arrow{border-color:#ccc transparent transparent #ccc;top:-6px}.hc-pop-arrow-x-before .hc-pop-arrow{border-color:#ccc #ccc transparent transparent;right:-6px}.hc-pop-arrow-x-after .hc-pop-arrow{border-color:transparent transparent #ccc #ccc;left:-6px}.hc-pop-arrow-y-above.hc-pop-show-arrow,.hc-pop-arrow-y-below.hc-pop-show-arrow{margin:6px 0;position:relative}.hc-pop-arrow-x-after.hc-pop-show-arrow,.hc-pop-arrow-x-before.hc-pop-show-arrow{margin:0 6px;position:relative}"]
            }] }
];
/** @nocollapse */
HcPopComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: FocusTrapFactory },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
HcPopComponent.propDecorators = {
    disableStyle: [{ type: Input }],
    showArrow: [{ type: Input }],
    horizontalAlign: [{ type: Input }],
    xAlign: [{ type: Input }],
    verticalAlign: [{ type: Input }],
    yAlign: [{ type: Input }],
    forceAlignment: [{ type: Input }],
    lockAlignment: [{ type: Input }],
    autoFocus: [{ type: Input }],
    restoreFocus: [{ type: Input }],
    scrollStrategy: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    interactiveClose: [{ type: Input }],
    openTransition: [{ type: Input }],
    closeTransition: [{ type: Input }],
    parent: [{ type: Input }],
    shouldAnimate: [{ type: Input }],
    backdropClass: [{ type: Input }],
    autoCloseOnContentClick: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    afterOpen: [{ type: Output }],
    afterClose: [{ type: Output }],
    backdropClicked: [{ type: Output }],
    overlayKeydown: [{ type: Output }],
    _templateRef: [{ type: ViewChild, args: [TemplateRef, { static: false },] }],
    _focusTrapElement: [{ type: ViewChild, args: ['focusTrapElement', { static: false },] }],
    _menuItems: [{ type: ContentChildren, args: [MenuItemDirective, { descendants: true },] }]
};
if (false) {
    /**
     * Whether or not to disable default popover container styles. *Defaults to `false`.*
     * @type {?}
     */
    HcPopComponent.prototype.disableStyle;
    /**
     * Whether or not to show a connection arrow when possible. *Defaults to `true`.*
     * @type {?}
     */
    HcPopComponent.prototype.showArrow;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._horizontalAlign;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._verticalAlign;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._forceAlignment;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._lockAlignment;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._autoFocus;
    /** @type {?} */
    HcPopComponent.prototype._autoFocusOverride;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._restoreFocus;
    /** @type {?} */
    HcPopComponent.prototype._restoreFocusOverride;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._scrollStrategy;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._hasBackdrop;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._interactiveClose;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._openTransition;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._closeTransition;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._parentMenu;
    /**
     * Should the popover animate? *Defaults to `true`.*
     * @type {?}
     */
    HcPopComponent.prototype.shouldAnimate;
    /**
     * Optional backdrop class. *Defaults to `''`.*
     * @type {?}
     */
    HcPopComponent.prototype.backdropClass;
    /**
     * Set to true if clicking anywhere inside the popover should close it. *Defaults to `false`.*
     * @type {?}
     */
    HcPopComponent.prototype.autoCloseOnContentClick;
    /**
     * Emits when the popover is opened. If `context` was set on the anchor, it will be emitted with this event.
     * @type {?}
     */
    HcPopComponent.prototype.opened;
    /**
     * Emits when the popover is closed.
     * @type {?}
     */
    HcPopComponent.prototype.closed;
    /**
     * Emits when the popover has finished opening.
     * @type {?}
     */
    HcPopComponent.prototype.afterOpen;
    /**
     * Emits when the popover has finished closing.
     * @type {?}
     */
    HcPopComponent.prototype.afterClose;
    /**
     * Emits when the backdrop is clicked.
     * @type {?}
     */
    HcPopComponent.prototype.backdropClicked;
    /**
     * Emits when a keydown event is targeted to this popover's overlay.
     * @type {?}
     */
    HcPopComponent.prototype.overlayKeydown;
    /**
     * Reference to template so it can be placed within a portal.
     * @type {?}
     */
    HcPopComponent.prototype._templateRef;
    /**
     * Stores the click coordinates for mouse-based positioning
     * @type {?}
     */
    HcPopComponent.prototype._offsetPos;
    /**
     * Stores a reference to the associated overlay
     * @type {?}
     */
    HcPopComponent.prototype._componentOverlay;
    /**
     * Classes to be added to the popover for setting the correct transform origin.
     * @type {?}
     */
    HcPopComponent.prototype._classList;
    /** @type {?} */
    HcPopComponent.prototype._yAlignClass;
    /** @type {?} */
    HcPopComponent.prototype._xAlignClass;
    /**
     * Whether the popover is presently open.
     * @type {?}
     */
    HcPopComponent.prototype._open;
    /**
     * Instance of notification service. Will be undefined until attached to an anchor.
     * @type {?}
     */
    HcPopComponent.prototype._notifications;
    /**
     * Reference to the element to build a focus trap around.
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._focusTrapElement;
    /**
     * Reference to the element that was focused before opening.
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._previouslyFocusedElement;
    /**
     * Reference to a focus trap around the popover.
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._focusTrap;
    /**
     * If this menu has children, keep track of whether any of them are open
     * @type {?}
     */
    HcPopComponent.prototype._subMenuOpen;
    /**
     * Reference to subscription of parent popover close events
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._parentClose;
    /**
     * Block this popover from closing its parent on close
     * @type {?}
     */
    HcPopComponent.prototype._parentCloseBlock;
    /**
     * Reference to hcMenuItems (if the popover contains them)
     * @type {?}
     */
    HcPopComponent.prototype._menuItems;
    /** @type {?} */
    HcPopComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._focusTrapFactory;
    /**
     * @type {?}
     * @private
     */
    HcPopComponent.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,