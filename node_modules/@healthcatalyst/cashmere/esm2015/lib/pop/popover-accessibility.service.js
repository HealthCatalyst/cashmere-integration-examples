/**
 * @fileoverview added by tsickle
 * Generated from: lib/pop/popover-accessibility.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @enum {number} */
const KEY_CODE = {
    DOWN_ARROW: 40,
    RIGHT_ARROW: 39,
    UP_ARROW: 38,
    LEFT_ARROW: 37,
    TAB: 9,
};
export { KEY_CODE };
KEY_CODE[KEY_CODE.DOWN_ARROW] = 'DOWN_ARROW';
KEY_CODE[KEY_CODE.RIGHT_ARROW] = 'RIGHT_ARROW';
KEY_CODE[KEY_CODE.UP_ARROW] = 'UP_ARROW';
KEY_CODE[KEY_CODE.LEFT_ARROW] = 'LEFT_ARROW';
KEY_CODE[KEY_CODE.TAB] = 'TAB';
/**
 * @record
 */
export function HcPopKeyboardNotifier() { }
if (false) {
    /** @type {?} */
    HcPopKeyboardNotifier.prototype.isOpen;
    /** @type {?} */
    HcPopKeyboardNotifier.prototype.nativeElement;
    /** @type {?} */
    HcPopKeyboardNotifier.prototype.hasSubmenu;
    /** @type {?} */
    HcPopKeyboardNotifier.prototype.onKeyDown;
}
export class HcPopoverAccessibilityService {
    constructor() {
        this.notifiers = [];
        this.handleKeydown = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.notifiers.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.isOpen)).forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.onKeyDown(event)));
            if (event.keyCode === KEY_CODE.RIGHT_ARROW) {
                this.notifiers.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => document.activeElement === n.nativeElement && n.hasSubmenu())).forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.onKeyDown(event)));
            }
        });
        window.addEventListener('keydown', this.handleKeydown);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        window.removeEventListener('keydown', this.handleKeydown);
    }
    /**
     * @param {?} notifier
     * @return {?}
     */
    registerNotifier(notifier) {
        this.notifiers.push(notifier);
    }
}
HcPopoverAccessibilityService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HcPopoverAccessibilityService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcPopoverAccessibilityService.prototype.notifiers;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAccessibilityService.prototype.handleKeydown;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1hY2Nlc3NpYmlsaXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcG9wL3BvcG92ZXItYWNjZXNzaWJpbGl0eS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBWSxNQUFNLGVBQWUsQ0FBQzs7QUFDcEQsTUFBWSxRQUFRO0lBQ2hCLFVBQVUsSUFBSztJQUNmLFdBQVcsSUFBSztJQUNoQixRQUFRLElBQUs7SUFDYixVQUFVLElBQUs7SUFDZixHQUFHLEdBQUk7RUFDVjs7Ozs7Ozs7OztBQUVELDJDQUtDOzs7SUFKRyx1Q0FBZ0I7O0lBQ2hCLDhDQUEyQjs7SUFDM0IsMkNBQTBCOztJQUMxQiwwQ0FBMEM7O0FBSTlDLE1BQU0sT0FBTyw2QkFBNkI7SUFHdEM7UUFGUSxjQUFTLEdBQTRCLEVBQUUsQ0FBQztRQWN4QyxrQkFBYTs7OztRQUFHLENBQUMsS0FBb0IsRUFBRSxFQUFFO1lBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTTs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQztZQUN0RSxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLFdBQVcsRUFBRTtnQkFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNOzs7O2dCQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUMsYUFBYSxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBQyxDQUFDLE9BQU87Ozs7Z0JBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUM7YUFDN0g7UUFDTCxDQUFDLEVBQUM7UUFoQkUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLFFBQStCO1FBQzVDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7OztZQWRKLFVBQVU7Ozs7Ozs7OztJQUVQLGtEQUFnRDs7Ozs7SUFjaEQsc0RBS0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgZW51bSBLRVlfQ09ERSB7XG4gICAgRE9XTl9BUlJPVyA9IDQwLFxuICAgIFJJR0hUX0FSUk9XID0gMzksXG4gICAgVVBfQVJST1cgPSAzOCxcbiAgICBMRUZUX0FSUk9XID0gMzcsXG4gICAgVEFCID0gOVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhjUG9wS2V5Ym9hcmROb3RpZmllciB7XG4gICAgaXNPcGVuOiBib29sZWFuO1xuICAgIG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIGhhc1N1Ym1lbnU6ICgpID0+IGJvb2xlYW47XG4gICAgb25LZXlEb3duOiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQ7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIY1BvcG92ZXJBY2Nlc3NpYmlsaXR5U2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBub3RpZmllcnM6IEhjUG9wS2V5Ym9hcmROb3RpZmllcltdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWRvd24pO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5ZG93bik7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJOb3RpZmllcihub3RpZmllcjogSGNQb3BLZXlib2FyZE5vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXJzLnB1c2gobm90aWZpZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlS2V5ZG93biA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICB0aGlzLm5vdGlmaWVycy5maWx0ZXIobiA9PiBuLmlzT3BlbikuZm9yRWFjaChuID0+IG4ub25LZXlEb3duKGV2ZW50KSk7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlfQ09ERS5SSUdIVF9BUlJPVykge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmllcnMuZmlsdGVyKG4gPT4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gbi5uYXRpdmVFbGVtZW50ICYmIG4uaGFzU3VibWVudSgpKS5mb3JFYWNoKG4gPT4gbi5vbktleURvd24oZXZlbnQpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4iXX0=