/**
 * @fileoverview added by tsickle
 * Generated from: lib/pop/directives/menu.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, ContentChildren, QueryList } from '@angular/core';
import { HcPopoverAnchorDirective } from './popover-anchor.directive';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * The `hcMenu` directive provides a standard way of displaying a series of selectable elements in a popover.
 */
export class MenuDirective {
    constructor() {
        this._hostClass = true;
        this.unsubscribe$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._subMenus.forEach((/**
         * @param {?} anchor
         * @return {?}
         */
        (anchor) => {
            anchor._hasSubmenu = true;
            // Subscribe to submenu open events so we can close any other submenus currently open
            anchor.popoverOpened.pipe(takeUntil(this.unsubscribe$)).subscribe((/**
             * @return {?}
             */
            () => {
                this._subMenus.forEach((/**
                 * @param {?} sub
                 * @return {?}
                 */
                (sub) => {
                    if (sub !== anchor && sub.attachedPopover.isOpen()) {
                        sub.attachedPopover._parentCloseBlock = true;
                        sub.attachedPopover._restoreFocusOverride = false;
                        sub.closePopover({}, true);
                        sub.attachedPopover._restoreFocusOverride = true;
                        /** @type {?} */
                        let closeSub = sub.attachedPopover.afterClose.subscribe((/**
                         * @return {?}
                         */
                        () => {
                            sub.attachedPopover._parentCloseBlock = false;
                            closeSub.unsubscribe();
                        }));
                    }
                }));
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
MenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hcMenu]'
            },] }
];
MenuDirective.propDecorators = {
    _hostClass: [{ type: HostBinding, args: ['class.hc-menu-panel',] }],
    _subMenus: [{ type: ContentChildren, args: [HcPopoverAnchorDirective,] }]
};
if (false) {
    /** @type {?} */
    MenuDirective.prototype._hostClass;
    /** @type {?} */
    MenuDirective.prototype._subMenus;
    /**
     * @type {?}
     * @private
     */
    MenuDirective.prototype.unsubscribe$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcG9wL2RpcmVjdGl2ZXMvbWVudS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUE4QixNQUFNLGVBQWUsQ0FBQztBQUM5RyxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUMsT0FBTyxFQUFlLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQU16QyxNQUFNLE9BQU8sYUFBYTtJQUgxQjtRQUtJLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFLVixpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUEyQi9DLENBQUM7Ozs7SUF6Qkcsa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxNQUFnQyxFQUFFLEVBQUU7WUFDeEQsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDMUIscUZBQXFGO1lBQ3JGLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQ25FLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTzs7OztnQkFBQyxDQUFDLEdBQTZCLEVBQUUsRUFBRTtvQkFDckQsSUFBSSxHQUFHLEtBQUssTUFBTSxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEVBQUU7d0JBQ2hELEdBQUcsQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO3dCQUM3QyxHQUFHLENBQUMsZUFBZSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQzt3QkFDbEQsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7d0JBQzNCLEdBQUcsQ0FBQyxlQUFlLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDOzs0QkFDN0MsUUFBUSxHQUFpQixHQUFHLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxTQUFTOzs7d0JBQUMsR0FBRyxFQUFFOzRCQUN2RSxHQUFHLENBQUMsZUFBZSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQzs0QkFDOUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO3dCQUMzQixDQUFDLEVBQUM7cUJBQ0w7Z0JBQ0wsQ0FBQyxFQUFDLENBQUM7WUFDUCxDQUFDLEVBQUMsQ0FBQztRQUNQLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakMsQ0FBQzs7O1lBcENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsVUFBVTthQUN2Qjs7O3lCQUVJLFdBQVcsU0FBQyxxQkFBcUI7d0JBR2pDLGVBQWUsU0FBQyx3QkFBd0I7Ozs7SUFIekMsbUNBQ2tCOztJQUVsQixrQ0FDK0M7Ozs7O0lBRS9DLHFDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0hjUG9wb3ZlckFuY2hvckRpcmVjdGl2ZX0gZnJvbSAnLi9wb3BvdmVyLWFuY2hvci5kaXJlY3RpdmUnO1xuaW1wb3J0IHtTdWJqZWN0LCBTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqIFRoZSBgaGNNZW51YCBkaXJlY3RpdmUgcHJvdmlkZXMgYSBzdGFuZGFyZCB3YXkgb2YgZGlzcGxheWluZyBhIHNlcmllcyBvZiBzZWxlY3RhYmxlIGVsZW1lbnRzIGluIGEgcG9wb3Zlci4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2hjTWVudV0nXG59KVxuZXhwb3J0IGNsYXNzIE1lbnVEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaGMtbWVudS1wYW5lbCcpXG4gICAgX2hvc3RDbGFzcyA9IHRydWU7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKEhjUG9wb3ZlckFuY2hvckRpcmVjdGl2ZSlcbiAgICBfc3ViTWVudXM6IFF1ZXJ5TGlzdDxIY1BvcG92ZXJBbmNob3JEaXJlY3RpdmU+O1xuXG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICB0aGlzLl9zdWJNZW51cy5mb3JFYWNoKChhbmNob3I6IEhjUG9wb3ZlckFuY2hvckRpcmVjdGl2ZSkgPT4ge1xuICAgICAgICAgICAgYW5jaG9yLl9oYXNTdWJtZW51ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIFN1YnNjcmliZSB0byBzdWJtZW51IG9wZW4gZXZlbnRzIHNvIHdlIGNhbiBjbG9zZSBhbnkgb3RoZXIgc3VibWVudXMgY3VycmVudGx5IG9wZW5cbiAgICAgICAgICAgIGFuY2hvci5wb3BvdmVyT3BlbmVkLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJNZW51cy5mb3JFYWNoKChzdWI6IEhjUG9wb3ZlckFuY2hvckRpcmVjdGl2ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViICE9PSBhbmNob3IgJiYgc3ViLmF0dGFjaGVkUG9wb3Zlci5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLmF0dGFjaGVkUG9wb3Zlci5fcGFyZW50Q2xvc2VCbG9jayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIuYXR0YWNoZWRQb3BvdmVyLl9yZXN0b3JlRm9jdXNPdmVycmlkZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLmNsb3NlUG9wb3Zlcih7fSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIuYXR0YWNoZWRQb3BvdmVyLl9yZXN0b3JlRm9jdXNPdmVycmlkZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2xvc2VTdWI6IFN1YnNjcmlwdGlvbiA9IHN1Yi5hdHRhY2hlZFBvcG92ZXIuYWZ0ZXJDbG9zZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5hdHRhY2hlZFBvcG92ZXIuX3BhcmVudENsb3NlQmxvY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZVN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xuICAgIH1cbn1cbiJdfQ==