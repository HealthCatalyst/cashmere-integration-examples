/**
 * @fileoverview added by tsickle
 * Generated from: lib/pop/directives/popover-anchor.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, ViewContainerRef, HostListener, HostBinding } from '@angular/core';
import { Subject, merge } from 'rxjs';
import { tap, takeUntil } from 'rxjs/operators';
import { HcPopComponent } from '../popover.component';
import { getInvalidPopoverError, getInvalidTriggerError } from '../popover.errors';
import { HcPopoverAnchoringService } from '../popover-anchoring.service';
import { VALID_TRIGGER } from '../types';
import { PopoverNotification, NotificationAction } from '../notification.service';
import { HcPopoverAccessibilityService, KEY_CODE } from '../popover-accessibility.service';
export class HcPopoverAnchorDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _viewContainerRef
     * @param {?} _anchoring
     * @param {?} _accessibility
     */
    constructor(_elementRef, _viewContainerRef, _anchoring, _accessibility) {
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._anchoring = _anchoring;
        this._accessibility = _accessibility;
        this._trigger = 'click';
        this._hasSubmenu = false;
        /**
         * Emits when the popover is opened.
         */
        this.popoverOpened = new EventEmitter();
        /**
         * Emits when the popover is closed.
         */
        this.popoverClosed = new EventEmitter();
        /**
         * Emits when the directive is destroyed.
         */
        this._onDestroy = new Subject();
    }
    /**
     * Reference to the popover instance.
     * @return {?}
     */
    get attachedPopover() {
        return this._attachedPopover;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set attachedPopover(value) {
        this._validateAttachedPopover(value);
        this._attachedPopover = value;
        // Anchor the popover to the element ref
        this._anchoring.anchor(this.attachedPopover, this._viewContainerRef, this);
    }
    /**
     * Trigger event to toggle the popover. *Defaults to `"click"`.*
     * Accepts `click`, `mousedown`, `hover`, `rightclick`, or `none`.
     * Note: if "hover" is selected, the backdrop for the popover will be disabled.
     * @return {?}
     */
    get trigger() {
        return this._trigger;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set trigger(val) {
        this._validateTrigger(val);
        if (this._trigger !== val) {
            this._trigger = val;
        }
        this._dispatchConfigNotification(new PopoverNotification(NotificationAction.UPDATE_CONFIG));
    }
    /**
     * Object or value that can be passed into the popover to customize its content
     * @return {?}
     */
    get context() {
        return this._anchoring._context;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set context(val) {
        this._anchoring._context = val;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Re-emit open and close events
        /** @type {?} */
        const opened$ = this._anchoring.popoverOpened.pipe(tap((/**
         * @return {?}
         */
        () => this.popoverOpened.emit())));
        /** @type {?} */
        const closed$ = this._anchoring.popoverClosed.pipe(tap((/**
         * @param {?} value
         * @return {?}
         */
        value => this.popoverClosed.emit(value))));
        merge(opened$, closed$)
            .pipe(takeUntil(this._onDestroy))
            .subscribe();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._setupKeyboardEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _showOrHideOnClick($event) {
        if (this._hasSubmenu && event) {
            // Prevent the popover component from auto closing on click if a submenu was selected
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.trigger !== 'click') {
            return;
        }
        this._attachedPopover._offsetPos[0] = this._attachedPopover.horizontalAlign === 'mouse' ? $event.offsetX : 0;
        this._attachedPopover._offsetPos[1] = this._attachedPopover.verticalAlign === 'mouse' ? $event.offsetY : 0;
        this.togglePopover();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _showOrHideOnMouseOver($event) {
        if (this.trigger !== 'mousedown') {
            return;
        }
        this._attachedPopover._offsetPos[0] = this._attachedPopover.horizontalAlign === 'mouse' ? $event.offsetX : 0;
        this._attachedPopover._offsetPos[1] = this._attachedPopover.verticalAlign === 'mouse' ? $event.offsetY : 0;
        this.togglePopover();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _showOrHideRightClick($event) {
        if (this.trigger !== 'rightclick') {
            return true;
        }
        else {
            this._attachedPopover._offsetPos[0] = this._attachedPopover.horizontalAlign === 'mouse' ? $event.offsetX : 0;
            this._attachedPopover._offsetPos[1] = this._attachedPopover.verticalAlign === 'mouse' ? $event.offsetY : 0;
            this.togglePopover();
            return false;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _showOnHover($event) {
        if (this.trigger !== 'hover') {
            return;
        }
        this._attachedPopover._offsetPos[0] = this._attachedPopover.horizontalAlign === 'mouse' ? $event.offsetX : 0;
        this._attachedPopover._offsetPos[1] = this._attachedPopover.verticalAlign === 'mouse' ? $event.offsetY : 0;
        this.openPopover();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _hideOnLeave($event) {
        if (this.trigger !== 'hover') {
            return;
        }
        this.closePopover();
    }
    /**
     * Handle keyboard navigation of a hcMenu using the arrow or tab keys
     * @param {?} event
     * @return {?}
     */
    _keyEvent(event) {
        if (this.attachedPopover.isOpen() && this.attachedPopover._menuItems.length > 0 && !this.attachedPopover._subMenuOpen) {
            if (event.keyCode === KEY_CODE.UP_ARROW || (event.keyCode === KEY_CODE.TAB && event.shiftKey)) {
                event.stopPropagation();
                event.preventDefault();
                this.attachedPopover._keyFocus(false);
            }
            else if (event.keyCode === KEY_CODE.DOWN_ARROW || (event.keyCode === KEY_CODE.TAB && !event.shiftKey)) {
                event.stopPropagation();
                event.preventDefault();
                this.attachedPopover._keyFocus(true);
            }
            else if (this.attachedPopover.parent && this.attachedPopover.parent.isOpen() && event.keyCode === KEY_CODE.LEFT_ARROW) {
                event.stopPropagation();
                event.preventDefault();
                this.closePopover();
            }
        }
        if (this._hasSubmenu && this._elementRef.nativeElement === document.activeElement && event.keyCode === KEY_CODE.RIGHT_ARROW) {
            event.stopPropagation();
            event.preventDefault();
            this.openPopover();
            this.attachedPopover._keyFocus(true);
        }
    }
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    isPopoverOpen() {
        return this._anchoring.isPopoverOpen();
    }
    /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    togglePopover() {
        this._anchoring.togglePopover();
    }
    /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    openPopover(options = {}) {
        this._anchoring.openPopover(options);
    }
    /**
     * Closes the popover.
     * @param {?=} value
     * @param {?=} neighborSubMenusAreOpen
     * @return {?}
     */
    closePopover(value, neighborSubMenusAreOpen = false) {
        this._anchoring.closePopover(value, neighborSubMenusAreOpen);
    }
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    realignPopover() {
        this._anchoring.realignPopoverToAnchor();
    }
    /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    getElement() {
        return this._elementRef;
    }
    /**
     * Throws an error if the popover instance is not provided.
     * @private
     * @param {?} popover
     * @return {?}
     */
    _validateAttachedPopover(popover) {
        if (!popover || !(popover instanceof HcPopComponent)) {
            throw getInvalidPopoverError();
        }
    }
    /**
     * Throws an error if the trigger is not a valid HcPopoverTrigger.
     * @private
     * @param {?} trig
     * @return {?}
     */
    _validateTrigger(trig) {
        if (VALID_TRIGGER.indexOf(trig) === -1) {
            throw getInvalidTriggerError(trig);
        }
    }
    /**
     * Dispatch a notification to the notification service, if possible.
     * @private
     * @param {?} notification
     * @return {?}
     */
    _dispatchConfigNotification(notification) {
        if (this._notifications) {
            this._notifications.dispatch(notification);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _setupKeyboardEvents() {
        /** @type {?} */
        const notifier = {
            isOpen: false,
            nativeElement: this._elementRef.nativeElement,
            hasSubmenu: (/**
             * @return {?}
             */
            () => this._hasSubmenu),
            onKeyDown: (/**
             * @param {?} event
             * @return {?}
             */
            event => this._keyEvent(event))
        };
        this.popoverClosed.asObservable().subscribe((/**
         * @return {?}
         */
        () => (notifier.isOpen = false)));
        this.popoverOpened.asObservable().subscribe((/**
         * @return {?}
         */
        () => (notifier.isOpen = true)));
        this._accessibility.registerNotifier(notifier);
    }
}
HcPopoverAnchorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hcPop]',
                exportAs: 'hcPopAnchor',
                providers: [HcPopoverAnchoringService]
            },] }
];
/** @nocollapse */
HcPopoverAnchorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: HcPopoverAnchoringService },
    { type: HcPopoverAccessibilityService }
];
HcPopoverAnchorDirective.propDecorators = {
    attachedPopover: [{ type: Input, args: ['hcPop',] }],
    trigger: [{ type: Input }],
    context: [{ type: Input }],
    _hasSubmenu: [{ type: HostBinding, args: ['class.hc-menu-item-submenu',] }],
    popoverOpened: [{ type: Output }],
    popoverClosed: [{ type: Output }],
    _showOrHideOnClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    _showOrHideOnMouseOver: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
    _showOrHideRightClick: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],
    _showOnHover: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    _hideOnLeave: [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['touchcancel', ['$event'],] }, { type: HostListener, args: ['mouseleave', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._attachedPopover;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._trigger;
    /** @type {?} */
    HcPopoverAnchorDirective.prototype._hasSubmenu;
    /**
     * Emits when the popover is opened.
     * @type {?}
     */
    HcPopoverAnchorDirective.prototype.popoverOpened;
    /**
     * Emits when the popover is closed.
     * @type {?}
     */
    HcPopoverAnchorDirective.prototype.popoverClosed;
    /**
     * Instance of notification service. Will be undefined until attached to a popover.
     * @type {?}
     */
    HcPopoverAnchorDirective.prototype._notifications;
    /**
     * Emits when the directive is destroyed.
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._onDestroy;
    /** @type {?} */
    HcPopoverAnchorDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._viewContainerRef;
    /** @type {?} */
    HcPopoverAnchorDirective.prototype._anchoring;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._accessibility;
}
//# sourceMappingURL=data:application/json;base64,