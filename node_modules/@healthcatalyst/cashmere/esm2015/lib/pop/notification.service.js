/**
 * @fileoverview added by tsickle
 * Generated from: lib/pop/notification.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/** @enum {number} */
const NotificationAction = {
    /** Popover should open. */
    OPEN: 0,
    /** Popover should close. */
    CLOSE: 1,
    /** Popover should toggle open or closed. */
    TOGGLE: 2,
    /** Popover has new target positions. */
    REPOSITION: 3,
    /** Popover needs new configuration. */
    UPDATE_CONFIG: 4,
    /** Popover should realign itself to the anchor.  */
    REALIGN: 5,
};
export { NotificationAction };
NotificationAction[NotificationAction.OPEN] = 'OPEN';
NotificationAction[NotificationAction.CLOSE] = 'CLOSE';
NotificationAction[NotificationAction.TOGGLE] = 'TOGGLE';
NotificationAction[NotificationAction.REPOSITION] = 'REPOSITION';
NotificationAction[NotificationAction.UPDATE_CONFIG] = 'UPDATE_CONFIG';
NotificationAction[NotificationAction.REALIGN] = 'REALIGN';
/**
 * Event object for dispatching to anchoring service.
 */
export class PopoverNotification {
    /**
     * @param {?} action
     * @param {?=} value
     */
    constructor(action, value) {
        this.action = action;
        this.value = value;
    }
}
if (false) {
    /**
     * Action to perform.
     * @type {?}
     */
    PopoverNotification.prototype.action;
    /**
     * Optional payload.
     * @type {?}
     */
    PopoverNotification.prototype.value;
}
export class PopoverNotificationService {
    constructor() {
        this.store = new Subject();
    }
    /**
     * Dispatch a notification to all subscribers.
     * @param {?} notification
     * @return {?}
     */
    dispatch(notification) {
        this.store.next(notification);
    }
    /**
     * Stream of notification events.
     * @return {?}
     */
    events() {
        return this.store.asObservable();
    }
    /**
     * Complete event stream.
     * @return {?}
     */
    dispose() {
        this.store.complete();
    }
}
PopoverNotificationService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PopoverNotificationService.prototype.store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcG9wL25vdGlmaWNhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQWEsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQUd6QyxNQUFZLGtCQUFrQjtJQUMxQiwyQkFBMkI7SUFDM0IsSUFBSSxHQUFBO0lBQ0osNEJBQTRCO0lBQzVCLEtBQUssR0FBQTtJQUNMLDRDQUE0QztJQUM1QyxNQUFNLEdBQUE7SUFDTix3Q0FBd0M7SUFDeEMsVUFBVSxHQUFBO0lBQ1YsdUNBQXVDO0lBQ3ZDLGFBQWEsR0FBQTtJQUNiLG9EQUFvRDtJQUNwRCxPQUFPLEdBQUE7RUFDVjs7Ozs7Ozs7Ozs7QUFHRCxNQUFNLE9BQU8sbUJBQW1COzs7OztJQUM1QixZQUVXLE1BQTBCLEVBRTFCLEtBQVc7UUFGWCxXQUFNLEdBQU4sTUFBTSxDQUFvQjtRQUUxQixVQUFLLEdBQUwsS0FBSyxDQUFNO0lBQ25CLENBQUM7Q0FDUDs7Ozs7O0lBSk8scUNBQWlDOzs7OztJQUVqQyxvQ0FBa0I7O0FBSzFCLE1BQU0sT0FBTywwQkFBMEI7SUFEdkM7UUFFWSxVQUFLLEdBQUcsSUFBSSxPQUFPLEVBQXVCLENBQUM7SUFnQnZELENBQUM7Ozs7OztJQWJHLFFBQVEsQ0FBQyxZQUFpQztRQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUdELE1BQU07UUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFHRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7WUFqQkosVUFBVTs7Ozs7OztJQUVQLDJDQUFtRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuXG4vKiogRW51bWVyYXRlZCBhY3Rpb25zIGZvciBhIHBvcG92ZXIgdG8gcGVyZm9ybS4gKi9cbmV4cG9ydCBlbnVtIE5vdGlmaWNhdGlvbkFjdGlvbiB7XG4gICAgLyoqIFBvcG92ZXIgc2hvdWxkIG9wZW4uICovXG4gICAgT1BFTixcbiAgICAvKiogUG9wb3ZlciBzaG91bGQgY2xvc2UuICovXG4gICAgQ0xPU0UsXG4gICAgLyoqIFBvcG92ZXIgc2hvdWxkIHRvZ2dsZSBvcGVuIG9yIGNsb3NlZC4gKi9cbiAgICBUT0dHTEUsXG4gICAgLyoqIFBvcG92ZXIgaGFzIG5ldyB0YXJnZXQgcG9zaXRpb25zLiAqL1xuICAgIFJFUE9TSVRJT04sXG4gICAgLyoqIFBvcG92ZXIgbmVlZHMgbmV3IGNvbmZpZ3VyYXRpb24uICovXG4gICAgVVBEQVRFX0NPTkZJRyxcbiAgICAvKiogUG9wb3ZlciBzaG91bGQgcmVhbGlnbiBpdHNlbGYgdG8gdGhlIGFuY2hvci4gICovXG4gICAgUkVBTElHTlxufVxuXG4vKiogRXZlbnQgb2JqZWN0IGZvciBkaXNwYXRjaGluZyB0byBhbmNob3Jpbmcgc2VydmljZS4gKi9cbmV4cG9ydCBjbGFzcyBQb3BvdmVyTm90aWZpY2F0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgLyoqIEFjdGlvbiB0byBwZXJmb3JtLiAqL1xuICAgICAgICBwdWJsaWMgYWN0aW9uOiBOb3RpZmljYXRpb25BY3Rpb24sXG4gICAgICAgIC8qKiBPcHRpb25hbCBwYXlsb2FkLiAqL1xuICAgICAgICBwdWJsaWMgdmFsdWU/OiBhbnlcbiAgICApIHt9XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb3BvdmVyTm90aWZpY2F0aW9uU2VydmljZSB7XG4gICAgcHJpdmF0ZSBzdG9yZSA9IG5ldyBTdWJqZWN0PFBvcG92ZXJOb3RpZmljYXRpb24+KCk7XG5cbiAgICAvKiogRGlzcGF0Y2ggYSBub3RpZmljYXRpb24gdG8gYWxsIHN1YnNjcmliZXJzLiAqL1xuICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbjogUG9wb3Zlck5vdGlmaWNhdGlvbikge1xuICAgICAgICB0aGlzLnN0b3JlLm5leHQobm90aWZpY2F0aW9uKTtcbiAgICB9XG5cbiAgICAvKiogU3RyZWFtIG9mIG5vdGlmaWNhdGlvbiBldmVudHMuICovXG4gICAgZXZlbnRzKCk6IE9ic2VydmFibGU8UG9wb3Zlck5vdGlmaWNhdGlvbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICAvKiogQ29tcGxldGUgZXZlbnQgc3RyZWFtLiAqL1xuICAgIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RvcmUuY29tcGxldGUoKTtcbiAgICB9XG59XG4iXX0=