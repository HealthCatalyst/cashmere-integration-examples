/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/number-abbreviator/number-abbreviator.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from "@angular/core";
/**
 * Creates an abbreviated number for display. 1,234,234 => 1.23M
 */
export class NumberAbbreviatorPipe {
    /**
     * @param {?} value the value to be abbreviated
     * @param {?=} decimalPoints how many decimal points to round to
     * @param {?=} threshold represents the number at which we should start abbreviating;
     * if the threshold is 1 million, we'll leave number less than 1 million as is (aside from adding commas or decimal points)
     * @return {?}
     */
    transform(value, decimalPoints = 2, threshold = 1000000) {
        if (value === null) {
            return value;
        }
        // use defaults if given funky parameters
        if (decimalPoints < 0 || !Number.isInteger(decimalPoints)) {
            decimalPoints = 2;
        }
        if (threshold < 1000 || !Number.isInteger(threshold)) {
            threshold = 1000;
        }
        /** @type {?} */
        const abs = Math.abs(value);
        /** @type {?} */
        let key = "";
        /** @type {?} */
        let roundedStringVal = "";
        /** @type {?} */
        const isNegative = value < 0;
        if (abs >= threshold) {
            // Abbreviate, adding unit if greater than specified limit
            for (const power of NumberAbbreviatorPipe.powers) {
                /** @type {?} */
                let reduced = abs / power.value;
                reduced = this.roundValue(reduced, decimalPoints);
                if (reduced >= 1) {
                    roundedStringVal = reduced.toString();
                    key = power.key;
                    break;
                }
            }
        }
        else {
            // Just round decimals and add commas if less than specified limit
            roundedStringVal = this.roundValue(abs, decimalPoints).toLocaleString();
        }
        return (isNegative ? "-" : "") + roundedStringVal + key;
    }
    /**
     * @private
     * @param {?} value
     * @param {?=} decimalPoints
     * @return {?}
     */
    roundValue(value, decimalPoints = 2) {
        /** @type {?} */
        const rounder = Math.pow(10, decimalPoints);
        return Math.round(value * rounder) / rounder;
    }
}
NumberAbbreviatorPipe.powers = [
    { key: "Q", value: Math.pow(10, 15) },
    { key: "T", value: Math.pow(10, 12) },
    { key: "B", value: Math.pow(10, 9) },
    { key: "M", value: Math.pow(10, 6) },
    { key: "K", value: 1000 }
];
NumberAbbreviatorPipe.decorators = [
    { type: Pipe, args: [{ name: "abbreviateNumber" },] }
];
if (false) {
    /** @type {?} */
    NumberAbbreviatorPipe.powers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLWFiYnJldmlhdG9yLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvbnVtYmVyLWFiYnJldmlhdG9yL251bWJlci1hYmJyZXZpYXRvci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7Ozs7QUFJcEQsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7Ozs7SUFldkIsU0FBUyxDQUFDLEtBQWEsRUFBRSxnQkFBd0IsQ0FBQyxFQUFFLFlBQW9CLE9BQU87UUFDbEYsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQUUsT0FBTyxLQUFLLENBQUM7U0FBRTtRQUVyQyx5Q0FBeUM7UUFDekMsSUFBSSxhQUFhLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLGFBQWEsR0FBRyxDQUFDLENBQUM7U0FBRTtRQUNqRixJQUFJLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsU0FBUyxHQUFHLElBQUksQ0FBQztTQUFFOztjQUVyRSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7O1lBQ3ZCLEdBQUcsR0FBRyxFQUFFOztZQUNSLGdCQUFnQixHQUFHLEVBQUU7O2NBQ25CLFVBQVUsR0FBRyxLQUFLLEdBQUcsQ0FBQztRQUU1QixJQUFJLEdBQUcsSUFBSSxTQUFTLEVBQUU7WUFDbEIsMERBQTBEO1lBQzFELEtBQUssTUFBTSxLQUFLLElBQUkscUJBQXFCLENBQUMsTUFBTSxFQUFFOztvQkFDMUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSztnQkFDL0IsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUVsRCxJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUU7b0JBQ2QsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQUN0QyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztvQkFDaEIsTUFBTTtpQkFDVDthQUNKO1NBQ0o7YUFBTTtZQUNILGtFQUFrRTtZQUNsRSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUMzRTtRQUVELE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0lBQzVELENBQUM7Ozs7Ozs7SUFFTyxVQUFVLENBQUMsS0FBYSxFQUFFLGdCQUF3QixDQUFDOztjQUNqRCxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDO1FBQzNDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO0lBQ2pELENBQUM7O0FBakRhLDRCQUFNLEdBQUc7SUFDbkIsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtJQUNyQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0lBQ3JDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDcEMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUNwQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtDQUM1QixDQUFDOztZQVJMLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRTs7OztJQUU5Qiw2QkFNRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG4vKiogQ3JlYXRlcyBhbiBhYmJyZXZpYXRlZCBudW1iZXIgZm9yIGRpc3BsYXkuIDEsMjM0LDIzNCA9PiAxLjIzTSAqL1xuQFBpcGUoeyBuYW1lOiBcImFiYnJldmlhdGVOdW1iZXJcIiB9KVxuZXhwb3J0IGNsYXNzIE51bWJlckFiYnJldmlhdG9yUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHB1YmxpYyBzdGF0aWMgcG93ZXJzID0gW1xuICAgICAgICB7IGtleTogXCJRXCIsIHZhbHVlOiBNYXRoLnBvdygxMCwgMTUpIH0sXG4gICAgICAgIHsga2V5OiBcIlRcIiwgdmFsdWU6IE1hdGgucG93KDEwLCAxMikgfSxcbiAgICAgICAgeyBrZXk6IFwiQlwiLCB2YWx1ZTogTWF0aC5wb3coMTAsIDkpIH0sXG4gICAgICAgIHsga2V5OiBcIk1cIiwgdmFsdWU6IE1hdGgucG93KDEwLCA2KSB9LFxuICAgICAgICB7IGtleTogXCJLXCIsIHZhbHVlOiAxMDAwIH1cbiAgICBdO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBiZSBhYmJyZXZpYXRlZFxuICAgICAqIEBwYXJhbSBkZWNpbWFsUG9pbnRzIGhvdyBtYW55IGRlY2ltYWwgcG9pbnRzIHRvIHJvdW5kIHRvXG4gICAgICogQHBhcmFtIHRocmVzaG9sZCByZXByZXNlbnRzIHRoZSBudW1iZXIgYXQgd2hpY2ggd2Ugc2hvdWxkIHN0YXJ0IGFiYnJldmlhdGluZztcbiAgICAgKiBpZiB0aGUgdGhyZXNob2xkIGlzIDEgbWlsbGlvbiwgd2UnbGwgbGVhdmUgbnVtYmVyIGxlc3MgdGhhbiAxIG1pbGxpb24gYXMgaXMgKGFzaWRlIGZyb20gYWRkaW5nIGNvbW1hcyBvciBkZWNpbWFsIHBvaW50cylcbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNmb3JtKHZhbHVlOiBudW1iZXIsIGRlY2ltYWxQb2ludHM6IG51bWJlciA9IDIsIHRocmVzaG9sZDogbnVtYmVyID0gMTAwMDAwMCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgeyByZXR1cm4gdmFsdWU7IH1cblxuICAgICAgICAvLyB1c2UgZGVmYXVsdHMgaWYgZ2l2ZW4gZnVua3kgcGFyYW1ldGVyc1xuICAgICAgICBpZiAoZGVjaW1hbFBvaW50cyA8IDAgfHwgIU51bWJlci5pc0ludGVnZXIoZGVjaW1hbFBvaW50cykpIHsgZGVjaW1hbFBvaW50cyA9IDI7IH1cbiAgICAgICAgaWYgKHRocmVzaG9sZCA8IDEwMDAgfHwgIU51bWJlci5pc0ludGVnZXIodGhyZXNob2xkKSkgeyB0aHJlc2hvbGQgPSAxMDAwOyB9XG5cbiAgICAgICAgY29uc3QgYWJzID0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgICBsZXQga2V5ID0gXCJcIjtcbiAgICAgICAgbGV0IHJvdW5kZWRTdHJpbmdWYWwgPSBcIlwiO1xuICAgICAgICBjb25zdCBpc05lZ2F0aXZlID0gdmFsdWUgPCAwO1xuXG4gICAgICAgIGlmIChhYnMgPj0gdGhyZXNob2xkKSB7XG4gICAgICAgICAgICAvLyBBYmJyZXZpYXRlLCBhZGRpbmcgdW5pdCBpZiBncmVhdGVyIHRoYW4gc3BlY2lmaWVkIGxpbWl0XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBvd2VyIG9mIE51bWJlckFiYnJldmlhdG9yUGlwZS5wb3dlcnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVkdWNlZCA9IGFicyAvIHBvd2VyLnZhbHVlO1xuICAgICAgICAgICAgICAgIHJlZHVjZWQgPSB0aGlzLnJvdW5kVmFsdWUocmVkdWNlZCwgZGVjaW1hbFBvaW50cyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVkdWNlZCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdW5kZWRTdHJpbmdWYWwgPSByZWR1Y2VkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IHBvd2VyLmtleTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSnVzdCByb3VuZCBkZWNpbWFscyBhbmQgYWRkIGNvbW1hcyBpZiBsZXNzIHRoYW4gc3BlY2lmaWVkIGxpbWl0XG4gICAgICAgICAgICByb3VuZGVkU3RyaW5nVmFsID0gdGhpcy5yb3VuZFZhbHVlKGFicywgZGVjaW1hbFBvaW50cykudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoaXNOZWdhdGl2ZSA/IFwiLVwiIDogXCJcIikgKyByb3VuZGVkU3RyaW5nVmFsICsga2V5O1xuICAgIH1cblxuICAgIHByaXZhdGUgcm91bmRWYWx1ZSh2YWx1ZTogbnVtYmVyLCBkZWNpbWFsUG9pbnRzOiBudW1iZXIgPSAyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3Qgcm91bmRlciA9IE1hdGgucG93KDEwLCBkZWNpbWFsUG9pbnRzKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiByb3VuZGVyKSAvIHJvdW5kZXI7XG4gICAgfVxufSJdfQ==