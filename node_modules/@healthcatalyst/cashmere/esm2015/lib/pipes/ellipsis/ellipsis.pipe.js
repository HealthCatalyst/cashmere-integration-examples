/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/ellipsis/ellipsis.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
export class EllipsisPipe {
    /**
     * @param {?} value
     * @param {?} length
     * @param {?=} mode
     * @return {?}
     */
    transform(value, length, mode = 'characters') {
        if (typeof value !== 'string' || typeof length !== 'number' || length < 0 || isNaN(length) || Math.floor(length) !== length) {
            return value;
        }
        /** @type {?} */
        const truncated = mode === 'words' ? this.firstNWords(value, length) : this.firstNCharacters(value, length);
        if (truncated === value) {
            return value;
        }
        return truncated + EllipsisPipe.ELLIPSIS;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} n
     * @return {?}
     */
    firstNWords(value, n) {
        /** @type {?} */
        const words = value.split(/\s+/g);
        if (words.length <= n) {
            return value;
        }
        /** @type {?} */
        const pattern = new RegExp('^' + words.slice(0, n).join('\\s+'));
        return (/** @type {?} */ (pattern.exec(value)))[0];
    }
    /**
     * @private
     * @param {?} value
     * @param {?} n
     * @return {?}
     */
    firstNCharacters(value, n) {
        return value.length > n ? value.substring(0, n) : value;
    }
}
EllipsisPipe.ELLIPSIS = 'â€¦';
EllipsisPipe.decorators = [
    { type: Pipe, args: [{
                name: 'ellipsis',
                pure: true
            },] }
];
if (false) {
    /** @type {?} */
    EllipsisPipe.ELLIPSIS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxsaXBzaXMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy9lbGxpcHNpcy9lbGxpcHNpcy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFRbEQsTUFBTSxPQUFPLFlBQVk7Ozs7Ozs7SUFHckIsU0FBUyxDQUFDLEtBQWEsRUFBRSxNQUFjLEVBQUUsT0FBcUIsWUFBWTtRQUN0RSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxNQUFNLEVBQUU7WUFDekgsT0FBTyxLQUFLLENBQUM7U0FDaEI7O2NBRUssU0FBUyxHQUFHLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztRQUUzRyxJQUFJLFNBQVMsS0FBSyxLQUFLLEVBQUU7WUFDckIsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxPQUFPLFNBQVMsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQzdDLENBQUM7Ozs7Ozs7SUFFTyxXQUFXLENBQUMsS0FBYSxFQUFFLENBQVM7O2NBQ2xDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNqQyxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ25CLE9BQU8sS0FBSyxDQUFDO1NBQ2hCOztjQUVLLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sbUJBQUEsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7Ozs7SUFFTyxnQkFBZ0IsQ0FBQyxLQUFhLEVBQUUsQ0FBUztRQUM3QyxPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzVELENBQUM7O0FBNUJlLHFCQUFRLEdBQUcsR0FBRyxDQUFDOztZQUxsQyxJQUFJLFNBQUM7Z0JBQ0YsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLElBQUksRUFBRSxJQUFJO2FBQ2I7Ozs7SUFFRyxzQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBFbGxpcHNpc01vZGUgPSAnY2hhcmFjdGVycycgfCAnd29yZHMnO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ2VsbGlwc2lzJyxcbiAgICBwdXJlOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIEVsbGlwc2lzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHN0YXRpYyByZWFkb25seSBFTExJUFNJUyA9ICfigKYnO1xuXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyLCBtb2RlOiBFbGxpcHNpc01vZGUgPSAnY2hhcmFjdGVycycpOiBzdHJpbmcge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCB0eXBlb2YgbGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBsZW5ndGggPCAwIHx8IGlzTmFOKGxlbmd0aCkgfHwgTWF0aC5mbG9vcihsZW5ndGgpICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRydW5jYXRlZCA9IG1vZGUgPT09ICd3b3JkcycgPyB0aGlzLmZpcnN0TldvcmRzKHZhbHVlLCBsZW5ndGgpIDogdGhpcy5maXJzdE5DaGFyYWN0ZXJzKHZhbHVlLCBsZW5ndGgpO1xuXG4gICAgICAgIGlmICh0cnVuY2F0ZWQgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1bmNhdGVkICsgRWxsaXBzaXNQaXBlLkVMTElQU0lTO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmlyc3ROV29yZHModmFsdWU6IHN0cmluZywgbjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qgd29yZHMgPSB2YWx1ZS5zcGxpdCgvXFxzKy9nKTtcbiAgICAgICAgaWYgKHdvcmRzLmxlbmd0aCA8PSBuKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCgnXicgKyB3b3Jkcy5zbGljZSgwLCBuKS5qb2luKCdcXFxccysnKSk7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLmV4ZWModmFsdWUpIVswXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpcnN0TkNoYXJhY3RlcnModmFsdWU6IHN0cmluZywgbjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA+IG4gPyB2YWx1ZS5zdWJzdHJpbmcoMCwgbikgOiB2YWx1ZTtcbiAgICB9XG59XG4iXX0=