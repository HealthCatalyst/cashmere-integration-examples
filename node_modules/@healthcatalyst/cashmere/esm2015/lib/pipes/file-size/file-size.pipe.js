/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/file-size/file-size.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
// Convert bytes into largest possible unit.
// Credit to https://gist.github.com/JonCatmull/ecdf9441aaa37336d9ae2c7f9cb7289a
export class FileSizePipe {
    constructor() {
        this.units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
    }
    /**
     * @param {?} bytes
     * @param {?=} precision
     * @return {?}
     */
    transform(bytes, precision = 2) {
        /** @type {?} */
        const originalInput = bytes;
        if (typeof bytes === 'string') {
            bytes = +bytes;
        }
        if (typeof bytes !== 'number' || isNaN(bytes) || !isFinite(bytes) || bytes < 0 || Math.floor(bytes) !== bytes) {
            return `${originalInput}`;
        }
        if (typeof precision !== 'number' ||
            isNaN(precision) ||
            !isFinite(precision) ||
            precision < 0 ||
            Math.floor(precision) !== precision) {
            precision = 2;
        }
        if (precision > 100) {
            precision = 100;
        }
        /** @type {?} */
        let unit = 0;
        while (bytes >= 1024) {
            bytes /= 1024;
            unit++;
            if (unit === 5) {
                // PB, largest size for pipe
                break;
            }
        }
        /** @type {?} */
        let rounded = bytes.toFixed(precision);
        // if the value after truncating is a whole number, don't display a decimal
        if (Math.floor(+rounded) === +rounded) {
            rounded = (+rounded).toString();
        }
        return rounded + ' ' + this.units[unit];
    }
}
FileSizePipe.decorators = [
    { type: Pipe, args: [{ name: 'fileSize', pure: true },] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileSizePipe.prototype.units;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zaXplLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvZmlsZS1zaXplL2ZpbGUtc2l6ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7OztBQUtsRCxNQUFNLE9BQU8sWUFBWTtJQUR6QjtRQUVZLFVBQUssR0FBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUE2Q3RFLENBQUM7Ozs7OztJQTNDVSxTQUFTLENBQUMsS0FBYSxFQUFFLFlBQW9CLENBQUM7O2NBQzNDLGFBQWEsR0FBRyxLQUFLO1FBQzNCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzNCLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQztTQUNsQjtRQUNELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFO1lBQzNHLE9BQU8sR0FBRyxhQUFhLEVBQUUsQ0FBQztTQUM3QjtRQUVELElBQ0ksT0FBTyxTQUFTLEtBQUssUUFBUTtZQUM3QixLQUFLLENBQUMsU0FBUyxDQUFDO1lBQ2hCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUNwQixTQUFTLEdBQUcsQ0FBQztZQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssU0FBUyxFQUNyQztZQUNFLFNBQVMsR0FBRyxDQUFDLENBQUM7U0FDakI7UUFDRCxJQUFJLFNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDakIsU0FBUyxHQUFHLEdBQUcsQ0FBQztTQUNuQjs7WUFFRyxJQUFJLEdBQVcsQ0FBQztRQUVwQixPQUFPLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDbEIsS0FBSyxJQUFJLElBQUksQ0FBQztZQUNkLElBQUksRUFBRSxDQUFDO1lBRVAsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO2dCQUNaLDRCQUE0QjtnQkFDNUIsTUFBTTthQUNUO1NBQ0o7O1lBRUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRXRDLDJFQUEyRTtRQUMzRSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNuQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ25DO1FBRUQsT0FBTyxPQUFPLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7O1lBOUNKLElBQUksU0FBQyxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQzs7Ozs7OztJQUVoQyw2QkFBa0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyBDb252ZXJ0IGJ5dGVzIGludG8gbGFyZ2VzdCBwb3NzaWJsZSB1bml0LlxuLy8gQ3JlZGl0IHRvIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0pvbkNhdG11bGwvZWNkZjk0NDFhYWEzNzMzNmQ5YWUyYzdmOWNiNzI4OWFcbkBQaXBlKHtuYW1lOiAnZmlsZVNpemUnLCBwdXJlOiB0cnVlfSlcbmV4cG9ydCBjbGFzcyBGaWxlU2l6ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBwcml2YXRlIHVuaXRzOiBzdHJpbmdbXSA9IFsnYnl0ZXMnLCAnS0InLCAnTUInLCAnR0InLCAnVEInLCAnUEInXTtcblxuICAgIHB1YmxpYyB0cmFuc2Zvcm0oYnl0ZXM6IG51bWJlciwgcHJlY2lzaW9uOiBudW1iZXIgPSAyKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxJbnB1dCA9IGJ5dGVzO1xuICAgICAgICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYnl0ZXMgPSArYnl0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBieXRlcyAhPT0gJ251bWJlcicgfHwgaXNOYU4oYnl0ZXMpIHx8ICFpc0Zpbml0ZShieXRlcykgfHwgYnl0ZXMgPCAwIHx8IE1hdGguZmxvb3IoYnl0ZXMpICE9PSBieXRlcykge1xuICAgICAgICAgICAgcmV0dXJuIGAke29yaWdpbmFsSW5wdXR9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBwcmVjaXNpb24gIT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICBpc05hTihwcmVjaXNpb24pIHx8XG4gICAgICAgICAgICAhaXNGaW5pdGUocHJlY2lzaW9uKSB8fFxuICAgICAgICAgICAgcHJlY2lzaW9uIDwgMCB8fFxuICAgICAgICAgICAgTWF0aC5mbG9vcihwcmVjaXNpb24pICE9PSBwcmVjaXNpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwcmVjaXNpb24gPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVjaXNpb24gPiAxMDApIHtcbiAgICAgICAgICAgIHByZWNpc2lvbiA9IDEwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1bml0OiBudW1iZXIgPSAwO1xuXG4gICAgICAgIHdoaWxlIChieXRlcyA+PSAxMDI0KSB7XG4gICAgICAgICAgICBieXRlcyAvPSAxMDI0O1xuICAgICAgICAgICAgdW5pdCsrO1xuXG4gICAgICAgICAgICBpZiAodW5pdCA9PT0gNSkge1xuICAgICAgICAgICAgICAgIC8vIFBCLCBsYXJnZXN0IHNpemUgZm9yIHBpcGVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByb3VuZGVkID0gYnl0ZXMudG9GaXhlZChwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBhZnRlciB0cnVuY2F0aW5nIGlzIGEgd2hvbGUgbnVtYmVyLCBkb24ndCBkaXNwbGF5IGEgZGVjaW1hbFxuICAgICAgICBpZiAoTWF0aC5mbG9vcigrcm91bmRlZCkgPT09ICtyb3VuZGVkKSB7XG4gICAgICAgICAgICByb3VuZGVkID0gKCtyb3VuZGVkKS50b1N0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvdW5kZWQgKyAnICcgKyB0aGlzLnVuaXRzW3VuaXRdO1xuICAgIH1cbn1cbiJdfQ==