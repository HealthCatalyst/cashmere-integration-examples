/**
 * @fileoverview added by tsickle
 * Generated from: lib/breadcrumbs/breadcrumbs.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { ActivatedRoute, NavigationEnd, PRIMARY_OUTLET, Router } from '@angular/router';
/**
 * IBreadcrumb interface is used to store all required data for each breadcrumb element
 * \@docs-private
 * @record
 */
export function IBreadcrumb() { }
if (false) {
    /** @type {?} */
    IBreadcrumb.prototype.label;
    /** @type {?|undefined} */
    IBreadcrumb.prototype.params;
    /** @type {?} */
    IBreadcrumb.prototype.url;
}
/**
 * A navigational aid that allows users to keep track of their location within the current application
 */
export class BreadcrumbsComponent {
    /**
     * @param {?} activatedRoute
     * @param {?} router
     */
    constructor(activatedRoute, router) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this._breadcrumbs = [];
        this._backURL = '';
        this._backShow = 'none';
        this._locationLabel = '';
        this._queryParamsHandling = '';
    }
    /**
     * Sets the handling of the query parameters for the breadcrumb. Choose from: `'preserve' | 'merge' | '' (default)`
     * @return {?}
     */
    get queryParamsHandling() {
        return this._queryParamsHandling;
    }
    /**
     * @param {?} queryParamsHandling
     * @return {?}
     */
    set queryParamsHandling(queryParamsHandling) {
        this._queryParamsHandling = queryParamsHandling;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const ROUTE_DATA_BREADCRUMB = 'breadcrumb';
        // Add the first breadcrumb for the base page
        /** @type {?} */
        let root = this.activatedRoute.root;
        this._breadcrumbs = this.getBreadcrumbs(root);
        // subscribe to the NavigationEnd event
        this._routerSubscription = this.router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event instanceof NavigationEnd) {
                this.setBreadcrumbs();
            }
        }));
        // set initial breadcrumb state
        this.setBreadcrumbs();
    }
    /**
     * @private
     * @return {?}
     */
    setBreadcrumbs() {
        /** @type {?} */
        const root = this.activatedRoute.root;
        this._breadcrumbs = this.getBreadcrumbs(root);
        if (this._breadcrumbs.length > 1) {
            this._backURL = this._breadcrumbs[this._breadcrumbs.length - 2].url;
            this._backShow = 'inline';
            this._locationLabel = '';
        }
        else if (this._breadcrumbs.length === 1) {
            this._backShow = 'none';
            this._locationLabel = this._breadcrumbs[this._breadcrumbs.length - 1].label;
        }
        else {
            this._backShow = 'none';
            this._locationLabel = '';
        }
    }
    /**
     * @private
     * @param {?} route
     * @param {?=} url
     * @param {?=} breadcrumbs
     * @return {?}
     */
    getBreadcrumbs(route, url = '', breadcrumbs = []) {
        /** @type {?} */
        const ROUTE_DATA_BREADCRUMB = 'breadcrumb';
        // get the child routes
        /** @type {?} */
        let children = route.children;
        // return if there are no more children
        if (children.length === 0) {
            return breadcrumbs;
        }
        // iterate over each children
        for (let child of children) {
            // verify primary route
            if (child.outlet !== PRIMARY_OUTLET) {
                continue;
            }
            // verify the custom data property "breadcrumb" is specified on the route
            if (!child.snapshot.data.hasOwnProperty(ROUTE_DATA_BREADCRUMB)) {
                return this.getBreadcrumbs(child, url, breadcrumbs);
            }
            // get the route's URL segment
            /** @type {?} */
            let routeURL = child.snapshot.url.map((/**
             * @param {?} segment
             * @return {?}
             */
            segment => segment.path)).join('/');
            // append route URL to URL
            url += `/${routeURL}`;
            // add breadcrumb
            /** @type {?} */
            let parent = this.activatedRoute.parent;
            /** @type {?} */
            let fullURL = '';
            if (parent !== null) {
                fullURL += '/' + parent.snapshot.url.map((/**
                 * @param {?} segment
                 * @return {?}
                 */
                segment => segment.path)).join('/');
            }
            fullURL += `${url}`;
            /** @type {?} */
            let breadcrumb = {
                label: child.snapshot.data[ROUTE_DATA_BREADCRUMB],
                params: child.snapshot.params,
                url: fullURL
            };
            breadcrumbs.push(breadcrumb);
            // recursive
            return this.getBreadcrumbs(child, url, breadcrumbs);
        }
        // we should never get here, but just in case
        return breadcrumbs;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._routerSubscription.unsubscribe();
    }
}
BreadcrumbsComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-breadcrumbs',
                template: "<ol class=\"breadcrumb\">\n    <li *ngFor=\"let breadcrumb of _breadcrumbs; let last = last\" class=\"breadcrumb-item\">\n        <a *ngIf=\"!last\" [routerLink]=\"[breadcrumb.url]\" queryParamsHandling=\"{{queryParamsHandling}}\" [innerText]=\"breadcrumb.label\"></a>\n        <span *ngIf=\"last\" [innerText]=\"breadcrumb.label\"></span>\n        <i class=\"fa fa-chevron-right breadcrumb-arrow\"></i>\n    </li>\n</ol>\n<div class=\"breadcrumb-responsive-container\">\n    <a [style.display]=\"_backShow\" class=\"breadcrumb-back-button\" [routerLink]=\"_backURL\" queryParamsHandling=\"{{queryParamsHandling}}\">\n        <i class=\"fa fa-chevron-left\"></i>\n        <span>&nbsp;Back</span>\n    </a>\n    <span [innerText]=\"_locationLabel\"></span>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
BreadcrumbsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router }
];
BreadcrumbsComponent.propDecorators = {
    queryParamsHandling: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BreadcrumbsComponent.prototype._breadcrumbs;
    /** @type {?} */
    BreadcrumbsComponent.prototype._routerSubscription;
    /** @type {?} */
    BreadcrumbsComponent.prototype._backURL;
    /** @type {?} */
    BreadcrumbsComponent.prototype._backShow;
    /** @type {?} */
    BreadcrumbsComponent.prototype._locationLabel;
    /** @type {?} */
    BreadcrumbsComponent.prototype._queryParamsHandling;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbsComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbsComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,