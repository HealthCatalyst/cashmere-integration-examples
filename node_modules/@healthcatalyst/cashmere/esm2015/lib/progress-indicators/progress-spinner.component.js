/**
 * @fileoverview added by tsickle
 * Generated from: lib/progress-indicators/progress-spinner.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
/** @type {?} */
const supportedColors = ['blue', 'green', 'purple', 'orange', 'red', 'gray', 'white'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateColorInput(inputStr) {
    if (supportedColors.indexOf(inputStr) < 0) {
        throw Error('Unsupported progress spinner color value: ' + inputStr);
    }
}
export class ProgressSpinnerComponent {
    constructor() {
        this._color = 'blue';
        /**
         * If true, the spinner will center itself inside its container.
         */
        this.isCentered = true;
        /**
         * If true, include background "channel" circle.
         */
        this.hasChannel = true;
        /**
         * If true, switches to determinate mode. Must pass in progress (0-100%), instead of having the loader spin freely.
         */
        this.isDeterminate = false;
        this._rightCircleTransform = '';
        this._leftCircleTransform = '';
        this._rightCircleTransition = '';
        this._leftCircleTransition = '';
        this._progress = 0;
        this._diameter = 0;
        this._minDiameter = 20;
        this._maxDiameter = 250;
    }
    /**
     * Color of the spinner: `blue`, `green`, `purple`, `orange`, `red`, `gray`, `white`
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @param {?} colorVal
     * @return {?}
     */
    set color(colorVal) {
        validateColorInput(colorVal);
        this._color = colorVal;
    }
    /**
     * (0-100%) Only used if "isDeterminate" is set to true.
     * @param {?} progress
     * @return {?}
     */
    set progress(progress) {
        this.setProgress(progress);
    }
    /**
     * @return {?}
     */
    get progress() {
        return this._progress;
    }
    /**
     * Set the diameter of the circle, in pixels. Minimum is 20, maximum is 250.
     * @param {?} diameter
     * @return {?}
     */
    set diameter(diameter) {
        this._diameter = Math.min(Math.max(this._minDiameter, diameter), this._maxDiameter);
    }
    /**
     * @return {?}
     */
    get diameter() {
        return this._diameter;
    }
    /**
     * @private
     * @param {?} progress
     * @return {?}
     */
    setProgress(progress) {
        progress = Math.min(100, progress);
        progress = Math.max(0, progress);
        this.setProgressTransition(progress);
        this.setProgressTransform(progress);
        this._progress = progress;
    }
    /**
     * @private
     * @param {?} progress
     * @return {?}
     */
    setProgressTransition(progress) {
        /** @type {?} */
        const sizeBasedTime = this.diameter > 150 ? 0.6 : 0.4;
        /** @type {?} */
        const timing = Math.abs(progress - this._progress) > 40 ? sizeBasedTime : sizeBasedTime / 2;
        /** @type {?} */
        const halfTime = timing / 2;
        if ((progress <= 50 && this._progress <= 50) || (progress >= 51 && this._progress >= 51)) {
            this._leftCircleTransition = `transform ${timing}s ease-in-out 0s`;
            this._rightCircleTransition = `transform ${timing}s ease-in-out 0s`;
        }
        else if (progress <= 50 && this._progress >= 51) {
            this._leftCircleTransition = `transform ${halfTime}s ease-in 0s`;
            this._rightCircleTransition = `transform ${halfTime}s ease-out ${halfTime - 0.001}s`;
        }
        else if (progress >= 51 && this._progress <= 50) {
            this._leftCircleTransition = `transform ${halfTime}s ease-out ${halfTime - 0.001}s`;
            this._rightCircleTransition = `transform ${halfTime}s ease-in 0s`;
        }
    }
    /**
     * Using a somewhat complicated set of transforms to achive the animation.
     * For 0% to 50% the right circle element rotates from -135deg to 45deg
     * For 51% to 100% the left circle element rotates from 135deg to 315deg
     * @private
     * @param {?} progress
     * @return {?}
     */
    setProgressTransform(progress) {
        if (progress <= 50) {
            /** @type {?} */
            const rightDegrees = (progress / 50) * 180 - 135;
            this._rightCircleTransform = `rotate(${rightDegrees}deg)`;
            this._leftCircleTransform = `rotate(135deg)`;
        }
        else if (progress >= 51) {
            /** @type {?} */
            const leftDegrees = ((progress - 50) / 50) * 180 + 135;
            this._leftCircleTransform = `rotate(${leftDegrees}deg)`;
            this._rightCircleTransform = 'rotate(45deg)';
        }
    }
}
ProgressSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-progress-spinner',
                template: "<div class=\"hc-spinner-container\" [ngClass]=\"{'center-spinner': isCentered }\">\n    <div class=\"hc-spinner\" \n        [ngClass]=\"{'indeterminate-spin': !isDeterminate, 'large-spinner': diameter >= 150 }\"\n        [style.width.px]=\"diameter\"\n        [style.height.px]=\"diameter\"\n        [style.marginTop.px]=\"isCentered ? diameter / -2 : 0\"\n        [style.marginLeft.px]=\"isCentered ? diameter / -2 : 0\">\n        <div class=\"spinner-layer spinner-{{color}}\" [ngClass]=\"{'spinner-base': hasChannel }\">\n            <div class=\"circle base-circle\"></div>\n            <div class=\"circle-clipper left\"><div class=\"circle\" [style.transform]=\"_leftCircleTransform\" [style.transition]=\"_leftCircleTransition\"></div>\n            </div><div class=\"gap-patch\"><div class=\"circle\"></div>\n            </div><div class=\"circle-clipper right\"><div class=\"circle\" [style.transform]=\"_rightCircleTransform\" [style.transition]=\"_rightCircleTransition\"></div></div>\n        </div>\n    </div>\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
ProgressSpinnerComponent.propDecorators = {
    color: [{ type: Input }],
    isCentered: [{ type: Input }],
    hasChannel: [{ type: Input }],
    isDeterminate: [{ type: Input }],
    progress: [{ type: Input }],
    diameter: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._color;
    /**
     * If true, the spinner will center itself inside its container.
     * @type {?}
     */
    ProgressSpinnerComponent.prototype.isCentered;
    /**
     * If true, include background "channel" circle.
     * @type {?}
     */
    ProgressSpinnerComponent.prototype.hasChannel;
    /**
     * If true, switches to determinate mode. Must pass in progress (0-100%), instead of having the loader spin freely.
     * @type {?}
     */
    ProgressSpinnerComponent.prototype.isDeterminate;
    /** @type {?} */
    ProgressSpinnerComponent.prototype._rightCircleTransform;
    /** @type {?} */
    ProgressSpinnerComponent.prototype._leftCircleTransform;
    /** @type {?} */
    ProgressSpinnerComponent.prototype._rightCircleTransition;
    /** @type {?} */
    ProgressSpinnerComponent.prototype._leftCircleTransition;
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._progress;
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._diameter;
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._minDiameter;
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._maxDiameter;
}
//# sourceMappingURL=data:application/json;base64,