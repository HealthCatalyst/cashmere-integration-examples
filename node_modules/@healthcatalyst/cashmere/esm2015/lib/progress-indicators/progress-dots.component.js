/**
 * @fileoverview added by tsickle
 * Generated from: lib/progress-indicators/progress-dots.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
/** @type {?} */
const supportedColors = ['light', 'dark'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateColorInput(inputStr) {
    if (supportedColors.indexOf(inputStr) < 0) {
        throw Error('Unsupported progress dots color value: ' + inputStr);
    }
}
export class ProgressDotsComponent {
    constructor() {
        this._color = 'dark';
        /**
         * If true, the loader will center itself within its container.
         */
        this.isCentered = true;
        /**
         * If true, you'll get a teeny tiny little loader.
         */
        this.isMini = false;
    }
    /**
     * Use `light` on darker backgrounds and `dark` for lighter backgrounds.
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @param {?} colorVal
     * @return {?}
     */
    set color(colorVal) {
        validateColorInput(colorVal);
        this._color = colorVal;
    }
}
ProgressDotsComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-progress-dots',
                template: "<div class=\"hc-dots-container\" [ngClass]=\"{'center-dots': isCentered }\">\n    <div class=\"hc-dots-loader\" [ngClass]=\"{'loader-light': color === 'light', 'loader-mini': isMini}\">\n        <div class=\"loader-animate\"></div>\n    </div>\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
ProgressDotsComponent.propDecorators = {
    color: [{ type: Input }],
    isCentered: [{ type: Input }],
    isMini: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProgressDotsComponent.prototype._color;
    /**
     * If true, the loader will center itself within its container.
     * @type {?}
     */
    ProgressDotsComponent.prototype.isCentered;
    /**
     * If true, you'll get a teeny tiny little loader.
     * @type {?}
     */
    ProgressDotsComponent.prototype.isMini;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtZG90cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcHJvZ3Jlc3MtaW5kaWNhdG9ycy9wcm9ncmVzcy1kb3RzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDOztNQUU1RCxlQUFlLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDOzs7OztBQUV6QyxNQUFNLFVBQVUsa0JBQWtCLENBQUMsUUFBZ0I7SUFDL0MsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN2QyxNQUFNLEtBQUssQ0FBQyx5Q0FBeUMsR0FBRyxRQUFRLENBQUMsQ0FBQztLQUNyRTtBQUNMLENBQUM7QUFPRCxNQUFNLE9BQU8scUJBQXFCO0lBTGxDO1FBTVksV0FBTSxHQUFHLE1BQU0sQ0FBQzs7OztRQWVqQixlQUFVLEdBQUcsSUFBSSxDQUFDOzs7O1FBR2xCLFdBQU0sR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUFoQkcsSUFDSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBRUQsSUFBSSxLQUFLLENBQUMsUUFBZ0I7UUFDdEIsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQzs7O1lBakJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1Qix1UUFBMkM7Z0JBQzNDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3hDOzs7b0JBS0ksS0FBSzt5QkFXTCxLQUFLO3FCQUdMLEtBQUs7Ozs7Ozs7SUFqQk4sdUNBQXdCOzs7OztJQWN4QiwyQ0FDeUI7Ozs7O0lBRXpCLHVDQUNzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zdCBzdXBwb3J0ZWRDb2xvcnMgPSBbJ2xpZ2h0JywgJ2RhcmsnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQ29sb3JJbnB1dChpbnB1dFN0cjogc3RyaW5nKSB7XG4gICAgaWYgKHN1cHBvcnRlZENvbG9ycy5pbmRleE9mKGlucHV0U3RyKSA8IDApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb2dyZXNzIGRvdHMgY29sb3IgdmFsdWU6ICcgKyBpbnB1dFN0cik7XG4gICAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2hjLXByb2dyZXNzLWRvdHMnLFxuICAgIHRlbXBsYXRlVXJsOiAncHJvZ3Jlc3MtZG90cy5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0RvdHNDb21wb25lbnQge1xuICAgIHByaXZhdGUgX2NvbG9yID0gJ2RhcmsnO1xuXG4gICAgLyoqIFVzZSBgbGlnaHRgIG9uIGRhcmtlciBiYWNrZ3JvdW5kcyBhbmQgYGRhcmtgIGZvciBsaWdodGVyIGJhY2tncm91bmRzLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGNvbG9yKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgICB9XG5cbiAgICBzZXQgY29sb3IoY29sb3JWYWw6IHN0cmluZykge1xuICAgICAgICB2YWxpZGF0ZUNvbG9ySW5wdXQoY29sb3JWYWwpO1xuICAgICAgICB0aGlzLl9jb2xvciA9IGNvbG9yVmFsO1xuICAgIH1cblxuICAgIC8qKiBJZiB0cnVlLCB0aGUgbG9hZGVyIHdpbGwgY2VudGVyIGl0c2VsZiB3aXRoaW4gaXRzIGNvbnRhaW5lci4gKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpc0NlbnRlcmVkID0gdHJ1ZTtcbiAgICAvKiogSWYgdHJ1ZSwgeW91J2xsIGdldCBhIHRlZW55IHRpbnkgbGl0dGxlIGxvYWRlci4gKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpc01pbmkgPSBmYWxzZTtcbn1cbiJdfQ==