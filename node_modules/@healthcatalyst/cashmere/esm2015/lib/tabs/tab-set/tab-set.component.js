/**
 * @fileoverview added by tsickle
 * Generated from: lib/tabs/tab-set/tab-set.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, Input, QueryList, Output, ViewEncapsulation } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { TabComponent } from '../tab/tab.component';
import { ActivatedRoute, Router } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { parseBooleanAttribute } from '../../util';
export class TabChangeEvent {
    /**
     * @param {?} index
     * @param {?} tab
     */
    constructor(index, tab) {
        this.index = index;
        this.tab = tab;
    }
}
if (false) {
    /** @type {?} */
    TabChangeEvent.prototype.index;
    /** @type {?} */
    TabChangeEvent.prototype.tab;
}
/**
 * @param {?} tabsWithoutRouterLink
 * @return {?}
 */
export function throwErrorForMissingRouterLink(tabsWithoutRouterLink) {
    /** @type {?} */
    const tabTitles = tabsWithoutRouterLink.map((/**
     * @param {?} tab
     * @return {?}
     */
    tab => tab.tabTitle));
    throw Error(`Routerlink missing on ${tabTitles.join(',')}`);
}
/** @type {?} */
const supportedDirections = ['horizontal', 'vertical'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateDirectionInput(inputStr) {
    if (supportedDirections.indexOf(inputStr) < 0) {
        throw Error('Unsupported tab direction value: ' + inputStr);
    }
}
/**
 * @return {?}
 */
export function tabComponentMissing() {
    return new Error(`TabSet must contain at least one TabComponent. Make sure to add a hc-tab to the hc-tab-set element.`);
}
/**
 * @param {?} tabVal
 * @return {?}
 */
export function invalidDefaultTab(tabVal) {
    throw Error('Invalid default tab value: ' + tabVal + ". Must be 'none' or a value less than the total number of tabs in the set.");
}
export class TabSetComponent {
    /**
     * @param {?} router
     * @param {?} route
     */
    constructor(router, route) {
        this.router = router;
        this.route = route;
        this._routerEnabled = false;
        this._direction = 'vertical';
        this._defaultTab = 0;
        this._stopTabSubscriptionSubject = new Subject();
        /**
         * Emits when the selected tab is changed
         */
        this.selectedTabChange = new EventEmitter();
        this._addContentContainer = true;
        this._tight = false;
    }
    /**
     * Specify direction of tabs as either `horizontal` or `vertical`. Defaults to `vertical`
     * @return {?}
     */
    get direction() {
        return this._direction;
    }
    /**
     * @param {?} directionType
     * @return {?}
     */
    set direction(directionType) {
        validateDirectionInput(directionType);
        this._direction = directionType;
    }
    /**
     * Zero-based numerical value specifying which tab to select by default, setting to `none` means no tab
     * will be immediately selected. Defaults to 0 (the first tab).
     * @return {?}
     */
    get defaultTab() {
        return this._defaultTab;
    }
    /**
     * @param {?} tabValue
     * @return {?}
     */
    set defaultTab(tabValue) {
        if (!isNaN(+tabValue) || tabValue === 'none') {
            this._defaultTab = tabValue;
        }
        else {
            invalidDefaultTab(tabValue);
        }
    }
    /**
     * Determines whether the tab set will create a router-outlet or ng-container for the tab content.
     * If set to false, the app will need to add its own container.  Defaults to `true`.
     * @return {?}
     */
    get addContentContainer() {
        return this._addContentContainer;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set addContentContainer(value) {
        this._addContentContainer = parseBooleanAttribute(value);
    }
    /**
     * If true, condense the default padding on all included tabs. *Defaults to `false`.*
     * @return {?}
     */
    get tight() {
        return this._tight;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tight(value) {
        this._tight = parseBooleanAttribute(value);
        this.setTabDirection();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.setUpTabs();
        this._tabs.changes.subscribe((/**
         * @return {?}
         */
        () => this.setUpTabs()));
    }
    /**
     * @private
     * @return {?}
     */
    setUpTabs() {
        if (this._tabs.length === 0) {
            throw tabComponentMissing();
        }
        if (this.defaultTab !== 'none') {
            this.defaultToFirstTab();
        }
        this.checkForRouterUse();
        this.setTabDirection();
        this.subscribeToTabClicks();
    }
    /**
     * @private
     * @return {?}
     */
    setTabDirection() {
        setTimeout((/**
         * @return {?}
         */
        () => this._tabs.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            t._direction = this.direction;
            t._tight = this.tight;
        }))));
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToTabClicks() {
        this._stopTabSubscriptionSubject.next();
        this._tabs.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => t.tabClick.pipe(takeUntil(this._stopTabSubscriptionSubject)).subscribe((/**
         * @return {?}
         */
        () => this._setActive(t)))));
    }
    /**
     * Sets the currently selected tab by either its numerical index or `TabComponent` object
     * @param {?} tab
     * @return {?}
     */
    selectTab(tab) {
        /** @type {?} */
        const activeTab = typeof tab === 'number' ? this._tabs.toArray()[tab] : tab;
        this._setActive(activeTab);
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    _setActive(tab) {
        /** @type {?} */
        let activeIndex = 0;
        this._tabs.toArray().forEach((/**
         * @param {?} t
         * @param {?} index
         * @return {?}
         */
        (t, index) => {
            t._active = false;
            if (t === tab) {
                activeIndex = index;
            }
        }));
        tab._active = true;
        this.tabContent = tab.tabContent;
        this.selectedTabChange.emit(new TabChangeEvent(activeIndex, tab));
    }
    /**
     * @private
     * @return {?}
     */
    defaultToFirstTab() {
        if (!this._tabs.find((/**
         * @param {?} tab
         * @return {?}
         */
        tab => tab._active))) {
            // setTimeout to avoid change after checked error
            // when ngFor is used as projected nodes are registered
            // and stored as part of the existing view, not
            // the view in which they are projected
            // embedded views are checked *before* AfterContentInit
            // is triggered
            /** @type {?} */
            const tabArray = this._tabs.toArray();
            if (tabArray[Number(this.defaultTab)]) {
                setTimeout((/**
                 * @return {?}
                 */
                () => this._setActive(tabArray[Number(this.defaultTab)])));
            }
            else {
                invalidDefaultTab(this.defaultTab);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkForRouterUse() {
        /** @type {?} */
        const countUsingRouter = this._tabs.filter((/**
         * @param {?} tab
         * @return {?}
         */
        tab => tab.routerLink !== undefined)).length;
        if (countUsingRouter > 0 && countUsingRouter < this._tabs.length) {
            /** @type {?} */
            const tabsMissingRouterLink = this._tabs.filter((/**
             * @param {?} tab
             * @return {?}
             */
            tab => tab.routerLink === undefined));
            throwErrorForMissingRouterLink(tabsMissingRouterLink);
        }
        if (countUsingRouter === this._tabs.length) {
            this._routerEnabled = true;
            if (this._defaultTab !== 'none') {
                this.defaultToFirstRoute();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    defaultToFirstRoute() {
        /** @type {?} */
        const foundRoute = this._tabs
            .map((/**
         * @param {?} tab
         * @return {?}
         */
        tab => tab.routerLink))
            .map((/**
         * @param {?} routerLink
         * @return {?}
         */
        routerLink => this.mapRouterLinkToString(routerLink)))
            .find((/**
         * @param {?} routerLink
         * @return {?}
         */
        routerLink => {
            /** @type {?} */
            let currentRoute = this.router.url;
            return currentRoute === routerLink || currentRoute.indexOf(`${routerLink}/`) > -1;
        }));
        if (foundRoute) {
            return;
        }
        /** @type {?} */
        const tabArray = this._tabs.toArray();
        if (tabArray[Number(this.defaultTab)]) {
            /** @type {?} */
            const firstRoute = this.mapRouterLinkToString(tabArray[Number(this.defaultTab)].routerLink);
            this.router.navigate([firstRoute], { relativeTo: this.route });
        }
    }
    /**
     * @private
     * @param {?} routerLink
     * @return {?}
     */
    mapRouterLinkToString(routerLink) {
        if (routerLink instanceof Array) {
            routerLink = routerLink.join('/').replace('//', '/');
        }
        return routerLink;
    }
}
TabSetComponent.decorators = [
    { type: Component, args: [{
                selector: `hc-tab-set`,
                template: "<div class=\"hc-{{direction}}-tab-container\">\n    <div class=\"hc-tab-bar-{{direction}}\">\n        <ng-content select=\"hc-tab\"></ng-content>\n        <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"_addContentContainer\" class=\"hc-tab-content-{{direction}}\">\n        <router-outlet *ngIf=\"_routerEnabled\"></router-outlet>\n        <ng-container *ngIf=\"!_routerEnabled\" [ngTemplateOutlet]=\"tabContent\"></ng-container>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".hc-horizontal-tab-container{height:auto;width:100%}.hc-tab-bar-horizontal{-webkit-box-align:baseline;align-items:baseline;background-color:inherit;border-bottom:1px solid #c0c5cc;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.hc-tab-content-horizontal{background-color:inherit;height:100%;overflow:auto;width:100%}.hc-vertical-tab-container{display:-webkit-box;display:flex;height:100%;width:100%}.hc-tab-bar-vertical{background-color:#fff;padding:15px 0;width:20%}.hc-tab-content-vertical{background-color:#f0f3f6;width:80%}"]
            }] }
];
/** @nocollapse */
TabSetComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute }
];
TabSetComponent.propDecorators = {
    _tabs: [{ type: ContentChildren, args: [TabComponent,] }],
    selectedTabChange: [{ type: Output }],
    direction: [{ type: Input }],
    defaultTab: [{ type: Input }],
    addContentContainer: [{ type: Input }],
    tight: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TabSetComponent.prototype._routerEnabled;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype._direction;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype._defaultTab;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype._stopTabSubscriptionSubject;
    /**
     * The content to be displayed for the currently selected tab.
     * This is read from the tab when it is selected.
     * Not used when this component uses routing.
     * @type {?}
     */
    TabSetComponent.prototype.tabContent;
    /** @type {?} */
    TabSetComponent.prototype._tabs;
    /**
     * Emits when the selected tab is changed
     * @type {?}
     */
    TabSetComponent.prototype.selectedTabChange;
    /** @type {?} */
    TabSetComponent.prototype._addContentContainer;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype._tight;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,