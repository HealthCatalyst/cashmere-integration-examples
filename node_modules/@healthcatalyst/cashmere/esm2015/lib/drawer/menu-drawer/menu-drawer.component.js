/**
 * @fileoverview added by tsickle
 * Generated from: lib/drawer/menu-drawer/menu-drawer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, forwardRef, HostBinding, Input, Renderer2, ViewEncapsulation } from '@angular/core';
import { Drawer } from '../drawer.component';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { DrawerToolbar } from './drawer-header.directive';
/** @type {?} */
const drawerThemes = ['dark-theme'];
/**
 * @param {?} menuTheme
 * @return {?}
 */
export function validateMenuDrawerTheme(menuTheme) {
    if (!drawerThemes.some((/**
     * @param {?} theme
     * @return {?}
     */
    theme => theme === menuTheme))) {
        throw new Error('Unsupported menuTheme: ' + menuTheme);
    }
}
/** @type {?} */
const openStateAnimation = '400ms cubic-bezier(0.25, 0.8, 0.25, 1)';
/**
 * Menu drawer that provides default themes
 */
export class MenuDrawer extends Drawer {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super(elementRef);
        this.renderer = renderer;
        this._previousTheme = null;
        this._hostClass = true;
        this.menuTheme = 'dark-theme';
    }
    /**
     * Sets menu style of the drawer. Choose from: `'dark-theme'`
     * @return {?}
     */
    get menuTheme() {
        return this._menuTheme;
    }
    /**
     * @param {?} menuStyle
     * @return {?}
     */
    set menuTheme(menuStyle) {
        validateMenuDrawerTheme(menuStyle);
        this._setThemeClass(this._themeClass(menuStyle));
        this._previousTheme = this._menuTheme;
        this._menuTheme = menuStyle;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        super.ngAfterContentInit();
        if (this.toolbar != null) {
            this.renderer.addClass(this.elementRef.nativeElement, 'hc-drawer-toolbar-visible');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'hc-drawer-toolbar-visible');
        }
    }
    /**
     * @private
     * @param {?} menuStyle
     * @return {?}
     */
    _themeClass(menuStyle) {
        return `hc-menu-drawer-${menuStyle}`;
    }
    /**
     * @private
     * @param {?} className
     * @return {?}
     */
    _setThemeClass(className) {
        if (this._previousTheme !== className) {
            if (this._previousTheme || this._menuTheme) {
                this.renderer.removeClass(this.elementRef.nativeElement, this._previousTheme || this.menuTheme);
            }
            this.renderer.addClass(this.elementRef.nativeElement, className);
        }
    }
}
MenuDrawer.decorators = [
    { type: Component, args: [{
                selector: 'hc-menu-drawer',
                template: "<div class=\"hc-menu-drawer-toolbar-container\">\n    <ng-content select=\"[hcDrawerToolbar]\"></ng-content>\n</div>\n<div class=\"hc-menu-drawer-item-container\">\n    <div class=\"drawer-menu\">\n        <ng-content select=\"hc-drawer-item\"></ng-content>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('openState', [
                        state('open-left, open-right, open-instant', style({
                            transform: 'translate3d(0, 0, 0)',
                            visibility: 'visible'
                        })),
                        state('void', style({
                            'box-shadow': 'none',
                            visibility: 'hidden'
                        })),
                        transition('void => open-instant', animate('0ms')),
                        transition('open-instant => void', animate(openStateAnimation)),
                        transition('void => open-left', [
                            animate('0ms', style({ transform: 'translate3d(-100%, 0, 0)' })),
                            animate(openStateAnimation)
                        ]),
                        transition('open-left => void', [
                            animate(openStateAnimation, style({ transform: 'translate3d(-100%, 0, 0)' }))
                        ]),
                        transition('void => open-right', [
                            animate('0ms', style({ transform: 'translate3d(100%, 0, 0)' })),
                            animate(openStateAnimation)
                        ]),
                        transition('open-right => void', [
                            animate(openStateAnimation, style({ transform: 'translate3d(100%, 0, 0)' }))
                        ])
                    ])
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: Drawer, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MenuDrawer)) }],
                styles: [".hc-drawer,.hc-menu-drawer{bottom:0;box-sizing:border-box;display:block;height:100%;outline:0;overflow-y:auto;position:absolute;top:0;z-index:3}.hc-drawer.hc-drawer-opened:not(.drawer-side),.hc-drawer.hc-drawer-opening:not(.drawer-side),.hc-menu-drawer.hc-drawer-opened:not(.drawer-side),.hc-menu-drawer.hc-drawer-opening:not(.drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.hc-drawer-right{right:0}.hc-drawer-container{position:relative;z-index:1;box-sizing:border-box;display:block;overflow:hidden}.hc-drawer-content{position:relative;z-index:1;display:block;height:100%;left:0;overflow:auto;padding:10px 20px;right:0;-webkit-transition-duration:.4s;transition-duration:.4s;-webkit-transition-property:margin-left,margin-right,-webkit-transform;transition-property:transform,margin-left,margin-right,-webkit-transform;-webkit-transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-timing-function:cubic-bezier(.25,.8,.25,1)}", ".hc-menu-drawer{display:block;overflow:hidden}.hc-menu-drawer-item-container{background-color:#384655;height:100%;overflow-y:auto}.hc-drawer-toolbar-visible .hc-menu-drawer-item-container{height:calc(100% - 52px)}.hc-menu-drawer-toolbar-container{background-color:#2e3946;color:#00aeff;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;font-size:18px}.hc-drawer-toolbar{-webkit-box-align:center;align-items:center;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;height:52px;max-height:52px;overflow:hidden;padding:15px 28px 15px 15px}.hc-drawer-item{color:#fff;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;padding:15px 28px 15px 15px;cursor:pointer;width:100%}.hc-drawer-item:last-child hr{display:none}.hc-drawer-item:hover{background-color:#323f4d}.hc-drawer-divider{border:none;background-color:#6b737b;height:1px;margin:0 28px 0 0}.hc-drawer-right .hc-drawer-divider{margin:0 0 0 15px}"]
            }] }
];
/** @nocollapse */
MenuDrawer.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MenuDrawer.propDecorators = {
    toolbar: [{ type: ContentChild, args: [DrawerToolbar, { static: false },] }],
    menuTheme: [{ type: Input }],
    _hostClass: [{ type: HostBinding, args: ['class.hc-menu-drawer',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    MenuDrawer.prototype._previousTheme;
    /** @type {?} */
    MenuDrawer.prototype.toolbar;
    /**
     * @type {?}
     * @private
     */
    MenuDrawer.prototype._menuTheme;
    /** @type {?} */
    MenuDrawer.prototype._hostClass;
    /**
     * @type {?}
     * @private
     */
    MenuDrawer.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,