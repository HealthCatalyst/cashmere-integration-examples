/**
 * @fileoverview added by tsickle
 * Generated from: lib/drawer/drawer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewEncapsulation } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { parseBooleanAttribute } from '../util';
import { filter, map } from 'rxjs/operators';
import { Observable } from 'rxjs';
/**
 * Result of opening or closing the drawer
 */
export class DrawerPromiseResult {
    /**
     * @param {?} type
     */
    constructor(type) {
        this.type = type;
    }
}
if (false) {
    /** @type {?} */
    DrawerPromiseResult.prototype.type;
}
/** @type {?} */
const supportedModes = ['over', 'push', 'side'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateModeInput(inputStr) {
    if (supportedModes.indexOf(inputStr) < 0) {
        throw Error('Unsupported drawer mode value: ' + inputStr);
    }
}
/** @type {?} */
const supportedAligns = ['left', 'right'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateAlignInput(inputStr) {
    if (supportedAligns.indexOf(inputStr) < 0) {
        throw Error('Unsupported drawer alignment value: ' + inputStr);
    }
}
/** @type {?} */
const openStateAnimation = '400ms cubic-bezier(0.25, 0.8, 0.25, 1)';
/**
 * Drawer that can be opened or closed on the drawer container
 */
export class Drawer {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._openChange = new EventEmitter();
        this._mode = 'push';
        this._align = 'left';
        /**
         * Tabindex of the element
         */
        this.tabindex = -1;
        this._drawerClass = true;
        this._animationStarted = new EventEmitter();
        this._animationDisabled = true;
        this._drawerOpened = false;
        this._resolveAnimationPromise = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * Mode of the drawer: `over`, `push` or `side`
     * @return {?}
     */
    get mode() {
        return this._mode;
    }
    /**
     * @param {?} modeType
     * @return {?}
     */
    set mode(modeType) {
        validateModeInput(modeType);
        this._mode = modeType;
    }
    /**
     * Side the drawer is attached to: `left` or `right`
     * @return {?}
     */
    get align() {
        return this._align;
    }
    /**
     * @param {?} alignType
     * @return {?}
     */
    set align(alignType) {
        validateAlignInput(alignType);
        this._align = alignType;
    }
    /**
     * Event emitted when drawer has started to open
     * @return {?}
     */
    get openStart() {
        return this._animationStarted.pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event.fromState === 'void' && event.toState === 'open')), map((/**
         * @return {?}
         */
        () => { })));
    }
    /**
     * Event emitted when drawer has started to close
     * @return {?}
     */
    get closeStart() {
        return this._animationStarted.pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event.fromState === 'open' && event.toState === 'void')), map((/**
         * @return {?}
         */
        () => { })));
    }
    /**
     * Event emitted when drawer has opened
     * @return {?}
     */
    get _openStream() {
        return this._openChange.pipe(filter((/**
         * @param {?} value
         * @return {?}
         */
        value => value)), map((/**
         * @return {?}
         */
        () => { })));
    }
    /**
     * Event emitted when drawer has closed
     * @return {?}
     */
    get _closeStream() {
        return this._openChange.pipe(filter((/**
         * @param {?} value
         * @return {?}
         */
        value => !value)), map((/**
         * @return {?}
         */
        () => { })));
    }
    /**
     * Whether the drawer is opened.
     * @return {?}
     */
    get opened() {
        return this._drawerOpened;
    }
    /**
     * @param {?} opened
     * @return {?}
     */
    set opened(opened) {
        this.toggle(parseBooleanAttribute(opened));
    }
    /**
     * @return {?}
     */
    get _width() {
        return this.elementRef.nativeElement.offsetWidth;
    }
    /**
     * @return {?}
     */
    get _isOpened() {
        return this._drawerOpened && !this._animationPromise;
    }
    /**
     * @return {?}
     */
    get _isOpening() {
        return this._drawerOpened && !!this._animationPromise;
    }
    /**
     * @return {?}
     */
    get _isClosed() {
        return !this._drawerOpened && !this._animationPromise;
    }
    /**
     * @return {?}
     */
    get _isClosing() {
        return !this._drawerOpened && !!this._animationPromise;
    }
    /**
     * @return {?}
     */
    get _isRight() {
        return this._align === 'right';
    }
    /**
     * @return {?}
     */
    get _openState() {
        if (this._drawerOpened) {
            if (this._animationDisabled) {
                return 'open-instant';
            }
            return this._align === 'right' ? 'open-right' : 'open-left';
        }
        return 'void';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onAnimationStart(event) {
        this._animationStarted.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onAnimationEnd(event) {
        this._openChange.next(this.opened);
        if (this._animationPromise) {
            this._resolveAnimationPromise();
            this._resolveAnimationPromise = (/**
             * @return {?}
             */
            () => { });
            this._animationPromise = null;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onKeyDown(event) {
        if (event.keyCode === 27) {
            this.toggleClose();
            event.stopPropagation();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this._animationPromise) {
            this._resolveAnimationPromise();
            this._resolveAnimationPromise = (/**
             * @return {?}
             */
            () => { });
            this._animationPromise = null;
        }
        this._animationDisabled = false;
    }
    /**
     * Toggles the drawer open
     * @return {?}
     */
    toggleOpen() {
        return this.toggle(true);
    }
    /**
     * Toggles the drawer closed
     * @return {?}
     */
    toggleClose() {
        return this.toggle(false);
    }
    /**
     * Toggles the drawer
     * @param {?=} isOpen
     * @return {?}
     */
    toggle(isOpen = !this.opened) {
        if (!this._animationPromise) {
            this._drawerOpened = isOpen;
            this._animationPromise = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            resolve => {
                this._resolveAnimationPromise = (/**
                 * @return {?}
                 */
                () => resolve(new DrawerPromiseResult(isOpen ? 'open' : 'close')));
            }));
        }
        return this._animationPromise;
    }
}
Drawer.decorators = [
    { type: Component, args: [{
                selector: 'hc-drawer',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('openState', [
                        state('open-left, open-right, open-instant', style({
                            visibility: 'visible'
                        })),
                        state('void', style({
                            'box-shadow': 'none',
                            visibility: 'hidden'
                        })),
                        transition('void => open-instant', animate('0ms')),
                        transition('open-instant => void', animate(openStateAnimation)),
                        transition('void => open-left', [
                            animate('0ms', style({ transform: 'translate3d(-100%, 0, 0)' })),
                            animate(openStateAnimation)
                        ]),
                        transition('open-left => void', [
                            animate(openStateAnimation, style({ transform: 'translate3d(-100%, 0, 0)' }))
                        ]),
                        transition('void => open-right', [
                            animate('0ms', style({ transform: 'translate3d(100%, 0, 0)' })),
                            animate(openStateAnimation)
                        ]),
                        transition('open-right => void', [
                            animate(openStateAnimation, style({ transform: 'translate3d(100%, 0, 0)' }))
                        ])
                    ])
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".hc-drawer,.hc-menu-drawer{bottom:0;box-sizing:border-box;display:block;height:100%;outline:0;overflow-y:auto;position:absolute;top:0;z-index:3}.hc-drawer.hc-drawer-opened:not(.drawer-side),.hc-drawer.hc-drawer-opening:not(.drawer-side),.hc-menu-drawer.hc-drawer-opened:not(.drawer-side),.hc-menu-drawer.hc-drawer-opening:not(.drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.hc-drawer-right{right:0}.hc-drawer-container{position:relative;z-index:1;box-sizing:border-box;display:block;overflow:hidden}.hc-drawer-content{position:relative;z-index:1;display:block;height:100%;left:0;overflow:auto;padding:10px 20px;right:0;-webkit-transition-duration:.4s;transition-duration:.4s;-webkit-transition-property:margin-left,margin-right,-webkit-transform;transition-property:transform,margin-left,margin-right,-webkit-transform;-webkit-transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-timing-function:cubic-bezier(.25,.8,.25,1)}"]
            }] }
];
/** @nocollapse */
Drawer.ctorParameters = () => [
    { type: ElementRef }
];
Drawer.propDecorators = {
    mode: [{ type: Input }],
    align: [{ type: Input }],
    openStart: [{ type: Output }],
    closeStart: [{ type: Output }],
    _openStream: [{ type: Output, args: ['opened',] }],
    _closeStream: [{ type: Output, args: ['closed',] }],
    tabindex: [{ type: HostBinding }],
    _drawerClass: [{ type: HostBinding, args: ['class.hc-drawer',] }],
    opened: [{ type: Input }],
    _isOpened: [{ type: HostBinding, args: ['class.hc-drawer-opened',] }],
    _isOpening: [{ type: HostBinding, args: ['class.hc-drawer-opening',] }],
    _isClosed: [{ type: HostBinding, args: ['class.hc-drawer-closed',] }],
    _isClosing: [{ type: HostBinding, args: ['class.hc-drawer-closing',] }],
    _isRight: [{ type: HostBinding, args: ['class.hc-drawer-right',] }],
    _openState: [{ type: HostBinding, args: ['@openState',] }],
    _onAnimationStart: [{ type: HostListener, args: ['@openState.start', ['$event'],] }],
    _onAnimationEnd: [{ type: HostListener, args: ['@openState.done', ['$event'],] }],
    _onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    Drawer.prototype._openChange;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._mode;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._align;
    /**
     * Tabindex of the element
     * @type {?}
     */
    Drawer.prototype.tabindex;
    /** @type {?} */
    Drawer.prototype._drawerClass;
    /** @type {?} */
    Drawer.prototype._animationStarted;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._animationDisabled;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._drawerOpened;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._animationPromise;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._resolveAnimationPromise;
    /**
     * @type {?}
     * @protected
     */
    Drawer.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9kcmF3ZXIvZHJhd2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFFSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLGlCQUFpQixFQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsT0FBTyxFQUFrQixLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMvRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDOUMsT0FBTyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7O0FBR2hDLE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFDNUIsWUFBbUIsSUFBc0I7UUFBdEIsU0FBSSxHQUFKLElBQUksQ0FBa0I7SUFBRyxDQUFDO0NBQ2hEOzs7SUFEZSxtQ0FBNkI7OztNQUd2QyxjQUFjLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQzs7Ozs7QUFFL0MsTUFBTSxVQUFVLGlCQUFpQixDQUFDLFFBQWdCO0lBQzlDLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEMsTUFBTSxLQUFLLENBQUMsaUNBQWlDLEdBQUcsUUFBUSxDQUFDLENBQUM7S0FDN0Q7QUFDTCxDQUFDOztNQUVLLGVBQWUsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7Ozs7O0FBRXpDLE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxRQUFn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b3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2FuaW1hdGUsIEFuaW1hdGlvbkV2ZW50LCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXJ9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtwYXJzZUJvb2xlYW5BdHRyaWJ1dGV9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuLyoqIFJlc3VsdCBvZiBvcGVuaW5nIG9yIGNsb3NpbmcgdGhlIGRyYXdlciAqL1xuZXhwb3J0IGNsYXNzIERyYXdlclByb21pc2VSZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0eXBlOiAnb3BlbicgfCAnY2xvc2UnKSB7fVxufVxuXG5jb25zdCBzdXBwb3J0ZWRNb2RlcyA9IFsnb3ZlcicsICdwdXNoJywgJ3NpZGUnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTW9kZUlucHV0KGlucHV0U3RyOiBzdHJpbmcpIHtcbiAgICBpZiAoc3VwcG9ydGVkTW9kZXMuaW5kZXhPZihpbnB1dFN0cikgPCAwKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdVbnN1cHBvcnRlZCBkcmF3ZXIgbW9kZSB2YWx1ZTogJyArIGlucHV0U3RyKTtcbiAgICB9XG59XG5cbmNvbnN0IHN1cHBvcnRlZEFsaWducyA9IFsnbGVmdCcsICdyaWdodCddO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBbGlnbklucHV0KGlucHV0U3RyOiBzdHJpbmcpIHtcbiAgICBpZiAoc3VwcG9ydGVkQWxpZ25zLmluZGV4T2YoaW5wdXRTdHIpIDwgMCkge1xuICAgICAgICB0aHJvdyBFcnJvcignVW5zdXBwb3J0ZWQgZHJhd2VyIGFsaWdubWVudCB2YWx1ZTogJyArIGlucHV0U3RyKTtcbiAgICB9XG59XG5cbmNvbnN0IG9wZW5TdGF0ZUFuaW1hdGlvbiA9ICc0MDBtcyBjdWJpYy1iZXppZXIoMC4yNSwgMC44LCAwLjI1LCAxKSc7XG5cbi8qKiBEcmF3ZXIgdGhhdCBjYW4gYmUgb3BlbmVkIG9yIGNsb3NlZCBvbiB0aGUgZHJhd2VyIGNvbnRhaW5lciAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdoYy1kcmF3ZXInLFxuICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gICAgc3R5bGVVcmxzOiBbJ2RyYXdlci5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgYW5pbWF0aW9uczogW1xuICAgICAgICB0cmlnZ2VyKCdvcGVuU3RhdGUnLCBbXG4gICAgICAgICAgICBzdGF0ZShcbiAgICAgICAgICAgICAgICAnb3Blbi1sZWZ0LCBvcGVuLXJpZ2h0LCBvcGVuLWluc3RhbnQnLFxuICAgICAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGF0ZShcbiAgICAgICAgICAgICAgICAndm9pZCcsXG4gICAgICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAnYm94LXNoYWRvdyc6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gb3Blbi1pbnN0YW50JywgYW5pbWF0ZSgnMG1zJykpLFxuICAgICAgICAgICAgdHJhbnNpdGlvbignb3Blbi1pbnN0YW50ID0+IHZvaWQnLCBhbmltYXRlKG9wZW5TdGF0ZUFuaW1hdGlvbikpLFxuICAgICAgICAgICAgdHJhbnNpdGlvbigndm9pZCA9PiBvcGVuLWxlZnQnLCBbXG4gICAgICAgICAgICAgICAgYW5pbWF0ZSgnMG1zJywgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCknIH0pKSxcbiAgICAgICAgICAgICAgICBhbmltYXRlKG9wZW5TdGF0ZUFuaW1hdGlvbilcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgdHJhbnNpdGlvbignb3Blbi1sZWZ0ID0+IHZvaWQnLCBbXG4gICAgICAgICAgICAgICAgYW5pbWF0ZShvcGVuU3RhdGVBbmltYXRpb24sIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApJyB9KSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgdHJhbnNpdGlvbigndm9pZCA9PiBvcGVuLXJpZ2h0JywgW1xuICAgICAgICAgICAgICAgIGFuaW1hdGUoJzBtcycsIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTAwJSwgMCwgMCknfSkpLFxuICAgICAgICAgICAgICAgIGFuaW1hdGUob3BlblN0YXRlQW5pbWF0aW9uKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB0cmFuc2l0aW9uKCdvcGVuLXJpZ2h0ID0+IHZvaWQnLCBbXG4gICAgICAgICAgICAgICAgYW5pbWF0ZShvcGVuU3RhdGVBbmltYXRpb24sIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTAwJSwgMCwgMCknIH0pKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICBdLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIERyYXdlciBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICAgIHJlYWRvbmx5IF9vcGVuQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICAgIHByaXZhdGUgX21vZGU6IHN0cmluZyA9ICdwdXNoJztcbiAgICBwcml2YXRlIF9hbGlnbjogc3RyaW5nID0gJ2xlZnQnO1xuXG4gICAgLyoqIE1vZGUgb2YgdGhlIGRyYXdlcjogYG92ZXJgLCBgcHVzaGAgb3IgYHNpZGVgICovXG4gICAgQElucHV0KClcbiAgICBnZXQgbW9kZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9kZTtcbiAgICB9XG5cbiAgICBzZXQgbW9kZShtb2RlVHlwZTogc3RyaW5nKSB7XG4gICAgICAgIHZhbGlkYXRlTW9kZUlucHV0KG1vZGVUeXBlKTtcbiAgICAgICAgdGhpcy5fbW9kZSA9IG1vZGVUeXBlO1xuICAgIH1cblxuICAgIC8qKiBTaWRlIHRoZSBkcmF3ZXIgaXMgYXR0YWNoZWQgdG86IGBsZWZ0YCBvciBgcmlnaHRgICovXG4gICAgQElucHV0KClcbiAgICBnZXQgYWxpZ24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FsaWduO1xuICAgIH1cblxuICAgIHNldCBhbGlnbihhbGlnblR5cGU6IHN0cmluZykge1xuICAgICAgICB2YWxpZGF0ZUFsaWduSW5wdXQoYWxpZ25UeXBlKTtcbiAgICAgICAgdGhpcy5fYWxpZ24gPSBhbGlnblR5cGU7XG4gICAgfVxuXG4gICAgLyoqIEV2ZW50IGVtaXR0ZWQgd2hlbiBkcmF3ZXIgaGFzIHN0YXJ0ZWQgdG8gb3BlbiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGdldCBvcGVuU3RhcnQoKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hbmltYXRpb25TdGFydGVkLnBpcGUoXG4gICAgICAgICAgICBmaWx0ZXIoZXZlbnQgPT4gZXZlbnQuZnJvbVN0YXRlID09PSAndm9pZCcgJiYgZXZlbnQudG9TdGF0ZSA9PT0gJ29wZW4nKSxcbiAgICAgICAgICAgIG1hcCgoKSA9PiB7fSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKiogRXZlbnQgZW1pdHRlZCB3aGVuIGRyYXdlciBoYXMgc3RhcnRlZCB0byBjbG9zZSAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGdldCBjbG9zZVN0YXJ0KCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uU3RhcnRlZC5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKGV2ZW50ID0+IGV2ZW50LmZyb21TdGF0ZSA9PT0gJ29wZW4nICYmIGV2ZW50LnRvU3RhdGUgPT09ICd2b2lkJyksXG4gICAgICAgICAgICBtYXAoKCkgPT4ge30pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqIEV2ZW50IGVtaXR0ZWQgd2hlbiBkcmF3ZXIgaGFzIG9wZW5lZCAqL1xuICAgIEBPdXRwdXQoJ29wZW5lZCcpXG4gICAgZ2V0IF9vcGVuU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BlbkNoYW5nZS5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKHZhbHVlID0+IHZhbHVlKSxcbiAgICAgICAgICAgIG1hcCgoKSA9PiB7fSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKiogRXZlbnQgZW1pdHRlZCB3aGVuIGRyYXdlciBoYXMgY2xvc2VkICovXG4gICAgQE91dHB1dCgnY2xvc2VkJylcbiAgICBnZXQgX2Nsb3NlU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BlbkNoYW5nZS5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKHZhbHVlID0+ICF2YWx1ZSksXG4gICAgICAgICAgICBtYXAoKCkgPT4ge30pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqIFRhYmluZGV4IG9mIHRoZSBlbGVtZW50ICovXG4gICAgQEhvc3RCaW5kaW5nKClcbiAgICB0YWJpbmRleCA9IC0xO1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaGMtZHJhd2VyJylcbiAgICBfZHJhd2VyQ2xhc3MgPSB0cnVlO1xuXG4gICAgcmVhZG9ubHkgX2FuaW1hdGlvblN0YXJ0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEFuaW1hdGlvbkV2ZW50PigpO1xuXG4gICAgcHJpdmF0ZSBfYW5pbWF0aW9uRGlzYWJsZWQgPSB0cnVlO1xuICAgIHByaXZhdGUgX2RyYXdlck9wZW5lZCA9IGZhbHNlO1xuICAgIHByaXZhdGUgX2FuaW1hdGlvblByb21pc2U6IFByb21pc2U8RHJhd2VyUHJvbWlzZVJlc3VsdD4gfCBudWxsO1xuICAgIHByaXZhdGUgX3Jlc29sdmVBbmltYXRpb25Qcm9taXNlOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgICAvKiogV2hldGhlciB0aGUgZHJhd2VyIGlzIG9wZW5lZC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBvcGVuZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kcmF3ZXJPcGVuZWQ7XG4gICAgfVxuXG4gICAgc2V0IG9wZW5lZChvcGVuZWQpIHtcbiAgICAgICAgdGhpcy50b2dnbGUocGFyc2VCb29sZWFuQXR0cmlidXRlKG9wZW5lZCkpO1xuICAgIH1cblxuICAgIGdldCBfd2lkdGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaGMtZHJhd2VyLW9wZW5lZCcpXG4gICAgZ2V0IF9pc09wZW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RyYXdlck9wZW5lZCAmJiAhdGhpcy5fYW5pbWF0aW9uUHJvbWlzZTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmhjLWRyYXdlci1vcGVuaW5nJylcbiAgICBnZXQgX2lzT3BlbmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RyYXdlck9wZW5lZCAmJiAhIXRoaXMuX2FuaW1hdGlvblByb21pc2U7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5oYy1kcmF3ZXItY2xvc2VkJylcbiAgICBnZXQgX2lzQ2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2RyYXdlck9wZW5lZCAmJiAhdGhpcy5fYW5pbWF0aW9uUHJvbWlzZTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmhjLWRyYXdlci1jbG9zaW5nJylcbiAgICBnZXQgX2lzQ2xvc2luZygpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9kcmF3ZXJPcGVuZWQgJiYgISF0aGlzLl9hbmltYXRpb25Qcm9taXNlO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaGMtZHJhd2VyLXJpZ2h0JylcbiAgICBnZXQgX2lzUmlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hbGlnbiA9PT0gJ3JpZ2h0JztcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ0BvcGVuU3RhdGUnKVxuICAgIGdldCBfb3BlblN0YXRlKCk6ICd2b2lkJyB8ICdvcGVuLWluc3RhbnQnIHwgJ29wZW4tbGVmdCcgfCAnb3Blbi1yaWdodCcge1xuICAgICAgICBpZiAodGhpcy5fZHJhd2VyT3BlbmVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ29wZW4taW5zdGFudCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbGlnbiA9PT0gJ3JpZ2h0JyA/ICdvcGVuLXJpZ2h0JyA6ICdvcGVuLWxlZnQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAndm9pZCc7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignQG9wZW5TdGF0ZS5zdGFydCcsIFsnJGV2ZW50J10pXG4gICAgX29uQW5pbWF0aW9uU3RhcnQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvblN0YXJ0ZWQuZW1pdChldmVudCk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignQG9wZW5TdGF0ZS5kb25lJywgWyckZXZlbnQnXSlcbiAgICBfb25BbmltYXRpb25FbmQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KSB7XG4gICAgICAgIHRoaXMuX29wZW5DaGFuZ2UubmV4dCh0aGlzLm9wZW5lZCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvblByb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25Qcm9taXNlKCk7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9uUHJvbWlzZSA9ICgpID0+IHt9O1xuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgICBfb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAyNykge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVDbG9zZSgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvblByb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25Qcm9taXNlKCk7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9uUHJvbWlzZSA9ICgpID0+IHt9O1xuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uRGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKiogVG9nZ2xlcyB0aGUgZHJhd2VyIG9wZW4gKi9cbiAgICB0b2dnbGVPcGVuKCk6IFByb21pc2U8RHJhd2VyUHJvbWlzZVJlc3VsdD4ge1xuICAgICAgICByZXR1cm4gdGhpcy50b2dnbGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqIFRvZ2dsZXMgdGhlIGRyYXdlciBjbG9zZWQgKi9cbiAgICB0b2dnbGVDbG9zZSgpOiBQcm9taXNlPERyYXdlclByb21pc2VSZXN1bHQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlKGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKiogVG9nZ2xlcyB0aGUgZHJhd2VyICovXG4gICAgdG9nZ2xlKGlzT3BlbjogYm9vbGVhbiA9ICF0aGlzLm9wZW5lZCk6IFByb21pc2U8RHJhd2VyUHJvbWlzZVJlc3VsdD4ge1xuICAgICAgICBpZiAoIXRoaXMuX2FuaW1hdGlvblByb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdlck9wZW5lZCA9IGlzT3BlbjtcblxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uUHJvbWlzZSA9IG5ldyBQcm9taXNlPERyYXdlclByb21pc2VSZXN1bHQ+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25Qcm9taXNlID0gKCkgPT4gcmVzb2x2ZShuZXcgRHJhd2VyUHJvbWlzZVJlc3VsdChpc09wZW4gPyAnb3BlbicgOiAnY2xvc2UnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uUHJvbWlzZTtcbiAgICB9XG59XG4iXX0=