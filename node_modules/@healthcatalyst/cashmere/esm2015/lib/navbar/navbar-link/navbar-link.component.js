/**
 * @fileoverview added by tsickle
 * Generated from: lib/navbar/navbar-link/navbar-link.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';
/**
 * Primary navigation links
 */
export class NavbarLinkComponent {
    /**
     * @param {?} el
     * @param {?} ref
     */
    constructor(el, ref) {
        this.el = el;
        this.ref = ref;
        /**
         * Sets the RouterLinkActive options to match the url exactly to set active state. *Default is false.*
         * See https://angular.io/api/router/RouterLinkActive#description
         */
        this.exact = false;
        this._hidden = false;
    }
    /**
     * Disable visibility of component from view
     * @return {?}
     */
    hide() {
        this._hidden = true;
        this.ref.detectChanges();
    }
    /**
     * Enable visibility of component from view
     * @return {?}
     */
    show() {
        this._hidden = false;
        this.ref.detectChanges();
    }
    /**
     * @return {?}
     */
    _getWidth() {
        return this.el.nativeElement.scrollWidth;
    }
}
NavbarLinkComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-navbar-link',
                template: "<a *ngIf=\"!_hidden\" title=\"{{linkText}}\" [routerLink]=\"uri\" routerLinkActive=\"active\"\n   class=\"navbar-link\" [ngClass]=\"{ 'active': this.active === true, 'inactive': this.active === false }\"\n   [routerLinkActiveOptions]=\"{exact: exact}\">\n    {{linkText}}<ng-content></ng-content>\n</a>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
NavbarLinkComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
NavbarLinkComponent.propDecorators = {
    active: [{ type: Input }],
    uri: [{ type: Input }],
    linkText: [{ type: Input }],
    exact: [{ type: Input }]
};
if (false) {
    /**
     * (optional) forces active state *Default is `null`.*
     * @type {?}
     */
    NavbarLinkComponent.prototype.active;
    /**
     * RouterLink uri. See https://angular.io/api/router/RouterLink
     * @type {?}
     */
    NavbarLinkComponent.prototype.uri;
    /**
     * The text to display. This can also optionally be the contents within the element
     * @type {?}
     */
    NavbarLinkComponent.prototype.linkText;
    /**
     * Sets the RouterLinkActive options to match the url exactly to set active state. *Default is false.*
     * See https://angular.io/api/router/RouterLinkActive#description
     * @type {?}
     */
    NavbarLinkComponent.prototype.exact;
    /** @type {?} */
    NavbarLinkComponent.prototype._hidden;
    /**
     * @type {?}
     * @private
     */
    NavbarLinkComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NavbarLinkComponent.prototype.ref;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLWxpbmsuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL25hdmJhci9uYXZiYXItbGluay9uYXZiYXItbGluay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZSxLQUFLLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7QUFROUcsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7SUFxQjVCLFlBQW9CLEVBQWMsRUFBVSxHQUFzQjtRQUE5QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7Ozs7O1FBSmxFLFVBQUssR0FBWSxLQUFLLENBQUM7UUFFdkIsWUFBTyxHQUFZLEtBQUssQ0FBQztJQUU0QyxDQUFDOzs7OztJQUd0RSxJQUFJO1FBQ0EsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7OztJQUdELElBQUk7UUFDQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxTQUFTO1FBQ0wsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDN0MsQ0FBQzs7O1lBMUNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQiw0VEFBMkM7Z0JBQzNDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3hDOzs7O1lBUHFDLFVBQVU7WUFBeEMsaUJBQWlCOzs7cUJBVXBCLEtBQUs7a0JBSUwsS0FBSzt1QkFJTCxLQUFLO29CQU1MLEtBQUs7Ozs7Ozs7SUFkTixxQ0FDaUI7Ozs7O0lBR2pCLGtDQUNZOzs7OztJQUdaLHVDQUNpQjs7Ozs7O0lBS2pCLG9DQUN1Qjs7SUFFdkIsc0NBQXlCOzs7OztJQUViLGlDQUFzQjs7Ozs7SUFBRSxrQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogUHJpbWFyeSBuYXZpZ2F0aW9uIGxpbmtzICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2hjLW5hdmJhci1saW5rJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbmF2YmFyLWxpbmsuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgTmF2YmFyTGlua0NvbXBvbmVudCB7XG4gICAgLyoqIChvcHRpb25hbCkgZm9yY2VzIGFjdGl2ZSBzdGF0ZSAqRGVmYXVsdCBpcyBgbnVsbGAuKiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYWN0aXZlPzogYm9vbGVhbjtcblxuICAgIC8qKiBSb3V0ZXJMaW5rIHVyaS4gU2VlIGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlckxpbmsgKi9cbiAgICBASW5wdXQoKVxuICAgIHVyaTogc3RyaW5nO1xuXG4gICAgLyoqIFRoZSB0ZXh0IHRvIGRpc3BsYXkuIFRoaXMgY2FuIGFsc28gb3B0aW9uYWxseSBiZSB0aGUgY29udGVudHMgd2l0aGluIHRoZSBlbGVtZW50ICovXG4gICAgQElucHV0KClcbiAgICBsaW5rVGV4dDogc3RyaW5nO1xuXG4gICAgLyoqIFNldHMgdGhlIFJvdXRlckxpbmtBY3RpdmUgb3B0aW9ucyB0byBtYXRjaCB0aGUgdXJsIGV4YWN0bHkgdG8gc2V0IGFjdGl2ZSBzdGF0ZS4gKkRlZmF1bHQgaXMgZmFsc2UuKlxuICAgICAqIFNlZSBodHRwczovL2FuZ3VsYXIuaW8vYXBpL3JvdXRlci9Sb3V0ZXJMaW5rQWN0aXZlI2Rlc2NyaXB0aW9uXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBleGFjdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgX2hpZGRlbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZWY6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gICAgLyoqIERpc2FibGUgdmlzaWJpbGl0eSBvZiBjb21wb25lbnQgZnJvbSB2aWV3ICovXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5faGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIC8qKiBFbmFibGUgdmlzaWJpbGl0eSBvZiBjb21wb25lbnQgZnJvbSB2aWV3ICovXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5faGlkZGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBfZ2V0V2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsV2lkdGg7XG4gICAgfVxufVxuIl19