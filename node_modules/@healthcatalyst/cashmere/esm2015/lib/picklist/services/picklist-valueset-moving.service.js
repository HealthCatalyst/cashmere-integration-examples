/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-valueset-moving.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PicklistFilterService } from './picklist-filter.service';
import { ValueListOption } from '../pane/picklist-pane.model';
import { PicklistStateService } from './picklist-state.service';
export class PicklistValuesetMovingService {
    /**
     * @param {?} filterService
     * @param {?} stateService
     */
    constructor(filterService, stateService) {
        this.filterService = filterService;
        this.stateService = stateService;
    }
    /**
     * @return {?}
     */
    get valueList() {
        return this.stateService.valueList;
    }
    /**
     * @return {?}
     */
    get valueSetList() {
        return this.stateService.valueSetList;
    }
    /**
     * @param {?} optionsToMove
     * @param {?} pane
     * @param {?=} shouldBreakValuesets
     * @return {?}
     */
    moveOutValuesets(optionsToMove, pane, shouldBreakValuesets = false) {
        this.valueSetList.selectedOptions.forEach((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            v.showValues = false;
            optionsToMove.valueSets.set(v.code, v);
            this.valueSetList.options.delete(v.code);
        }));
        this.valueSetList.filteredOptions.forEach((/**
         * @param {?} valueset
         * @return {?}
         */
        valueset => {
            if (valueset.selected || valueset.subValuesSelectList.selectedOptions.size < 1) {
                return;
            }
            if (shouldBreakValuesets) {
                this.breakValueset(valueset, optionsToMove, pane.companion);
            }
            else {
                this.moveSubValues(valueset.subValuesSelectList.selectedOptions, pane);
            }
        }));
    }
    /**
     * @private
     * @param {?} valueset
     * @param {?} optionsToMove
     * @param {?} companionPane
     * @return {?}
     */
    breakValueset(valueset, optionsToMove, companionPane) {
        valueset.showValues = false;
        optionsToMove.valueSets.set(valueset.code, valueset);
        this.valueSetList.options.delete(valueset.code);
        /** @type {?} */
        const unselectedSubValues = new Map();
        valueset.subValuesSelectList.filteredOptions
            .filter((/**
         * @param {?} o
         * @return {?}
         */
        o => !o.selected))
            .forEach((/**
         * @param {?} o
         * @return {?}
         */
        o => {
            unselectedSubValues.set(o.code, new ValueListOption(o.option, o.code));
        }));
        if (!companionPane) {
            return;
        }
        this.moveSubValues(unselectedSubValues, companionPane);
    }
    /**
     * @private
     * @param {?} valuesMap
     * @param {?} sourcePane
     * @return {?}
     */
    moveSubValues(valuesMap, sourcePane) {
        this.removeValuesFromPane(valuesMap, sourcePane);
        if (!sourcePane.companion) {
            return;
        }
        valuesMap.forEach((/**
         * @param {?} o
         * @return {?}
         */
        o => {
            // tslint:disable-next-line:no-non-null-assertion
            (/** @type {?} */ (sourcePane.companion)).valueList.options.set(o.code, new ValueListOption(o.option, o.code));
        }));
    }
    /**
     * Handles complex logic for when one pane is paged, and we want to keep the "x of y" counts accurate without a round trip to the server
     * @private
     * @param {?} valuesMap
     * @param {?} pane
     * @return {?}
     */
    removeValuesFromPane(valuesMap, pane) {
        if (pane.isPaged) {
            // don't bother trying to remove values or decrement count for options that are already filtered out
            this.filterService.preFilterOptionsForRemoteMode(valuesMap, pane.valueList);
        }
        valuesMap.forEach((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            /** @type {?} */
            const optionDeleted = pane.valueList.options.delete(v.code);
            /** @type {?} */
            const optionAlreadyInCompanionList = pane.companion ? pane.companion.valueList.options.has(v.code) : false;
            if (!optionDeleted && pane.isPaged && !optionAlreadyInCompanionList) {
                pane.valueList.additionalRemoteOptions--;
            }
        }));
    }
}
PicklistValuesetMovingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PicklistValuesetMovingService.ctorParameters = () => [
    { type: PicklistFilterService },
    { type: PicklistStateService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PicklistValuesetMovingService.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    PicklistValuesetMovingService.prototype.stateService;
}
//# sourceMappingURL=data:application/json;base64,