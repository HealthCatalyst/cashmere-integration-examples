/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-filter-remote.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from, of, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { PicklistStateService } from './picklist-state.service';
import { PicklistRemoteQueryOptions } from '../picklist.model';
export class PicklistFilterRemoteService {
    /**
     * @param {?} stateService
     */
    constructor(stateService) {
        this.stateService = stateService;
        this.currentValuePage = 1;
        this.currentValueSetPage = 1;
        this.cancelSearch = new Subject();
        this.options$ = from([]);
    }
    /**
     * @return {?}
     */
    get valueList() {
        return this.stateService.valueList;
    }
    /**
     * @return {?}
     */
    get valueSetList() {
        return this.stateService.valueSetList;
    }
    /**
     * @return {?}
     */
    get searchTerm() {
        return this.filterService ? this.filterService.searchTerm : '';
    }
    /**
     * @private
     * @return {?}
     */
    get cancelSearch$() {
        return this.cancelSearch.asObservable();
    }
    /**
     * @param {?} filterService
     * @return {?}
     */
    reset(filterService) {
        this.filterService = filterService;
        this.currentValuePage = 1;
        this.currentValueSetPage = 1;
    }
    /**
     * @param {?=} type
     * @param {?=} shouldAppend
     * @param {?=} selectAllCount
     * @return {?}
     */
    filter(type = 'both', shouldAppend = false, selectAllCount = null) {
        if (!this.stateService.optionsSource.getOptions) {
            console.warn('Remote query callback not provided for this picklist.');
            return from([]).subscribe();
        }
        if (this.options$) {
            this.cancelSearch.next();
        }
        /** @type {?} */
        const params = this.buildRemoteQueryParams(type, selectAllCount);
        if (!shouldAppend) {
            this.clearFilteredOptions(type);
        }
        this.resetPagingForSelectAllIfNeeded(selectAllCount);
        this.options$ = this.stateService.optionsSource.getOptions(params).pipe(takeUntil(this.cancelSearch$));
        return this.options$.subscribe((/**
         * @param {?} options
         * @return {?}
         */
        options => {
            this.processIncomingRemoteOptions(options, type, shouldAppend);
        }), (/**
         * @return {?}
         */
        () => {
            console.warn('Unable to filter options');
            this.clearLists('both');
            return of({});
        }), (/**
         * @return {?}
         */
        () => {
            this.options$ = of({});
        }));
    }
    /**
     * @private
     * @param {?} options
     * @param {?=} type
     * @param {?=} shouldAppend
     * @return {?}
     */
    processIncomingRemoteOptions(options, type = 'both', shouldAppend = false) {
        if (!shouldAppend) {
            this.clearLists(type);
        }
        if (this.stateService.optionsSource.isPaged) {
            if (options.pagedValues) {
                this.processPagedValues(options.pagedValues);
            }
            if (options.pagedValueSets) {
                this.processPagedValueSets(options.pagedValueSets);
            }
        }
        else {
            if (options.values) {
                this.stateService.updateValueList(options.values);
            }
            if (options.valueSets) {
                this.stateService.updateValueSetList(options.valueSets);
            }
            this.valueList.additionalRemoteOptions = 0;
            this.valueSetList.additionalRemoteOptions = 0;
        }
    }
    /**
     * @private
     * @param {?} pagedValues
     * @return {?}
     */
    processPagedValues(pagedValues) {
        this.stateService.updateValueList(pagedValues.values);
        this.valueList.additionalRemoteOptions = pagedValues.totalItems - this.valueList.options.size;
    }
    /**
     * @private
     * @param {?} pagedValueSets
     * @return {?}
     */
    processPagedValueSets(pagedValueSets) {
        this.stateService.updateValueSetList(pagedValueSets.values);
        this.valueSetList.additionalRemoteOptions = pagedValueSets.totalItems - this.valueSetList.options.size;
    }
    /**
     * @private
     * @param {?} type
     * @param {?=} selectAllCount
     * @return {?}
     */
    buildRemoteQueryParams(type, selectAllCount = null) {
        /** @type {?} */
        const params = new PicklistRemoteQueryOptions(this.stateService.picklist, this.searchTerm, type);
        if (type === 'values' || type === 'both') {
            params.valuePageSettings = this.buildPageSettings(this.currentValuePage, selectAllCount);
        }
        if (type === 'valuesets' || type === 'both') {
            params.valueSetPageSettings = this.buildPageSettings(this.currentValueSetPage, selectAllCount);
        }
        return params;
    }
    /**
     * @private
     * @param {?} currentPage
     * @param {?} selectAllCount
     * @return {?}
     */
    buildPageSettings(currentPage, selectAllCount) {
        /** @type {?} */
        const pagerSettings = { currentPage: 1, itemsPerPage: this.stateService.optionsSource.pageSize };
        pagerSettings.currentPage = selectAllCount ? 1 : currentPage;
        pagerSettings.itemsPerPage = selectAllCount || pagerSettings.itemsPerPage;
        return pagerSettings;
    }
    /**
     * @private
     * @param {?=} selectAllCount
     * @return {?}
     */
    resetPagingForSelectAllIfNeeded(selectAllCount = null) {
        if (selectAllCount) {
            this.currentValuePage = Math.floor(selectAllCount / this.stateService.optionsSource.pageSize);
        }
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    clearLists(type) {
        if (type === 'both' || type === 'values') {
            this.stateService.clearList(this.valueList);
        }
        if (type === 'both' || type === 'valuesets') {
            this.stateService.clearList(this.valueSetList);
        }
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    clearFilteredOptions(type) {
        if (type === 'both' || type === 'values') {
            this.valueList.filteredOptions.length = 0;
        }
        if (type === 'both' || type === 'valuesets') {
            this.valueSetList.filteredOptions.length = 0;
        }
    }
}
PicklistFilterRemoteService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PicklistFilterRemoteService.ctorParameters = () => [
    { type: PicklistStateService }
];
if (false) {
    /** @type {?} */
    PicklistFilterRemoteService.prototype.filterService;
    /** @type {?} */
    PicklistFilterRemoteService.prototype.currentValuePage;
    /** @type {?} */
    PicklistFilterRemoteService.prototype.currentValueSetPage;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterRemoteService.prototype.cancelSearch;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterRemoteService.prototype.options$;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterRemoteService.prototype.stateService;
}
//# sourceMappingURL=data:application/json;base64,