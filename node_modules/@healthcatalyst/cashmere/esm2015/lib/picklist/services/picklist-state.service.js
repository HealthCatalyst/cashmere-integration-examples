/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PicklistOptionsSource, PicklistSettings } from '../picklist.model';
import { FilterableSelectList, ValueListOption, ValueSetListOption } from '../pane/picklist-pane.model';
import { PicklistFilterLocalService } from './picklist-filter-local.service';
export class PicklistStateService {
    /**
     * @param {?} localFilterService
     */
    constructor(localFilterService) {
        this.localFilterService = localFilterService;
        this.picklist = new PicklistSettings();
        this.optionsSource = new PicklistOptionsSource();
        this.valueList = new FilterableSelectList();
        this.valueSetList = new FilterableSelectList();
    }
    /**
     * @param {?} settings
     * @param {?} optionsSource
     * @param {?} pane
     * @return {?}
     */
    reset(settings, optionsSource, pane) {
        this.picklist = settings;
        this.pane = pane;
        this.optionsSource = optionsSource;
        this.clearList(this.valueList);
        this.clearList(this.valueSetList);
    }
    /**
     * @param {?} options
     * @param {?=} searchTokens
     * @return {?}
     */
    updateValueList(options, searchTokens = []) {
        /** @type {?} */
        const listOptions = options.map((/**
         * @param {?} v
         * @return {?}
         */
        v => new ValueListOption(v, v.code)));
        /** @type {?} */
        const companionList = this.pane.companion ? this.pane.companion.valueList : null;
        this.valueList.sort = this.picklist.sort;
        this.updateList(listOptions, this.valueList, companionList, searchTokens);
    }
    /**
     * @param {?} options
     * @param {?=} searchTokens
     * @return {?}
     */
    updateValueSetList(options, searchTokens = []) {
        /** @type {?} */
        const listOptions = new Array();
        /** @type {?} */
        const companionList = this.pane.companion ? this.pane.companion.valueSetList : null;
        options.forEach((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            /** @type {?} */
            const listOption = new ValueSetListOption(v, v.code);
            if (v.subValues && v.subValues.length > 0) {
                /** @type {?} */
                const subValueListOptions = v.subValues.map((/**
                 * @param {?} sv
                 * @return {?}
                 */
                (sv) => new ValueListOption(sv, sv.code)));
                this.updateList(subValueListOptions, listOption.subValuesSelectList, null, searchTokens);
            }
            listOptions.push(listOption);
        }));
        this.updateList(listOptions, this.valueSetList, companionList, searchTokens);
    }
    /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    clearList(list) {
        list.options.clear();
        list.filteredOptions.length = 0;
        list.selectedOptions.clear();
        list.lastClickedOption = null;
        list.additionalRemoteOptions = 0;
    }
    /**
     * @private
     * @template T
     * @param {?} options
     * @param {?} list
     * @param {?=} companionList
     * @param {?=} searchTokens
     * @return {?}
     */
    updateList(options, list, companionList = null, searchTokens = []) {
        if (!this.optionsSource.isPaged && this.pane.shouldExcludeCompanion && companionList) {
            options = options.filter((/**
             * @param {?} o
             * @return {?}
             */
            o => !companionList.options.get(o.code)));
        }
        options.forEach((/**
         * @param {?} o
         * @return {?}
         */
        o => {
            list.options.set(o.code, o);
            list.filteredOptions.push(o);
        }));
        this.localFilterService.filter(list, searchTokens);
    }
}
PicklistStateService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PicklistStateService.ctorParameters = () => [
    { type: PicklistFilterLocalService }
];
if (false) {
    /** @type {?} */
    PicklistStateService.prototype.pane;
    /** @type {?} */
    PicklistStateService.prototype.picklist;
    /** @type {?} */
    PicklistStateService.prototype.optionsSource;
    /** @type {?} */
    PicklistStateService.prototype.valueList;
    /** @type {?} */
    PicklistStateService.prototype.valueSetList;
    /**
     * @type {?}
     * @private
     */
    PicklistStateService.prototype.localFilterService;
}
//# sourceMappingURL=data:application/json;base64,