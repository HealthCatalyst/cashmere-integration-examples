/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-action.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { isSubList } from '../pane/picklist-pane.model';
import { PicklistService } from './picklist.service';
export class PicklistActionService {
    /**
     * @param {?} listService
     */
    constructor(listService) {
        this.listService = listService;
    }
    /**
     * @return {?}
     */
    get valueList() {
        return this.listService.valueList;
    }
    /**
     * @return {?}
     */
    get valueSetList() {
        return this.listService.valueSetList;
    }
    /**
     * @template T
     * @param {?} event
     * @param {?} index
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    onItemClicked(event, index, list, item) {
        if (event.shiftKey && list.lastClickedOption && !(item.code === list.lastClickedOption.code)) {
            this.shiftClick(index, list, item, list.lastClickedOption);
        }
        else if (event.ctrlKey) {
            this.ctrlClick(list, item);
        }
        else {
            // regular click
            this.selectNone();
            this.selectItem(list, item);
            list.lastClickedOption = item;
        }
    }
    /**
     * @template T
     * @param {?} event
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    onItemDoubleClicked(event, list, item) {
        this.selectNone();
        this.selectItem(list, item);
    }
    /**
     * @param {?} event
     * @param {?} valueset
     * @return {?}
     */
    onValuesetCaretClicked(event, valueset) {
        if (!valueset.showValues && valueset.subValuesSelectList.filteredOptions.length === 0) {
            this.listService.loadValuesForValueset(valueset);
        }
        valueset.showValues = !valueset.showValues;
    }
    /**
     * @return {?}
     */
    selectAll() {
        this.valueSetList.filteredOptions.forEach((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            this.clearListSelection(v.subValuesSelectList);
        })); // deselect sublist items
        this.selectAllInList(this.valueList);
        this.selectAllInList(this.valueSetList);
    }
    /**
     * @return {?}
     */
    selectNone() {
        this.valueSetList.filteredOptions.forEach((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            this.clearListSelection(v.subValuesSelectList);
        }));
        this.clearListSelection(this.valueList);
        this.clearListSelection(this.valueSetList);
    }
    /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    selectAllInList(list) {
        if (!list.isActive) {
            return;
        }
        list.selectedOptions.clear();
        list.lastClickedOption = null;
        list.filteredOptions.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.selected = true;
            list.selectedOptions.set(item.code, item);
        }));
    }
    /**
     * @private
     * @template T
     * @param {?} list
     * @return {?}
     */
    clearListSelection(list) {
        list.selectedOptions.clear();
        list.lastClickedOption = null;
        list.filteredOptions.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.selected = false;
        }));
    }
    /**
     * @private
     * @template T
     * @param {?} index
     * @param {?} list
     * @param {?} item
     * @param {?} lastClickedItem
     * @return {?}
     */
    shiftClick(index, list, item, lastClickedItem) {
        /** @type {?} */
        const lastIndex = list.filteredOptions.indexOf(lastClickedItem);
        /** @type {?} */
        let largeIndex = Math.max(index, lastIndex);
        /** @type {?} */
        let smallIndex = Math.min(index, lastIndex);
        /** @type {?} */
        const formerLastClicked = list.lastClickedOption;
        this.selectNone();
        list.lastClickedOption = formerLastClicked;
        for (let i = smallIndex; i <= largeIndex; i++) {
            this.selectItem(list, list.filteredOptions[i]);
        }
    }
    /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    ctrlClick(list, item) {
        // if ctrl clicking a sub value of a valueset that is selected (such that all subvalues appear selected)
        if (isSubList(list) && list.parentValueSet.selected) {
            this.selectAllInList(list);
            this.deselectItem(this.valueSetList, list.parentValueSet);
            this.deselectItem(list, item);
        }
        else {
            this.toggleItemSelection(list, item);
        }
        list.lastClickedOption = item;
    }
    /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    deselectItem(list, item) {
        item.selected = false;
        list.selectedOptions.delete(item.code);
    }
    /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    selectItem(list, item) {
        item.selected = true;
        list.selectedOptions.set(item.code, item);
    }
    /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    toggleItemSelection(list, item) {
        if (item.selected) {
            this.deselectItem(list, item);
        }
        else {
            this.selectItem(list, item);
        }
    }
}
PicklistActionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PicklistActionService.ctorParameters = () => [
    { type: PicklistService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PicklistActionService.prototype.listService;
}
//# sourceMappingURL=data:application/json;base64,