/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-filter.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WorkTrackerService } from '../../shared/work-tracker.service';
import { PicklistFilterRemoteService } from './picklist-filter-remote.service';
import { PicklistFilterLocalService } from './picklist-filter-local.service';
import { PicklistStateService } from './picklist-state.service';
export class PicklistFilterService {
    /**
     * @param {?} workTracker
     * @param {?} stateService
     * @param {?} remoteFilterService
     * @param {?} localFilterService
     */
    constructor(workTracker, stateService, remoteFilterService, localFilterService) {
        this.workTracker = workTracker;
        this.stateService = stateService;
        this.remoteFilterService = remoteFilterService;
        this.localFilterService = localFilterService;
        this.searchTerm = '';
    }
    /**
     * @return {?}
     */
    get valueList() {
        return this.stateService.valueList;
    }
    /**
     * @return {?}
     */
    get valueSetList() {
        return this.stateService.valueSetList;
    }
    /**
     * @return {?}
     */
    get searchTokens() {
        return this.searchTerm
            .toLocaleLowerCase()
            .replace(/\s+/g, ' ')
            .split(' ');
    }
    /**
     * @return {?}
     */
    reset() {
        this.remoteFilterService.reset(this);
        this.searchTerm = '';
    }
    /**
     * @param {?} searchTerm
     * @return {?}
     */
    runFilter(searchTerm) {
        this.searchTerm = searchTerm;
        if (!this.stateService.optionsSource.isPaged) {
            this.localFilterService.filter(this.valueList, this.searchTokens);
            this.localFilterService.filter(this.valueSetList, this.searchTokens);
        }
        else {
            this.remoteFilterService.currentValuePage = 1;
            this.remoteFilterService.currentValueSetPage = 1;
            /** @type {?} */
            const workTracker = this.workTracker.startObservable((/**
             * @return {?}
             */
            () => this.remoteFilterService.filter()));
            this.showListLoadingIndicators(workTracker, 'both');
        }
    }
    /**
     * @param {?=} type
     * @param {?=} shouldAppend
     * @param {?=} selectAllCount
     * @return {?}
     */
    filterOptionsRemote(type = 'both', shouldAppend = false, selectAllCount = null) {
        return this.remoteFilterService.filter(type, shouldAppend, selectAllCount);
    }
    /**
     * @param {?=} type
     * @param {?=} autoLoadMore
     * @return {?}
     */
    loadMore(type = 'both', autoLoadMore = false) {
        if (type === 'both' || type === 'values') {
            this.remoteFilterService.currentValuePage++;
        }
        if (type === 'both' || type === 'valuesets') {
            this.remoteFilterService.currentValueSetPage++;
        }
        /** @type {?} */
        const loading$ = this.workTracker.startObservable((/**
         * @return {?}
         */
        () => this.filterOptionsRemote(type, true)));
        this.showListLoadingIndicators(loading$, type, !autoLoadMore);
    }
    /**
     * @param {?} numberToLoad
     * @return {?}
     */
    loadForSelectAll(numberToLoad) {
        /** @type {?} */
        const loading$ = this.workTracker.startObservable((/**
         * @return {?}
         */
        () => this.filterOptionsRemote('values', false, numberToLoad)));
        this.showListLoadingIndicators(loading$, 'values');
        return loading$;
    }
    /**
     * @return {?}
     */
    reloadIfEmpty() {
        /** @type {?} */
        const valuesNeedReload = this.valueList.options.size === 0 && this.valueList.additionalRemoteOptions > 0;
        /** @type {?} */
        const valueSetsNeedReload = this.valueSetList.options.size === 0 && this.valueSetList.additionalRemoteOptions > 0;
        if (valuesNeedReload || valueSetsNeedReload) {
            this.runFilter(this.searchTerm);
        }
    }
    /**
     * @param {?} valuesMap
     * @param {?} list
     * @return {?}
     */
    preFilterOptionsForRemoteMode(valuesMap, list) {
        // if server is handling filtering, but I want to avoid the round trip to the server when moving options
        // I need to double check that those options belong before adding them, or risk errant option counts
        valuesMap.forEach((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            if (!this.localFilterService.itemHasSearchTokens(list, v, this.searchTokens)) {
                valuesMap.delete(v.code);
            }
        }));
    }
    /**
     * @param {?} workTracker
     * @param {?=} type
     * @param {?=} isAppending
     * @return {?}
     */
    showListLoadingIndicators(workTracker, type = 'both', isAppending = false) {
        if (type === 'both' || type === 'values') {
            this.showLoadingIndicatorForList(this.valueList, workTracker, isAppending);
        }
        if (type === 'both' || type === 'valuesets') {
            this.showLoadingIndicatorForList(this.valueSetList, workTracker, isAppending);
        }
    }
    /**
     * @private
     * @param {?} list
     * @param {?} tracker
     * @param {?=} isAppending
     * @return {?}
     */
    showLoadingIndicatorForList(list, tracker, isAppending = false) {
        if (isAppending) {
            list.appendingOptions = tracker;
        }
        else {
            list.loadingOptions = tracker;
        }
    }
}
PicklistFilterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PicklistFilterService.ctorParameters = () => [
    { type: WorkTrackerService },
    { type: PicklistStateService },
    { type: PicklistFilterRemoteService },
    { type: PicklistFilterLocalService }
];
if (false) {
    /** @type {?} */
    PicklistFilterService.prototype.searchTerm;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterService.prototype.workTracker;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterService.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterService.prototype.remoteFilterService;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterService.prototype.localFilterService;
}
//# sourceMappingURL=data:application/json;base64,