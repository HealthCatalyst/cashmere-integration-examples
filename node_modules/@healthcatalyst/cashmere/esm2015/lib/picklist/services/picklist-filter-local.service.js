/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-filter-local.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class PicklistFilterLocalService {
    /**
     * @template T
     * @param {?} list
     * @param {?} searchTokens
     * @return {?}
     */
    filter(list, searchTokens) {
        list.filteredOptions = [];
        list.options.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (this.itemHasSearchTokens(list, item, searchTokens)) {
                list.filteredOptions.push(item);
            }
        }));
        if (list.sort !== "none") {
            list.filteredOptions.sort(this.getSortFunc(list));
        }
    }
    /**
     * @template T
     * @param {?} list
     * @param {?} item
     * @param {?} searchTokens
     * @return {?}
     */
    itemHasSearchTokens(list, item, searchTokens) {
        /** @type {?} */
        const valuesToSearchIn = [item.option.title, list.codeIsSignificant ? item.option.code : ''];
        valuesToSearchIn.filter((/**
         * @param {?} val
         * @return {?}
         */
        val => !!val));
        return searchTokens.every((/**
         * @param {?} token
         * @return {?}
         */
        token => valuesToSearchIn.some((/**
         * @param {?} value
         * @return {?}
         */
        value => value.toLocaleLowerCase().indexOf(token) > -1))));
    }
    /**
     * @private
     * @template T
     * @param {?} list
     * @return {?}
     */
    getSortFunc(list) {
        /** @type {?} */
        const sortField = list.codeIsSignificant ? 'code' : 'title';
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => a.option[sortField].localeCompare(b.option[sortField]) * (list.sort === "asc" ? -1 : 1));
    }
}
PicklistFilterLocalService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2xpc3QtZmlsdGVyLWxvY2FsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcGlja2xpc3Qvc2VydmljZXMvcGlja2xpc3QtZmlsdGVyLWxvY2FsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSXpDLE1BQU0sT0FBTywwQkFBMEI7Ozs7Ozs7SUFDNUIsTUFBTSxDQUE2QixJQUE2QixFQUFFLFlBQXNCO1FBQzNGLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTzs7OztRQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hCLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsWUFBWSxDQUFDLEVBQUU7Z0JBQ3BELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ25DO1FBQ0wsQ0FBQyxFQUFDLENBQUM7UUFDSCxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNyRDtJQUNMLENBQUM7Ozs7Ozs7O0lBRU0sbUJBQW1CLENBQTZCLElBQTZCLEVBQUUsSUFBTyxFQUFFLFlBQXNCOztjQUMzRyxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM1RixnQkFBZ0IsQ0FBQyxNQUFNOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDLENBQUM7UUFDdEMsT0FBTyxZQUFZLENBQUMsS0FBSzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSTs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQztJQUN0SCxDQUFDOzs7Ozs7O0lBRU8sV0FBVyxDQUE2QixJQUE2Qjs7Y0FDbkUsU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPO1FBQzNEOzs7OztRQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztJQUM3RyxDQUFDOzs7WUF2QkosVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0ZpbHRlcmFibGVTZWxlY3RMaXN0LCBTZWxlY3RMaXN0T3B0aW9ufSBmcm9tICcuLi9wYW5lL3BpY2tsaXN0LXBhbmUubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGlja2xpc3RGaWx0ZXJMb2NhbFNlcnZpY2Uge1xuICAgIHB1YmxpYyBmaWx0ZXI8VCBleHRlbmRzIFNlbGVjdExpc3RPcHRpb24+KGxpc3Q6IEZpbHRlcmFibGVTZWxlY3RMaXN0PFQ+LCBzZWFyY2hUb2tlbnM6IHN0cmluZ1tdKSB7XG4gICAgICAgIGxpc3QuZmlsdGVyZWRPcHRpb25zID0gW107XG4gICAgICAgIGxpc3Qub3B0aW9ucy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXRlbUhhc1NlYXJjaFRva2VucyhsaXN0LCBpdGVtLCBzZWFyY2hUb2tlbnMpKSB7XG4gICAgICAgICAgICAgICAgbGlzdC5maWx0ZXJlZE9wdGlvbnMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChsaXN0LnNvcnQgIT09IFwibm9uZVwiKSB7XG4gICAgICAgICAgICBsaXN0LmZpbHRlcmVkT3B0aW9ucy5zb3J0KHRoaXMuZ2V0U29ydEZ1bmMobGlzdCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGl0ZW1IYXNTZWFyY2hUb2tlbnM8VCBleHRlbmRzIFNlbGVjdExpc3RPcHRpb24+KGxpc3Q6IEZpbHRlcmFibGVTZWxlY3RMaXN0PFQ+LCBpdGVtOiBULCBzZWFyY2hUb2tlbnM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHZhbHVlc1RvU2VhcmNoSW4gPSBbaXRlbS5vcHRpb24udGl0bGUsIGxpc3QuY29kZUlzU2lnbmlmaWNhbnQgPyBpdGVtLm9wdGlvbi5jb2RlIDogJyddO1xuICAgICAgICB2YWx1ZXNUb1NlYXJjaEluLmZpbHRlcih2YWwgPT4gISF2YWwpO1xuICAgICAgICByZXR1cm4gc2VhcmNoVG9rZW5zLmV2ZXJ5KHRva2VuID0+IHZhbHVlc1RvU2VhcmNoSW4uc29tZSh2YWx1ZSA9PiB2YWx1ZS50b0xvY2FsZUxvd2VyQ2FzZSgpLmluZGV4T2YodG9rZW4pID4gLTEpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNvcnRGdW5jPFQgZXh0ZW5kcyBTZWxlY3RMaXN0T3B0aW9uPihsaXN0OiBGaWx0ZXJhYmxlU2VsZWN0TGlzdDxUPik6IChhOiBhbnksIGI6IGFueSkgPT4gbnVtYmVyIHtcbiAgICAgICAgY29uc3Qgc29ydEZpZWxkID0gbGlzdC5jb2RlSXNTaWduaWZpY2FudCA/ICdjb2RlJyA6ICd0aXRsZSc7XG4gICAgICAgIHJldHVybiAoYSwgYikgPT4gYS5vcHRpb25bc29ydEZpZWxkXS5sb2NhbGVDb21wYXJlKGIub3B0aW9uW3NvcnRGaWVsZF0pICogKGxpc3Quc29ydCA9PT0gXCJhc2NcIiA/IC0xIDogMSk7XG4gICAgfVxufVxuIl19