/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WorkTrackerService } from '../../shared/work-tracker.service';
import { PicklistFilterService } from './picklist-filter.service';
import { PicklistValuesetMovingService } from './picklist-valueset-moving.service';
import { PicklistFilterLocalService } from './picklist-filter-local.service';
import { PicklistStateService } from './picklist-state.service';
import { PicklistValueOptions, ValueListOption } from '../pane/picklist-pane.model';
/**
 * Handles loading + moving items to/from list
 */
export class PicklistService {
    /**
     * @param {?} workTracker
     * @param {?} filterService
     * @param {?} localFilterService
     * @param {?} valuesetMovingService
     * @param {?} stateService
     */
    constructor(workTracker, filterService, localFilterService, valuesetMovingService, stateService) {
        this.workTracker = workTracker;
        this.filterService = filterService;
        this.localFilterService = localFilterService;
        this.valuesetMovingService = valuesetMovingService;
        this.stateService = stateService;
    }
    /**
     * @return {?}
     */
    get pane() {
        return this.stateService.pane;
    }
    /**
     * @return {?}
     */
    get picklist() {
        return this.stateService.picklist;
    }
    /**
     * @return {?}
     */
    get optionsSource() {
        return this.stateService.optionsSource;
    }
    /**
     * @return {?}
     */
    get valueList() {
        return this.stateService.valueList;
    }
    /**
     * @return {?}
     */
    get valueSetList() {
        return this.stateService.valueSetList;
    }
    /**
     * @return {?}
     */
    get totalValuesCount() {
        return this.valueList.options.size + this.valueList.additionalRemoteOptions;
    }
    /**
     * @return {?}
     */
    get totalValueSetsCount() {
        return this.valueSetList.options.size + this.valueSetList.additionalRemoteOptions;
    }
    /**
     * @param {?} settings
     * @param {?} optionsSource
     * @param {?} pane
     * @return {?}
     */
    reset(settings, optionsSource, pane) {
        this.stateService.reset(settings, optionsSource, pane);
        this.filterService.reset();
        if (this.optionsSource.optionsAreLocal()) {
            this.stateService.updateValueList(this.optionsSource.values);
            this.stateService.updateValueSetList(this.optionsSource.valueSets);
            this.localFilterService.filter(this.valueList, this.filterService.searchTokens);
            this.localFilterService.filter(this.valueSetList, this.filterService.searchTokens);
        }
        else {
            /** @type {?} */
            const loading$ = this.workTracker.startObservable((/**
             * @return {?}
             */
            () => this.filterService.filterOptionsRemote()));
            this.valueList.loadingOptions = loading$;
            this.valueSetList.loadingOptions = loading$;
        }
    }
    /**
     * @param {?} listOptions
     * @return {?}
     */
    addOptions(listOptions) {
        if (!this.optionsSource.optionsAreLocal()) {
            this.filterService.preFilterOptionsForRemoteMode(listOptions.values, this.valueList);
            this.filterService.preFilterOptionsForRemoteMode(listOptions.valueSets, this.valueSetList);
        }
        listOptions.values.forEach((/**
         * @param {?} o
         * @return {?}
         */
        o => {
            this.valueList.options.set(o.code, o);
        }));
        listOptions.valueSets.forEach((/**
         * @param {?} o
         * @return {?}
         */
        o => {
            this.valueSetList.options.set(o.code, o);
        }));
        this.localFilterService.filter(this.valueList, this.filterService.searchTokens);
        this.localFilterService.filter(this.valueSetList, this.filterService.searchTokens);
        this.pane.selectNone();
    }
    /**
     * @param {?=} shouldBreakValuesets
     * @return {?}
     */
    moveOutSelectedOptions(shouldBreakValuesets = false) {
        /** @type {?} */
        let optionsToMove = new PicklistValueOptions();
        this.valueList.selectedOptions.forEach((/**
         * @param {?} o
         * @return {?}
         */
        o => {
            optionsToMove.values.set(o.code, o);
            this.valueList.options.delete(o.code);
        }));
        this.valuesetMovingService.moveOutValuesets(optionsToMove, this.pane, shouldBreakValuesets);
        this.localFilterService.filter(this.valueList, this.filterService.searchTokens);
        this.localFilterService.filter(this.valueSetList, this.filterService.searchTokens);
        this.pane.selectNone();
        return optionsToMove;
    }
    /**
     * @param {?} valueset
     * @return {?}
     */
    loadValuesForValueset(valueset) {
        valueset.loadingValues = true;
        if (!this.optionsSource.getValuesForValueset) {
            return;
        }
        this.optionsSource.getValuesForValueset(valueset.option.code).subscribe((/**
         * @param {?} values
         * @return {?}
         */
        values => {
            valueset.subValuesSelectList.filteredOptions.length = 0;
            values.forEach((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                valueset.subValuesSelectList.filteredOptions.push(new ValueListOption(v, v.code));
            }));
        }), (/**
         * @return {?}
         */
        () => {
            console.warn('Unable to load values for valueset');
            valueset.showValues = false;
        }), (/**
         * @return {?}
         */
        () => {
            valueset.loadingValues = false;
        }));
    }
}
PicklistService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PicklistService.ctorParameters = () => [
    { type: WorkTrackerService },
    { type: PicklistFilterService },
    { type: PicklistFilterLocalService },
    { type: PicklistValuesetMovingService },
    { type: PicklistStateService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.workTracker;
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.localFilterService;
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.valuesetMovingService;
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.stateService;
}
//# sourceMappingURL=data:application/json;base64,