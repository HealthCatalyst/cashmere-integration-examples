/**
 * @fileoverview added by tsickle
 * Generated from: lib/scroll-nav/nav/scroll-nav-link.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, ElementRef, Input, HostListener } from '@angular/core';
/**
 * Marks the host element as a link within an `hc-scroll-nav`.
 */
export class ScrollNavLinkDirective {
    /**
     * @param {?} _el
     */
    constructor(_el) {
        this._el = _el;
        this._hostClass = true;
    }
    /**
     * @return {?}
     */
    _onClick() {
        this.navigateToSection(this.hcScrollLink);
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    navigateToSection(id) {
        /** @type {?} */
        const el = document.getElementById(id);
        if (!el) {
            throw new Error(`Failed to navigate. Could not find the element with the id: ${id}.`);
        }
        else {
            el.scrollIntoView();
        }
    }
}
ScrollNavLinkDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hcScrollLink]'
            },] }
];
/** @nocollapse */
ScrollNavLinkDirective.ctorParameters = () => [
    { type: ElementRef }
];
ScrollNavLinkDirective.propDecorators = {
    hcScrollLink: [{ type: Input }],
    _hostClass: [{ type: HostBinding, args: ['class.hc-scroll-nav-link',] }],
    _onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /**
     * The `id` of the corresponding `hcScrollTarget` that you would like to link to.
     * @type {?}
     */
    ScrollNavLinkDirective.prototype.hcScrollLink;
    /** @type {?} */
    ScrollNavLinkDirective.prototype._hostClass;
    /** @type {?} */
    ScrollNavLinkDirective.prototype._el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLW5hdi1saW5rLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9zY3JvbGwtbmF2L25hdi9zY3JvbGwtbmF2LWxpbmsuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7QUFNdEYsTUFBTSxPQUFPLHNCQUFzQjs7OztJQU0vQixZQUFtQixHQUFlO1FBQWYsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUZsQyxlQUFVLEdBQUcsSUFBSSxDQUFDO0lBRW1CLENBQUM7Ozs7SUFFZixRQUFRO1FBQzNCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7O0lBRU8saUJBQWlCLENBQUMsRUFBVTs7Y0FDMUIsRUFBRSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLCtEQUErRCxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3pGO2FBQU07WUFDSCxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7SUFDTCxDQUFDOzs7WUF0QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxnQkFBZ0I7YUFDN0I7Ozs7WUFMK0IsVUFBVTs7OzJCQVFyQyxLQUFLO3lCQUNMLFdBQVcsU0FBQywwQkFBMEI7dUJBS3RDLFlBQVksU0FBQyxPQUFPOzs7Ozs7O0lBTnJCLDhDQUFxQzs7SUFDckMsNENBQ2tCOztJQUVOLHFDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgRWxlbWVudFJlZiwgSW5wdXQsIEhvc3RMaXN0ZW5lcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBNYXJrcyB0aGUgaG9zdCBlbGVtZW50IGFzIGEgbGluayB3aXRoaW4gYW4gYGhjLXNjcm9sbC1uYXZgLiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaGNTY3JvbGxMaW5rXSdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsTmF2TGlua0RpcmVjdGl2ZSB7XG4gICAgLyoqIFRoZSBgaWRgIG9mIHRoZSBjb3JyZXNwb25kaW5nIGBoY1Njcm9sbFRhcmdldGAgdGhhdCB5b3Ugd291bGQgbGlrZSB0byBsaW5rIHRvLiAqL1xuICAgIEBJbnB1dCgpIHB1YmxpYyBoY1Njcm9sbExpbms6IHN0cmluZztcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmhjLXNjcm9sbC1uYXYtbGluaycpXG4gICAgX2hvc3RDbGFzcyA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgX2VsOiBFbGVtZW50UmVmKSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBfb25DbGljaygpIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvU2VjdGlvbih0aGlzLmhjU2Nyb2xsTGluayk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBuYXZpZ2F0ZVRvU2VjdGlvbihpZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBuYXZpZ2F0ZS4gQ291bGQgbm90IGZpbmQgdGhlIGVsZW1lbnQgd2l0aCB0aGUgaWQ6ICR7aWR9LmApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==