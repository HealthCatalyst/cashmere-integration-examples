/**
 * @fileoverview added by tsickle
 * Generated from: lib/scroll-nav/nav/scroll-nav.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, ViewEncapsulation, QueryList, ContentChildren } from '@angular/core';
import { ScrollNavLinkDirective } from './scroll-nav-link.directive';
/**
 * Container for scroll navigation links.
 */
export class HcScrollNavComponent {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.ACTIVE_CLASS = 'hc-scroll-nav-link-active';
    }
    /**
     * @return {?}
     */
    get _links() {
        return this.linkList.toArray().map((/**
         * @param {?} e
         * @return {?}
         */
        e => e._el.nativeElement));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._links && this._links[0]) {
            this._links[0].classList.add(this.ACTIVE_CLASS);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    _setActiveClassById(id) {
        /** @type {?} */
        const link = this.linkList.find((/**
         * @param {?} e
         * @return {?}
         */
        e => e.hcScrollLink === id));
        if (!link) {
            throw new Error(`Failed to mark active class. Could not find the element with the data target for id: ${id}.`);
        }
        this.setActiveClass(link._el.nativeElement);
    }
    /**
     * @private
     * @param {?} element
     * @return {?}
     */
    setActiveClass(element) {
        this._links.forEach((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            e.classList.remove(this.ACTIVE_CLASS);
        }));
        element.classList.add(this.ACTIVE_CLASS);
    }
}
HcScrollNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-scroll-nav',
                encapsulation: ViewEncapsulation.None,
                template: "<div class=\"hc-scroll-nav-links-container\">\n  <ng-content></ng-content>\n</div>",
                styles: [".hc-scroll-nav-links-container{margin-right:30px}.hc-scroll-nav-links-container ul{list-style:none}.hc-scroll-nav-link{font-size:1rem;background-color:transparent;color:#333;cursor:pointer;font-weight:500;padding:10px 15px}.hc-scroll-nav-link:hover{background-color:rgba(215,221,228,.25)}.hc-scroll-nav-link:active{background-color:rgba(215,221,228,.5)}.hc-scroll-nav-link-active,.hc-scroll-nav-link-active:hover{background-color:#00aeff;color:#fff;font-weight:500}"]
            }] }
];
/** @nocollapse */
HcScrollNavComponent.ctorParameters = () => [
    { type: ElementRef }
];
HcScrollNavComponent.propDecorators = {
    linkList: [{ type: ContentChildren, args: [ScrollNavLinkDirective,] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcScrollNavComponent.prototype.linkList;
    /**
     * @type {?}
     * @private
     */
    HcScrollNavComponent.prototype.ACTIVE_CLASS;
    /** @type {?} */
    HcScrollNavComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLW5hdi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvc2Nyb2xsLW5hdi9uYXYvc2Nyb2xsLW5hdi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBaUIsU0FBUyxFQUFFLGVBQWUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7OztBQVNuRSxNQUFNLE9BQU8sb0JBQW9COzs7O0lBTzdCLFlBQW1CLFdBQXVCO1FBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBRnpCLGlCQUFZLEdBQUcsMkJBQTJCLENBQUM7SUFFZixDQUFDOzs7O0lBTDlDLElBQVcsTUFBTTtRQUNiLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7SUFLTSxlQUFlO1FBQ2xCLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDbkQ7SUFDTCxDQUFDOzs7OztJQUVNLG1CQUFtQixDQUFDLEVBQVU7O2NBQzNCLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLEtBQUssRUFBRSxFQUFDO1FBQzNELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxNQUFNLElBQUksS0FBSyxDQUFDLHdGQUF3RixFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2xIO1FBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7OztJQUVPLGNBQWMsQ0FBQyxPQUFvQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLENBQUMsRUFBRTtZQUNwQixDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7O1lBbENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBRXJDLDhGQUF3Qzs7YUFDM0M7Ozs7WUFUa0IsVUFBVTs7O3VCQVd4QixlQUFlLFNBQUMsc0JBQXNCOzs7Ozs7O0lBQXZDLHdDQUE2Rjs7Ozs7SUFJN0YsNENBQTREOztJQUVoRCwyQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgVmlld0VuY2Fwc3VsYXRpb24sIEFmdGVyVmlld0luaXQsIFF1ZXJ5TGlzdCwgQ29udGVudENoaWxkcmVufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U2Nyb2xsTmF2TGlua0RpcmVjdGl2ZX0gZnJvbSAnLi9zY3JvbGwtbmF2LWxpbmsuZGlyZWN0aXZlJztcblxuLyoqIENvbnRhaW5lciBmb3Igc2Nyb2xsIG5hdmlnYXRpb24gbGlua3MuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2hjLXNjcm9sbC1uYXYnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgc3R5bGVVcmxzOiBbJ3Njcm9sbC1uYXYuY29tcG9uZW50LnNjc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJ3Njcm9sbC1uYXYuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEhjU2Nyb2xsTmF2Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgQENvbnRlbnRDaGlsZHJlbihTY3JvbGxOYXZMaW5rRGlyZWN0aXZlKSBwcml2YXRlIGxpbmtMaXN0OiBRdWVyeUxpc3Q8U2Nyb2xsTmF2TGlua0RpcmVjdGl2ZT47XG4gICAgcHVibGljIGdldCBfbGlua3MoKTogQXJyYXk8SFRNTEVsZW1lbnQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlua0xpc3QudG9BcnJheSgpLm1hcChlID0+IGUuX2VsLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgICBwcml2YXRlIHJlYWRvbmx5IEFDVElWRV9DTEFTUyA9ICdoYy1zY3JvbGwtbmF2LWxpbmstYWN0aXZlJztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9saW5rcyAmJiB0aGlzLl9saW5rc1swXSkge1xuICAgICAgICAgICAgdGhpcy5fbGlua3NbMF0uY2xhc3NMaXN0LmFkZCh0aGlzLkFDVElWRV9DTEFTUyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgX3NldEFjdGl2ZUNsYXNzQnlJZChpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSB0aGlzLmxpbmtMaXN0LmZpbmQoZSA9PiBlLmhjU2Nyb2xsTGluayA9PT0gaWQpO1xuICAgICAgICBpZiAoIWxpbmspIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIG1hcmsgYWN0aXZlIGNsYXNzLiBDb3VsZCBub3QgZmluZCB0aGUgZWxlbWVudCB3aXRoIHRoZSBkYXRhIHRhcmdldCBmb3IgaWQ6ICR7aWR9LmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlQ2xhc3MobGluay5fZWwubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRBY3RpdmVDbGFzcyhlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9saW5rcy5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgZS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQUNUSVZFX0NMQVNTKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLkFDVElWRV9DTEFTUyk7XG4gICAgfVxufVxuIl19