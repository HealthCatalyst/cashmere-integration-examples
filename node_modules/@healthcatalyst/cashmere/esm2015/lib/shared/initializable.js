/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/initializable.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs';
/**
 * Abstract class for common initialization functionality
 * @abstract
 */
export class Initializable {
    constructor() {
        /**
         * Whether this directive has been marked as initialized.
         */
        this._isInitialized = false;
        /**
         * List of subscribers that subscribed before the directive was initialized. Should be notified
         * during _markInitialized. Set to null after pending subscribers are notified, and should
         * not expect to be populated after.
         */
        this._pendingSubscribers = [];
        /**
         * Observable stream that emits when the directive initializes. If already initialized, the
         * subscriber is stored to be notified once _markInitialized is called.
         * \@docs-private
         */
        this.initialized = new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify
            // when _markInitialized is called.
            if (this._isInitialized) {
                this._notifySubscriber(subscriber);
            }
            else {
                (/** @type {?} */ (this._pendingSubscribers)).push(subscriber);
            }
        }));
    }
    /**
     * Marks the state as initialized and notifies pending subscribers. Should be called at the end
     * of ngOnInit.
     * \@docs-private
     * @return {?}
     */
    _markInitialized() {
        if (this._isInitialized) {
            throw Error('This directive has already been marked as initialized and should not be called twice.');
        }
        this._isInitialized = true;
        (/** @type {?} */ (this._pendingSubscribers)).forEach(this._notifySubscriber);
        this._pendingSubscribers = null;
    }
    /**
     * Emits and completes the subscriber stream (should only emit once).
     * @param {?} subscriber
     * @return {?}
     */
    _notifySubscriber(subscriber) {
        subscriber.next();
        subscriber.complete();
    }
}
if (false) {
    /**
     * Whether this directive has been marked as initialized.
     * @type {?}
     */
    Initializable.prototype._isInitialized;
    /**
     * List of subscribers that subscribed before the directive was initialized. Should be notified
     * during _markInitialized. Set to null after pending subscribers are notified, and should
     * not expect to be populated after.
     * @type {?}
     */
    Initializable.prototype._pendingSubscribers;
    /**
     * Observable stream that emits when the directive initializes. If already initialized, the
     * subscriber is stored to be notified once _markInitialized is called.
     * \@docs-private
     * @type {?}
     */
    Initializable.prototype.initialized;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGl6YWJsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZWQvaW5pdGlhbGl6YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBYSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7Ozs7O0FBRzVDLE1BQU0sT0FBZ0IsYUFBYTtJQUFuQzs7OztRQUVJLG1CQUFjLEdBQUcsS0FBSyxDQUFDOzs7Ozs7UUFPdkIsd0JBQW1CLEdBQStCLEVBQUUsQ0FBQzs7Ozs7O1FBT3JELGdCQUFXLEdBQUcsSUFBSSxVQUFVOzs7O1FBQVEsVUFBVSxDQUFDLEVBQUU7WUFDN0MsOEZBQThGO1lBQzlGLG1DQUFtQztZQUNuQyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUN0QztpQkFBTTtnQkFDSCxtQkFBQSxJQUFJLENBQUMsbUJBQW1CLEVBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDOUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQXVCUCxDQUFDOzs7Ozs7O0lBaEJHLGdCQUFnQjtRQUNaLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNyQixNQUFNLEtBQUssQ0FBQyx1RkFBdUYsQ0FBQyxDQUFDO1NBQ3hHO1FBRUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFFM0IsbUJBQUEsSUFBSSxDQUFDLG1CQUFtQixFQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7SUFDcEMsQ0FBQzs7Ozs7O0lBR0QsaUJBQWlCLENBQUMsVUFBNkI7UUFDM0MsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2xCLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQ0o7Ozs7OztJQTdDRyx1Q0FBdUI7Ozs7Ozs7SUFPdkIsNENBQXFEOzs7Ozs7O0lBT3JELG9DQVFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdWJzY3JpYmVyLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuLyoqIEFic3RyYWN0IGNsYXNzIGZvciBjb21tb24gaW5pdGlhbGl6YXRpb24gZnVuY3Rpb25hbGl0eSAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEluaXRpYWxpemFibGUge1xuICAgIC8qKiBXaGV0aGVyIHRoaXMgZGlyZWN0aXZlIGhhcyBiZWVuIG1hcmtlZCBhcyBpbml0aWFsaXplZC4gKi9cbiAgICBfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBzdWJzY3JpYmVycyB0aGF0IHN1YnNjcmliZWQgYmVmb3JlIHRoZSBkaXJlY3RpdmUgd2FzIGluaXRpYWxpemVkLiBTaG91bGQgYmUgbm90aWZpZWRcbiAgICAgKiBkdXJpbmcgX21hcmtJbml0aWFsaXplZC4gU2V0IHRvIG51bGwgYWZ0ZXIgcGVuZGluZyBzdWJzY3JpYmVycyBhcmUgbm90aWZpZWQsIGFuZCBzaG91bGRcbiAgICAgKiBub3QgZXhwZWN0IHRvIGJlIHBvcHVsYXRlZCBhZnRlci5cbiAgICAgKi9cbiAgICBfcGVuZGluZ1N1YnNjcmliZXJzOiBTdWJzY3JpYmVyPG5ldmVyPltdIHwgbnVsbCA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSBzdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRoZSBkaXJlY3RpdmUgaW5pdGlhbGl6ZXMuIElmIGFscmVhZHkgaW5pdGlhbGl6ZWQsIHRoZVxuICAgICAqIHN1YnNjcmliZXIgaXMgc3RvcmVkIHRvIGJlIG5vdGlmaWVkIG9uY2UgX21hcmtJbml0aWFsaXplZCBpcyBjYWxsZWQuXG4gICAgICogQGRvY3MtcHJpdmF0ZVxuICAgICAqL1xuICAgIGluaXRpYWxpemVkID0gbmV3IE9ic2VydmFibGU8bmV2ZXI+KHN1YnNjcmliZXIgPT4ge1xuICAgICAgICAvLyBJZiBpbml0aWFsaXplZCwgaW1tZWRpYXRlbHkgbm90aWZ5IHRoZSBzdWJzY3JpYmVyLiBPdGhlcndpc2Ugc3RvcmUgdGhlIHN1YnNjcmliZXIgdG8gbm90aWZ5XG4gICAgICAgIC8vIHdoZW4gX21hcmtJbml0aWFsaXplZCBpcyBjYWxsZWQuXG4gICAgICAgIGlmICh0aGlzLl9pc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnlTdWJzY3JpYmVyKHN1YnNjcmliZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1N1YnNjcmliZXJzIS5wdXNoKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBNYXJrcyB0aGUgc3RhdGUgYXMgaW5pdGlhbGl6ZWQgYW5kIG5vdGlmaWVzIHBlbmRpbmcgc3Vic2NyaWJlcnMuIFNob3VsZCBiZSBjYWxsZWQgYXQgdGhlIGVuZFxuICAgICAqIG9mIG5nT25Jbml0LlxuICAgICAqIEBkb2NzLXByaXZhdGVcbiAgICAgKi9cbiAgICBfbWFya0luaXRpYWxpemVkKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5faXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1RoaXMgZGlyZWN0aXZlIGhhcyBhbHJlYWR5IGJlZW4gbWFya2VkIGFzIGluaXRpYWxpemVkIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCB0d2ljZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX3BlbmRpbmdTdWJzY3JpYmVycyEuZm9yRWFjaCh0aGlzLl9ub3RpZnlTdWJzY3JpYmVyKTtcbiAgICAgICAgdGhpcy5fcGVuZGluZ1N1YnNjcmliZXJzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKiogRW1pdHMgYW5kIGNvbXBsZXRlcyB0aGUgc3Vic2NyaWJlciBzdHJlYW0gKHNob3VsZCBvbmx5IGVtaXQgb25jZSkuICovXG4gICAgX25vdGlmeVN1YnNjcmliZXIoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxuZXZlcj4pOiB2b2lkIHtcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KCk7XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9XG59XG4iXX0=