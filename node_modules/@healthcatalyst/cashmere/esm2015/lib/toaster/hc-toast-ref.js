/**
 * @fileoverview added by tsickle
 * Generated from: lib/toaster/hc-toast-ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { Input } from '@angular/core';
export class HcToastRef {
    /**
     * @param {?} _overlayRef
     */
    constructor(_overlayRef) {
        this._overlayRef = _overlayRef;
        this._beforeClose = new Subject();
        this._afterClosed = new Subject();
    }
    /**
     * If the `hasProgressBar` option is set to true in `hc-toast-options`, this 0-100 value can
     * be used to make it a determinate progress bar. If the progress bar is on but a value is not set,
     * the progress bar will be indeterminate.
     * @return {?}
     */
    get progress() {
        return this.componentInstance._progressVal;
    }
    /**
     * @param {?} progVal
     * @return {?}
     */
    set progress(progVal) {
        if (progVal < 0) {
            progVal = 0;
        }
        else if (progVal > 100) {
            progVal = 100;
        }
        this.componentInstance._progressVal = progVal;
        this.componentInstance._progressWidth = progVal + '%';
    }
    /**
     * Closes the associated toast message with this reference
     * @return {?}
     */
    close() {
        if (this.componentInstance._animationState !== 'leave') {
            this.componentInstance._animationStateChanged
                .pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            event => event.phaseName === 'start')), take(1))
                .subscribe((/**
             * @return {?}
             */
            () => {
                this._beforeClose.next();
                this._beforeClose.complete();
            }));
            this.componentInstance._animationStateChanged
                .pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            event => event.phaseName === 'done' && event.toState === 'leave')), take(1))
                .subscribe((/**
             * @return {?}
             */
            () => {
                this._overlayRef.dispose();
                this._afterClosed.next();
                this._afterClosed.complete();
                this.componentInstance._componentInstance.unsubscribe();
                this.componentInstance = (/** @type {?} */ (null));
            }));
            this.componentInstance._startExitAnimation();
        }
    }
}
HcToastRef.propDecorators = {
    progress: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcToastRef.prototype._beforeClose;
    /**
     * @type {?}
     * @private
     */
    HcToastRef.prototype._afterClosed;
    /** @type {?} */
    HcToastRef.prototype._toastPosition;
    /**
     * The HcToast component associated with the toast reference
     * @type {?}
     */
    HcToastRef.prototype.componentInstance;
    /** @type {?} */
    HcToastRef.prototype._overlayRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGMtdG9hc3QtcmVmLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL3RvYXN0ZXIvaGMtdG9hc3QtcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFcEMsTUFBTSxPQUFPLFVBQVU7Ozs7SUEyQm5CLFlBQW1CLFdBQXVCO1FBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBMUJsQyxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDbkMsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBeUJFLENBQUM7Ozs7Ozs7SUFmOUMsSUFDSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDO0lBQy9DLENBQUM7Ozs7O0lBRUQsSUFBSSxRQUFRLENBQUMsT0FBZTtRQUN4QixJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDYixPQUFPLEdBQUcsQ0FBQyxDQUFDO1NBQ2Y7YUFBTSxJQUFJLE9BQU8sR0FBRyxHQUFHLEVBQUU7WUFDdEIsT0FBTyxHQUFHLEdBQUcsQ0FBQztTQUNqQjtRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1FBQzlDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLEdBQUcsT0FBTyxHQUFHLEdBQUcsQ0FBQztJQUMxRCxDQUFDOzs7OztJQUtELEtBQUs7UUFDRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEtBQUssT0FBTyxFQUFFO1lBQ3BELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxzQkFBc0I7aUJBQ3hDLElBQUksQ0FDRCxNQUFNOzs7O1lBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxLQUFLLE9BQU8sRUFBQyxFQUM1QyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1Y7aUJBQ0EsU0FBUzs7O1lBQUMsR0FBRyxFQUFFO2dCQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7WUFFUCxJQUFJLENBQUMsaUJBQWlCLENBQUMsc0JBQXNCO2lCQUN4QyxJQUFJLENBQ0QsTUFBTTs7OztZQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsS0FBSyxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUMsRUFDeEUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNWO2lCQUNBLFNBQVM7OztZQUFDLEdBQUcsRUFBRTtnQkFDWixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN6QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUM3QixJQUFJLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxtQkFBQSxJQUFJLEVBQUMsQ0FBQztZQUNuQyxDQUFDLEVBQUMsQ0FBQztZQUVQLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQzs7O3VCQTdDQSxLQUFLOzs7Ozs7O0lBWE4sa0NBQTJDOzs7OztJQUMzQyxrQ0FBMkM7O0lBRTNDLG9DQUF1Qjs7Ozs7SUFHdkIsdUNBQW9DOztJQW9CeEIsaUNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPdmVybGF5UmVmfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQge0hjVG9hc3RDb21wb25lbnR9IGZyb20gJy4vaGMtdG9hc3QuY29tcG9uZW50JztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgdGFrZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBIY1RvYXN0UmVmIHtcbiAgICBwcml2YXRlIF9iZWZvcmVDbG9zZSA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gICAgcHJpdmF0ZSBfYWZ0ZXJDbG9zZWQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgX3RvYXN0UG9zaXRpb246IHN0cmluZztcblxuICAgIC8qKiBUaGUgSGNUb2FzdCBjb21wb25lbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSB0b2FzdCByZWZlcmVuY2UgKi9cbiAgICBjb21wb25lbnRJbnN0YW5jZTogSGNUb2FzdENvbXBvbmVudDtcblxuICAgIC8qKiBJZiB0aGUgYGhhc1Byb2dyZXNzQmFyYCBvcHRpb24gaXMgc2V0IHRvIHRydWUgaW4gYGhjLXRvYXN0LW9wdGlvbnNgLCB0aGlzIDAtMTAwIHZhbHVlIGNhblxuICAgICAqIGJlIHVzZWQgdG8gbWFrZSBpdCBhIGRldGVybWluYXRlIHByb2dyZXNzIGJhci4gSWYgdGhlIHByb2dyZXNzIGJhciBpcyBvbiBidXQgYSB2YWx1ZSBpcyBub3Qgc2V0LFxuICAgICAqIHRoZSBwcm9ncmVzcyBiYXIgd2lsbCBiZSBpbmRldGVybWluYXRlLiovXG4gICAgQElucHV0KClcbiAgICBnZXQgcHJvZ3Jlc3MoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2UuX3Byb2dyZXNzVmFsO1xuICAgIH1cblxuICAgIHNldCBwcm9ncmVzcyhwcm9nVmFsOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHByb2dWYWwgPCAwKSB7XG4gICAgICAgICAgICBwcm9nVmFsID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9nVmFsID4gMTAwKSB7XG4gICAgICAgICAgICBwcm9nVmFsID0gMTAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29tcG9uZW50SW5zdGFuY2UuX3Byb2dyZXNzVmFsID0gcHJvZ1ZhbDtcbiAgICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZS5fcHJvZ3Jlc3NXaWR0aCA9IHByb2dWYWwgKyAnJSc7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHVibGljIF9vdmVybGF5UmVmOiBPdmVybGF5UmVmKSB7fVxuXG4gICAgLyoqIENsb3NlcyB0aGUgYXNzb2NpYXRlZCB0b2FzdCBtZXNzYWdlIHdpdGggdGhpcyByZWZlcmVuY2UgKi9cbiAgICBjbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50SW5zdGFuY2UuX2FuaW1hdGlvblN0YXRlICE9PSAnbGVhdmUnKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudEluc3RhbmNlLl9hbmltYXRpb25TdGF0ZUNoYW5nZWRcbiAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyKGV2ZW50ID0+IGV2ZW50LnBoYXNlTmFtZSA9PT0gJ3N0YXJ0JyksXG4gICAgICAgICAgICAgICAgICAgIHRha2UoMSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JlZm9yZUNsb3NlLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmVmb3JlQ2xvc2UuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZS5fYW5pbWF0aW9uU3RhdGVDaGFuZ2VkXG4gICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcihldmVudCA9PiBldmVudC5waGFzZU5hbWUgPT09ICdkb25lJyAmJiBldmVudC50b1N0YXRlID09PSAnbGVhdmUnKSxcbiAgICAgICAgICAgICAgICAgICAgdGFrZSgxKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3ZlcmxheVJlZi5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWZ0ZXJDbG9zZWQuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZS5fY29tcG9uZW50SW5zdGFuY2UudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IG51bGwhO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudEluc3RhbmNlLl9zdGFydEV4aXRBbmltYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==