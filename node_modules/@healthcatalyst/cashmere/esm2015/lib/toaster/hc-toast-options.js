/**
 * @fileoverview added by tsickle
 * Generated from: lib/toaster/hc-toast-options.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function HcToastOptions() { }
if (false) {
    /**
     * A string of header text to be included in the toast message.
     * @type {?|undefined}
     */
    HcToastOptions.prototype.header;
    /**
     * The body text to be displayed in the toast message.
     * @type {?|undefined}
     */
    HcToastOptions.prototype.body;
    /**
     * Sets the background color of the toast. Defaults to success.
     * Options are: `success`, `info`, `warning`, `alert`, `custom`
     * @type {?|undefined}
     */
    HcToastOptions.prototype.type;
    /**
     * Position and sizing of the toaster message. Defaults to bottom-right.
     * Options are: `top-right`, `top-center`, `top-left`, `top-full-width`,
     * `bottom-right`, `bottom-center`, `bottom-left`, `bottom-full-width`.
     * @type {?|undefined}
     */
    HcToastOptions.prototype.position;
    /**
     * Timeout value in milliseconds sets the amount of time the toast is displayed.
     *  Defaults to 5000. A value of 0 means the toast will not auto-dismiss.
     * @type {?|undefined}
     */
    HcToastOptions.prototype.timeout;
    /**
     * When set to true, the user may click the Toast to dismiss it and a close icon is added
     * to the right side for standard types. Defaults to false.
     * @type {?|undefined}
     */
    HcToastOptions.prototype.clickDismiss;
    /**
     * Function to be called when the toast is closed
     * @type {?|undefined}
     */
    HcToastOptions.prototype.toastClosed;
    /**
     * Width of the toast in pixels. Minimum is 300px. Or, pass in 0 for an unconstrained width. Defaults to 300px.
     * @type {?|undefined}
     */
    HcToastOptions.prototype.width;
    /**
     * When set to true, a progress bar is added to the bottom of the toast. The default is false.
     * There is a corresponding 0-100 `progress` value on the `hc-toast-ref` that may be set to make this a determinate progress bar.
     * If a `progress` value is not set, the progress bar will be indeterminate.
     * @type {?|undefined}
     */
    HcToastOptions.prototype.hasProgressBar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGMtdG9hc3Qtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi90b2FzdGVyL2hjLXRvYXN0LW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxvQ0EwQkM7Ozs7OztJQXhCRyxnQ0FBZ0I7Ozs7O0lBRWhCLDhCQUFjOzs7Ozs7SUFHZCw4QkFBYzs7Ozs7OztJQUlkLGtDQUFrQjs7Ozs7O0lBR2xCLGlDQUFpQjs7Ozs7O0lBR2pCLHNDQUF1Qjs7Ozs7SUFFdkIscUNBQXVCOzs7OztJQUV2QiwrQkFBZTs7Ozs7OztJQUlmLHdDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSGNUb2FzdE9wdGlvbnMge1xuICAgIC8qKiBBIHN0cmluZyBvZiBoZWFkZXIgdGV4dCB0byBiZSBpbmNsdWRlZCBpbiB0aGUgdG9hc3QgbWVzc2FnZS4qL1xuICAgIGhlYWRlcj86IHN0cmluZztcbiAgICAvKiogVGhlIGJvZHkgdGV4dCB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIHRvYXN0IG1lc3NhZ2UuKi9cbiAgICBib2R5Pzogc3RyaW5nO1xuICAgIC8qKiBTZXRzIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZSB0b2FzdC4gRGVmYXVsdHMgdG8gc3VjY2Vzcy5cbiAgICAgKiBPcHRpb25zIGFyZTogYHN1Y2Nlc3NgLCBgaW5mb2AsIGB3YXJuaW5nYCwgYGFsZXJ0YCwgYGN1c3RvbWAqL1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgLyoqIFBvc2l0aW9uIGFuZCBzaXppbmcgb2YgdGhlIHRvYXN0ZXIgbWVzc2FnZS4gRGVmYXVsdHMgdG8gYm90dG9tLXJpZ2h0LlxuICAgICAqIE9wdGlvbnMgYXJlOiBgdG9wLXJpZ2h0YCwgYHRvcC1jZW50ZXJgLCBgdG9wLWxlZnRgLCBgdG9wLWZ1bGwtd2lkdGhgLFxuICAgICAqIGBib3R0b20tcmlnaHRgLCBgYm90dG9tLWNlbnRlcmAsIGBib3R0b20tbGVmdGAsIGBib3R0b20tZnVsbC13aWR0aGAuKi9cbiAgICBwb3NpdGlvbj86IHN0cmluZztcbiAgICAvKiogVGltZW91dCB2YWx1ZSBpbiBtaWxsaXNlY29uZHMgc2V0cyB0aGUgYW1vdW50IG9mIHRpbWUgdGhlIHRvYXN0IGlzIGRpc3BsYXllZC5cbiAgICAgKiAgRGVmYXVsdHMgdG8gNTAwMC4gQSB2YWx1ZSBvZiAwIG1lYW5zIHRoZSB0b2FzdCB3aWxsIG5vdCBhdXRvLWRpc21pc3MuKi9cbiAgICB0aW1lb3V0PzogbnVtYmVyO1xuICAgIC8qKiBXaGVuIHNldCB0byB0cnVlLCB0aGUgdXNlciBtYXkgY2xpY2sgdGhlIFRvYXN0IHRvIGRpc21pc3MgaXQgYW5kIGEgY2xvc2UgaWNvbiBpcyBhZGRlZFxuICAgICAqIHRvIHRoZSByaWdodCBzaWRlIGZvciBzdGFuZGFyZCB0eXBlcy4gRGVmYXVsdHMgdG8gZmFsc2UuKi9cbiAgICBjbGlja0Rpc21pc3M/OiBib29sZWFuO1xuICAgIC8qKiBGdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgdG9hc3QgaXMgY2xvc2VkKi9cbiAgICB0b2FzdENsb3NlZD86IEZ1bmN0aW9uO1xuICAgIC8qKiBXaWR0aCBvZiB0aGUgdG9hc3QgaW4gcGl4ZWxzLiBNaW5pbXVtIGlzIDMwMHB4LiBPciwgcGFzcyBpbiAwIGZvciBhbiB1bmNvbnN0cmFpbmVkIHdpZHRoLiBEZWZhdWx0cyB0byAzMDBweC4qL1xuICAgIHdpZHRoPzogbnVtYmVyO1xuICAgIC8qKiBXaGVuIHNldCB0byB0cnVlLCBhIHByb2dyZXNzIGJhciBpcyBhZGRlZCB0byB0aGUgYm90dG9tIG9mIHRoZSB0b2FzdC4gVGhlIGRlZmF1bHQgaXMgZmFsc2UuXG4gICAgICogVGhlcmUgaXMgYSBjb3JyZXNwb25kaW5nIDAtMTAwIGBwcm9ncmVzc2AgdmFsdWUgb24gdGhlIGBoYy10b2FzdC1yZWZgIHRoYXQgbWF5IGJlIHNldCB0byBtYWtlIHRoaXMgYSBkZXRlcm1pbmF0ZSBwcm9ncmVzcyBiYXIuXG4gICAgICogSWYgYSBgcHJvZ3Jlc3NgIHZhbHVlIGlzIG5vdCBzZXQsIHRoZSBwcm9ncmVzcyBiYXIgd2lsbCBiZSBpbmRldGVybWluYXRlLiovXG4gICAgaGFzUHJvZ3Jlc3NCYXI/OiBib29sZWFuO1xufVxuIl19