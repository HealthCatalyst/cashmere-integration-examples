/**
 * @fileoverview added by tsickle
 * Generated from: lib/date-range/calendar-wrapper/calendar-wrapper.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, ChangeDetectionStrategy, ViewEncapsulation, Output, EventEmitter, HostBinding } from '@angular/core';
import { ConfigStoreService } from '../services/config-store.service';
import { CalendarComponent } from '../../datepicker/calendar/calendar.component';
import { DatepickerInputDirective } from '../../datepicker/datepicker-input/datepicker-input.directive';
/**
 * Component combining a calendar and input as a representation of a date
 */
export class CalendarWrapperComponent {
    /**
     * @param {?} configStore
     */
    constructor(configStore) {
        this.configStore = configStore;
        this._hostClass = true;
        /**
         * Emits when selected date has changed.
         */
        this.selectedDateChange = new EventEmitter();
        /**
         * Whether the pickers include the calendar, time selector, or both. Defaults to `date`.
         */
        this.mode = 'date';
        /**
         * Whether the time picker should use a 12 or 24 hour clock. Defaults to 12.
         */
        this.hourCycle = 12;
        this.weekendFilter = (/**
         * @return {?}
         */
        () => true);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // Necessary to force view refresh
        if (changes.selectedDate) {
            /** @type {?} */
            const date = changes.selectedDate.currentValue;
            if (date) {
                this.hcCalendar.activeDate = date;
                this.datePickerInput.setDate(date);
                this.selectedDateChange.emit(date);
            }
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _onCalendarChange(date) {
        this.selectedDateChange.emit(date);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onInputChange(event) {
        if (this.mode === 'time') {
            /** @type {?} */
            let tempVal = event.value ? new Date(1900, 1, 1, event.value.getHours(), event.value.getMinutes()) : new Date(1900, 1, 1);
            /** @type {?} */
            let minVal = this.minDate ? new Date(1900, 1, 1, this.minDate.getHours(), this.minDate.getMinutes()) : new Date(1900, 1, 1);
            /** @type {?} */
            let maxVal = this.maxDate ? new Date(1900, 1, 1, this.maxDate.getHours(), this.maxDate.getMinutes()) : new Date(1900, 1, 2);
            if (tempVal < minVal || tempVal > maxVal) {
                this.selectedDate = undefined;
                this.selectedDateChange.emit(undefined);
            }
            else {
                this.selectedDateChange.emit(event.value || undefined);
            }
        }
        else {
            if (event.value && ((this.minDate && event.value < this.minDate) || (this.maxDate && event.value > this.maxDate))) {
                this.selectedDate = undefined;
                this.selectedDateChange.emit(undefined);
            }
            else {
                this.selectedDateChange.emit(event.value || undefined);
            }
        }
    }
    /**
     * Focus inner input
     * @return {?}
     */
    focusInput() {
        this.datePickerInput.focus();
    }
}
CalendarWrapperComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-calendar-wrapper',
                template: "<div class=\"form-container\">\n    <hc-form-field class=\"hc-calendar-wrapper-form-field\">\n        <hc-label [innerText]=\"prefixLabel\"></hc-label>\n        <input\n            hcInput\n            hcDatepicker\n            [(ngModel)]=\"selectedDate\"\n            required\n            (dateChange)=\"_onInputChange($event)\"\n            [min]=\"minDate\"\n            [max]=\"maxDate\"\n            [_mode]=\"mode\"\n            [_hourCycle]=\"hourCycle\"\n        />\n        <hc-error [innerText]=\"invalidDateLabel\"></hc-error>\n    </hc-form-field>\n</div>\n<hc-calendar\n    [mode]=\"mode\"\n    [hourCycle]=\"hourCycle\"\n    [startAt]=\"selectedDate\"\n    [selected]=\"selectedDate\"\n    [minDate]=\"minDate\"\n    [maxDate]=\"maxDate\"\n    (selectedChange)=\"_onCalendarChange($event)\"\n    [dateFilter]=\"configStore.weekendFilter\"\n>\n</hc-calendar>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".hc-calendar-wrapper-form-field>.hc-form-field-wrapper{height:70px;padding-bottom:0}.hc-calendar-wrapper>.form-container{padding-left:13px}"]
            }] }
];
/** @nocollapse */
CalendarWrapperComponent.ctorParameters = () => [
    { type: ConfigStoreService }
];
CalendarWrapperComponent.propDecorators = {
    _hostClass: [{ type: HostBinding, args: ['class.hc-calendar-wrapper',] }],
    hcCalendar: [{ type: ViewChild, args: [CalendarComponent, { static: true },] }],
    datePickerInput: [{ type: ViewChild, args: [DatepickerInputDirective, { static: true },] }],
    selectedDateChange: [{ type: Output }],
    selectedDate: [{ type: Input }],
    dateFormat: [{ type: Input }],
    mode: [{ type: Input }],
    hourCycle: [{ type: Input }],
    prefixLabel: [{ type: Input }],
    excludeWeekends: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    invalidDateLabel: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CalendarWrapperComponent.prototype._hostClass;
    /** @type {?} */
    CalendarWrapperComponent.prototype.hcCalendar;
    /** @type {?} */
    CalendarWrapperComponent.prototype.datePickerInput;
    /**
     * Emits when selected date has changed.
     * @type {?}
     */
    CalendarWrapperComponent.prototype.selectedDateChange;
    /**
     * Current selected date.
     * @type {?}
     */
    CalendarWrapperComponent.prototype.selectedDate;
    /** @type {?} */
    CalendarWrapperComponent.prototype.dateFormat;
    /**
     * Whether the pickers include the calendar, time selector, or both. Defaults to `date`.
     * @type {?}
     */
    CalendarWrapperComponent.prototype.mode;
    /**
     * Whether the time picker should use a 12 or 24 hour clock. Defaults to 12.
     * @type {?}
     */
    CalendarWrapperComponent.prototype.hourCycle;
    /**
     * Prefix label on top of component.
     * @type {?}
     */
    CalendarWrapperComponent.prototype.prefixLabel;
    /**
     * Flag to filter out weekends.
     * @type {?}
     */
    CalendarWrapperComponent.prototype.excludeWeekends;
    /**
     * The minimum selectable date.
     * @type {?}
     */
    CalendarWrapperComponent.prototype.minDate;
    /**
     * The maximum selectable date.
     * @type {?}
     */
    CalendarWrapperComponent.prototype.maxDate;
    /**
     * Message displayed when a date is invalid.
     * @type {?}
     */
    CalendarWrapperComponent.prototype.invalidDateLabel;
    /** @type {?} */
    CalendarWrapperComponent.prototype.weekendFilter;
    /** @type {?} */
    CalendarWrapperComponent.prototype.configStore;
}
//# sourceMappingURL=data:application/json;base64,