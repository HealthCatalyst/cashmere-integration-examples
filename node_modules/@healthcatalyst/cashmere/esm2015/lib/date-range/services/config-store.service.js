/**
 * @fileoverview added by tsickle
 * Generated from: lib/date-range/services/config-store.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
export class ConfigStoreService {
    constructor() {
        this.defaultOptions = {
            presets: [],
            format: 'medium',
            mode: 'date',
            hourCycle: 12,
            excludeWeekends: false,
            locale: 'en-us',
            applyLabel: 'Apply',
            cancelLabel: 'Cancel',
            startDatePrefix: 'Start date:',
            endDatePrefix: 'End date:',
            invalidDateLabel: 'Please enter valid date'
        };
        this.dateRangeOptionsSubject = new BehaviorSubject(this.defaultOptions);
        this.rangeUpdateSubject = new BehaviorSubject({ fromDate: undefined, toDate: undefined });
        this.presetUpdateSubject = new BehaviorSubject({
            fromDate: undefined,
            toDate: undefined
        });
        this.weekendFilter = (/**
         * @return {?}
         */
        () => true);
        this.emptyWeekendFilter = (/**
         * @return {?}
         */
        () => true);
        this.excludeWeekendFilter = (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            /** @type {?} */
            const day = d.getDay();
            return day !== 0 && day !== 6;
        });
        this.dateRangeOptions$ = this.dateRangeOptionsSubject.pipe(map((/**
         * @param {?} options
         * @return {?}
         */
        (options) => {
            return Object.assign({}, this.defaultOptions, options);
        })), tap((/**
         * @param {?} options
         * @return {?}
         */
        (options) => {
            if (!!options.excludeWeekends) {
                this.weekendFilter = this.excludeWeekendFilter;
            }
            else {
                this.weekendFilter = this.emptyWeekendFilter;
            }
        })));
        this.rangeUpdate$ = this.rangeUpdateSubject.pipe();
        this.presetUpdate$ = this.presetUpdateSubject.pipe();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    updateDateRangeOptions(options) {
        this.dateRangeOptionsSubject.next(options);
    }
    /**
     * @param {?} dateRange
     * @return {?}
     */
    updateRange(dateRange) {
        this.rangeUpdateSubject.next(dateRange);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updatePreset(value) {
        this.presetUpdateSubject.next(value);
    }
}
ConfigStoreService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ConfigStoreService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.defaultOptions;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.dateRangeOptionsSubject;
    /** @type {?} */
    ConfigStoreService.prototype.dateRangeOptions$;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.rangeUpdateSubject;
    /** @type {?} */
    ConfigStoreService.prototype.rangeUpdate$;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.presetUpdateSubject;
    /** @type {?} */
    ConfigStoreService.prototype.presetUpdate$;
    /** @type {?} */
    ConfigStoreService.prototype.weekendFilter;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.emptyWeekendFilter;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.excludeWeekendFilter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXN0b3JlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvZGF0ZS1yYW5nZS9zZXJ2aWNlcy9jb25maWctc3RvcmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFhLGVBQWUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUVqRCxPQUFPLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBR3hDLE1BQU0sT0FBTyxrQkFBa0I7SUFtQzNCO1FBbENRLG1CQUFjLEdBQXFCO1lBQ3ZDLE9BQU8sRUFBRSxFQUFFO1lBQ1gsTUFBTSxFQUFFLFFBQVE7WUFDaEIsSUFBSSxFQUFFLE1BQU07WUFDWixTQUFTLEVBQUUsRUFBRTtZQUNiLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLE1BQU0sRUFBRSxPQUFPO1lBQ2YsVUFBVSxFQUFFLE9BQU87WUFDbkIsV0FBVyxFQUFFLFFBQVE7WUFDckIsZUFBZSxFQUFFLGFBQWE7WUFDOUIsYUFBYSxFQUFFLFdBQVc7WUFDMUIsZ0JBQWdCLEVBQUUseUJBQXlCO1NBQzlDLENBQUM7UUFFTSw0QkFBdUIsR0FBc0MsSUFBSSxlQUFlLENBQW1CLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUd4SCx1QkFBa0IsR0FBK0IsSUFBSSxlQUFlLENBQVksRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO1FBRzFILHdCQUFtQixHQUF3QyxJQUFJLGVBQWUsQ0FBcUI7WUFDdkcsUUFBUSxFQUFFLFNBQVM7WUFDbkIsTUFBTSxFQUFFLFNBQVM7U0FDcEIsQ0FBQyxDQUFDO1FBR0ksa0JBQWE7OztRQUFzQixHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUM7UUFFcEMsdUJBQWtCOzs7UUFBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUM7UUFDaEMseUJBQW9COzs7O1FBQUcsQ0FBQyxDQUFPLEVBQVcsRUFBRTs7a0JBQ25ELEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3RCLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUMsRUFBQztRQUdFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUN0RCxHQUFHOzs7O1FBQUMsQ0FBQyxPQUF5QixFQUFFLEVBQUU7WUFDOUIseUJBQ08sSUFBSSxDQUFDLGNBQWMsRUFDbkIsT0FBTyxFQUNaO1FBQ04sQ0FBQyxFQUFDLEVBQ0YsR0FBRzs7OztRQUFDLENBQUMsT0FBeUIsRUFBRSxFQUFFO1lBQzlCLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDO2FBQ2xEO2lCQUFNO2dCQUNILElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO2FBQ2hEO1FBQ0wsQ0FBQyxFQUFDLENBQ0wsQ0FBQztRQUVGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25ELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pELENBQUM7Ozs7O0lBRUQsc0JBQXNCLENBQUMsT0FBeUI7UUFDNUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxTQUFvQjtRQUM1QixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLEtBQXlCO1FBQ2xDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQzs7O1lBbkVKLFVBQVU7Ozs7Ozs7OztJQUVQLDRDQVlFOzs7OztJQUVGLHFEQUFnSTs7SUFDaEksK0NBQXVEOzs7OztJQUV2RCxnREFBa0k7O0lBQ2xJLDBDQUEyQzs7Ozs7SUFFM0MsaURBR0c7O0lBQ0gsMkNBQXFEOztJQUVyRCwyQ0FBcUQ7Ozs7O0lBRXJELGdEQUFpRDs7Ozs7SUFDakQsa0RBR0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEYXRlUmFuZ2VPcHRpb25zLCBEYXRlUmFuZ2V9IGZyb20gJy4uL21vZGVsL21vZGVsJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7RH0gZnJvbSAnLi4vLi4vZGF0ZXBpY2tlcic7XG5pbXBvcnQge21hcCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb25maWdTdG9yZVNlcnZpY2Uge1xuICAgIHByaXZhdGUgZGVmYXVsdE9wdGlvbnM6IERhdGVSYW5nZU9wdGlvbnMgPSB7XG4gICAgICAgIHByZXNldHM6IFtdLFxuICAgICAgICBmb3JtYXQ6ICdtZWRpdW0nLFxuICAgICAgICBtb2RlOiAnZGF0ZScsXG4gICAgICAgIGhvdXJDeWNsZTogMTIsXG4gICAgICAgIGV4Y2x1ZGVXZWVrZW5kczogZmFsc2UsXG4gICAgICAgIGxvY2FsZTogJ2VuLXVzJyxcbiAgICAgICAgYXBwbHlMYWJlbDogJ0FwcGx5JyxcbiAgICAgICAgY2FuY2VsTGFiZWw6ICdDYW5jZWwnLFxuICAgICAgICBzdGFydERhdGVQcmVmaXg6ICdTdGFydCBkYXRlOicsXG4gICAgICAgIGVuZERhdGVQcmVmaXg6ICdFbmQgZGF0ZTonLFxuICAgICAgICBpbnZhbGlkRGF0ZUxhYmVsOiAnUGxlYXNlIGVudGVyIHZhbGlkIGRhdGUnXG4gICAgfTtcblxuICAgIHByaXZhdGUgZGF0ZVJhbmdlT3B0aW9uc1N1YmplY3Q6IEJlaGF2aW9yU3ViamVjdDxEYXRlUmFuZ2VPcHRpb25zPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RGF0ZVJhbmdlT3B0aW9ucz4odGhpcy5kZWZhdWx0T3B0aW9ucyk7XG4gICAgcHVibGljIGRhdGVSYW5nZU9wdGlvbnMkOiBPYnNlcnZhYmxlPERhdGVSYW5nZU9wdGlvbnM+O1xuXG4gICAgcHJpdmF0ZSByYW5nZVVwZGF0ZVN1YmplY3Q6IEJlaGF2aW9yU3ViamVjdDxEYXRlUmFuZ2U+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxEYXRlUmFuZ2U+KHtmcm9tRGF0ZTogdW5kZWZpbmVkLCB0b0RhdGU6IHVuZGVmaW5lZH0pO1xuICAgIHB1YmxpYyByYW5nZVVwZGF0ZSQ6IE9ic2VydmFibGU8RGF0ZVJhbmdlPjtcblxuICAgIHByaXZhdGUgcHJlc2V0VXBkYXRlU3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PG51bWJlciB8IERhdGVSYW5nZT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlciB8IERhdGVSYW5nZT4oe1xuICAgICAgICBmcm9tRGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICB0b0RhdGU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICAgIHB1YmxpYyBwcmVzZXRVcGRhdGUkOiBPYnNlcnZhYmxlPG51bWJlciB8IERhdGVSYW5nZT47XG5cbiAgICBwdWJsaWMgd2Vla2VuZEZpbHRlcjogKGQ6IEQpID0+IGJvb2xlYW4gPSAoKSA9PiB0cnVlO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbXB0eVdlZWtlbmRGaWx0ZXIgPSAoKSA9PiB0cnVlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZXhjbHVkZVdlZWtlbmRGaWx0ZXIgPSAoZDogRGF0ZSk6IGJvb2xlYW4gPT4ge1xuICAgICAgICBjb25zdCBkYXkgPSBkLmdldERheSgpO1xuICAgICAgICByZXR1cm4gZGF5ICE9PSAwICYmIGRheSAhPT0gNjtcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGF0ZVJhbmdlT3B0aW9ucyQgPSB0aGlzLmRhdGVSYW5nZU9wdGlvbnNTdWJqZWN0LnBpcGUoXG4gICAgICAgICAgICBtYXAoKG9wdGlvbnM6IERhdGVSYW5nZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGFwKChvcHRpb25zOiBEYXRlUmFuZ2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCEhb3B0aW9ucy5leGNsdWRlV2Vla2VuZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZW5kRmlsdGVyID0gdGhpcy5leGNsdWRlV2Vla2VuZEZpbHRlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtlbmRGaWx0ZXIgPSB0aGlzLmVtcHR5V2Vla2VuZEZpbHRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucmFuZ2VVcGRhdGUkID0gdGhpcy5yYW5nZVVwZGF0ZVN1YmplY3QucGlwZSgpO1xuICAgICAgICB0aGlzLnByZXNldFVwZGF0ZSQgPSB0aGlzLnByZXNldFVwZGF0ZVN1YmplY3QucGlwZSgpO1xuICAgIH1cblxuICAgIHVwZGF0ZURhdGVSYW5nZU9wdGlvbnMob3B0aW9uczogRGF0ZVJhbmdlT3B0aW9ucykge1xuICAgICAgICB0aGlzLmRhdGVSYW5nZU9wdGlvbnNTdWJqZWN0Lm5leHQob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdXBkYXRlUmFuZ2UoZGF0ZVJhbmdlOiBEYXRlUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5yYW5nZVVwZGF0ZVN1YmplY3QubmV4dChkYXRlUmFuZ2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZVByZXNldCh2YWx1ZTogbnVtYmVyIHwgRGF0ZVJhbmdlKSB7XG4gICAgICAgIHRoaXMucHJlc2V0VXBkYXRlU3ViamVjdC5uZXh0KHZhbHVlKTtcbiAgICB9XG59XG4iXX0=