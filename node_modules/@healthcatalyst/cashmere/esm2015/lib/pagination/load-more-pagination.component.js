/**
 * @fileoverview added by tsickle
 * Generated from: lib/pagination/load-more-pagination.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { validateStyleInput } from '../button/button.component';
import { BasePaginationComponent } from './base-pagination';
/**
 * A simple "load more" pagination button.
 * \@inheritdoc
 *
 */
export class LoadMorePaginationComponent extends BasePaginationComponent {
    constructor() {
        super(...arguments);
        /**
         * Text to show on the button. *Defaults to 'Load more'.*
         */
        this.buttonText = 'Load more';
        this._style = 'secondary';
    }
    /**
     * Sets style of button. Choose from: `'primary' | 'primary-alt' | 'destructive' | 'neutral' | 'secondary' | 'link' | 'link-inline'`.
     * *Defaults to `'secondary'`.*
     * @return {?}
     */
    get buttonStyle() {
        return this._style;
    }
    /**
     * @param {?} btnStyle
     * @return {?}
     */
    set buttonStyle(btnStyle) {
        validateStyleInput(btnStyle);
        this._style = btnStyle;
    }
    /**
     * @return {?}
     */
    _loadNextPage() {
        if (this._isLastPage) {
            return;
        }
        this.pageNumber = this.pageNumber + 1;
    }
}
LoadMorePaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-load-more-pagination',
                template: "<button hc-button class=\"hc-page-load-more-button\" [buttonStyle]=\"buttonStyle\" (click)=\"_loadNextPage()\" [disabled]=\"_isLastPage\">\n    {{buttonText}}\n</button>",
                encapsulation: ViewEncapsulation.None,
                styles: [".hc-page-load-more-button{display:block;margin:20px auto;min-width:30%}"]
            }] }
];
LoadMorePaginationComponent.propDecorators = {
    buttonText: [{ type: Input }],
    buttonStyle: [{ type: Input }]
};
if (false) {
    /**
     * Text to show on the button. *Defaults to 'Load more'.*
     * @type {?}
     */
    LoadMorePaginationComponent.prototype.buttonText;
    /**
     * @type {?}
     * @private
     */
    LoadMorePaginationComponent.prototype._style;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1tb3JlLXBhZ2luYXRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24vbG9hZC1tb3JlLXBhZ2luYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQVUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sbUJBQW1CLENBQUM7Ozs7OztBQVcxRCxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsdUJBQXVCO0lBTnhFOzs7OztRQVdJLGVBQVUsR0FBRyxXQUFXLENBQUM7UUFjakIsV0FBTSxHQUFXLFdBQVcsQ0FBQztJQVF6QyxDQUFDOzs7Ozs7SUFqQkcsSUFDSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBRUQsSUFBSSxXQUFXLENBQUMsUUFBZ0I7UUFDNUIsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQzs7OztJQUdELGFBQWE7UUFDVCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7WUFoQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLHFMQUFvRDtnQkFFcEQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3hDOzs7eUJBS0ksS0FBSzswQkFNTCxLQUFLOzs7Ozs7O0lBTk4saURBQ3lCOzs7OztJQWN6Qiw2Q0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgVmlld0VuY2Fwc3VsYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt2YWxpZGF0ZVN0eWxlSW5wdXR9IGZyb20gJy4uL2J1dHRvbi9idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7QmFzZVBhZ2luYXRpb25Db21wb25lbnR9IGZyb20gJy4vYmFzZS1wYWdpbmF0aW9uJztcblxuLyoqIEEgc2ltcGxlIFwibG9hZCBtb3JlXCIgcGFnaW5hdGlvbiBidXR0b24uXG4gKiBAaW5oZXJpdGRvY1xuICogKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaGMtbG9hZC1tb3JlLXBhZ2luYXRpb24nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9sb2FkLW1vcmUtcGFnaW5hdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vbG9hZC1tb3JlLXBhZ2luYXRpb24uY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIExvYWRNb3JlUGFnaW5hdGlvbkNvbXBvbmVudCBleHRlbmRzIEJhc2VQYWdpbmF0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICAvKipcbiAgICAgKiBUZXh0IHRvIHNob3cgb24gdGhlIGJ1dHRvbi4gKkRlZmF1bHRzIHRvICdMb2FkIG1vcmUnLipcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGJ1dHRvblRleHQgPSAnTG9hZCBtb3JlJztcblxuICAgIC8qKiBTZXRzIHN0eWxlIG9mIGJ1dHRvbi4gQ2hvb3NlIGZyb206IGAncHJpbWFyeScgfCAncHJpbWFyeS1hbHQnIHwgJ2Rlc3RydWN0aXZlJyB8ICduZXV0cmFsJyB8ICdzZWNvbmRhcnknIHwgJ2xpbmsnIHwgJ2xpbmstaW5saW5lJ2AuXG4gICAgICogKkRlZmF1bHRzIHRvIGAnc2Vjb25kYXJ5J2AuKlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGJ1dHRvblN0eWxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHlsZTtcbiAgICB9XG5cbiAgICBzZXQgYnV0dG9uU3R5bGUoYnRuU3R5bGU6IHN0cmluZykge1xuICAgICAgICB2YWxpZGF0ZVN0eWxlSW5wdXQoYnRuU3R5bGUpO1xuICAgICAgICB0aGlzLl9zdHlsZSA9IGJ0blN0eWxlO1xuICAgIH1cbiAgICBwcml2YXRlIF9zdHlsZTogc3RyaW5nID0gJ3NlY29uZGFyeSc7XG5cbiAgICBfbG9hZE5leHRQYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5faXNMYXN0UGFnZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFnZU51bWJlciA9IHRoaXMucGFnZU51bWJlciArIDE7XG4gICAgfVxufVxuIl19