/**
 * @fileoverview added by tsickle
 * Generated from: lib/pagination/base-pagination.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output, Component } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { Initializable } from '../shared/initializable';
/**
 * Base Pagination class for shared functionality
 *
 */
export class BasePaginationComponent extends Initializable {
    constructor() {
        super(...arguments);
        this._length = 0;
        this._pageNumber = 1;
        this._pageSize = BasePaginationComponent._DEFAULT_PAGE_SIZE;
        /**
         * Event emitted when the paginator changes the page size or page index.
         */
        this.page = new EventEmitter();
        /**
         * Emits the new page number when the page number changes.
         */
        this.pageNumberChange = new EventEmitter();
        /**
         * Emits the new page size when the page size changes.
         */
        this.pageSizeChange = new EventEmitter();
    }
    /**
     * The total number of items to be paged through
     * @return {?}
     */
    get length() {
        return this._length;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set length(value) {
        this._length = coerceNumberProperty(value);
    }
    /**
     * The currently displayed page. *Defaults to 1.*
     * @return {?}
     */
    get pageNumber() {
        return this._pageNumber;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pageNumber(value) {
        /** @type {?} */
        const prevPageNumber = this._pageNumber;
        this._pageNumber = value;
        /** @type {?} */
        const sanitizedValue = this._sanitizePageNumber(value);
        if (sanitizedValue !== value) {
            setTimeout((/**
             * @return {?}
             */
            () => (this.pageNumber = sanitizedValue)));
        }
        else {
            this.pageNumberChange.emit(this.pageNumber);
            this._emitPageEvent(prevPageNumber);
        }
    }
    /**
     * Number of items to display on a page. *Defaults to 20.*
     * @return {?}
     */
    get pageSize() {
        return this._pageSize;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pageSize(value) {
        this._pageSize = coerceNumberProperty(value);
        this._pageSizeUpdated();
        this.pageSizeChange.emit(this.pageSize);
        this._emitPageEvent(this.pageNumber);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._markInitialized();
    }
    /**
     * The computed total number of pages
     * @return {?}
     */
    get totalPages() {
        return Math.ceil(this._length / this._pageSize);
    }
    /**
     * @return {?}
     */
    get _isFirstPage() {
        return this._pageNumber === 1;
    }
    /**
     * @return {?}
     */
    get _isLastPage() {
        return !!(this.totalPages && this._pageNumber === this.totalPages);
    }
    /**
     * Changes the page size so that the first item displayed on the page will still be
     * displayed using the new page size.
     *
     * For example, if the page size is 10 and on the second page (items indexed 11-20) then
     * switching so that the page size is 5 will set the third page as the current page so
     * that the 11th item will still be displayed.
     * @param {?} pageSize
     * @return {?}
     */
    _changePageSize(pageSize) {
        // Current page needs to be updated to reflect the new page size. Navigate to the page
        // containing the previous page's first item.
        /** @type {?} */
        const startIndex = (this.pageNumber - 1) * this.pageSize;
        this.pageSize = pageSize;
        this.pageNumber = Math.ceil(startIndex / pageSize) + 1;
    }
    /**
     * @return {?}
     */
    _pageSizeUpdated() { }
    /**
     * @private
     * @param {?} pageNumber
     * @return {?}
     */
    _sanitizePageNumber(pageNumber) {
        /** @type {?} */
        const number = Math.max(coerceNumberProperty(pageNumber), 1);
        return number > this.totalPages ? this.totalPages : number;
    }
    /**
     * @private
     * @param {?} previousPageNumber
     * @return {?}
     */
    _emitPageEvent(previousPageNumber) {
        this.page.emit({
            previousPageNumber,
            pageNumber: this.pageNumber,
            pageSize: this.pageSize,
            length: this.length
        });
    }
}
BasePaginationComponent._DEFAULT_PAGE_SIZE = 20;
BasePaginationComponent.decorators = [
    { type: Component, args: [{
                template: ''
            }] }
];
BasePaginationComponent.propDecorators = {
    length: [{ type: Input }],
    pageNumber: [{ type: Input }],
    pageSize: [{ type: Input }],
    page: [{ type: Output }],
    pageNumberChange: [{ type: Output }],
    pageSizeChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    BasePaginationComponent._DEFAULT_PAGE_SIZE;
    /**
     * @type {?}
     * @private
     */
    BasePaginationComponent.prototype._length;
    /**
     * @type {?}
     * @private
     */
    BasePaginationComponent.prototype._pageNumber;
    /**
     * @type {?}
     * @private
     */
    BasePaginationComponent.prototype._pageSize;
    /**
     * Event emitted when the paginator changes the page size or page index.
     * @type {?}
     */
    BasePaginationComponent.prototype.page;
    /**
     * Emits the new page number when the page number changes.
     * @type {?}
     */
    BasePaginationComponent.prototype.pageNumberChange;
    /**
     * Emits the new page size when the page size changes.
     * @type {?}
     */
    BasePaginationComponent.prototype.pageSizeChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1wYWdpbmF0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24vYmFzZS1wYWdpbmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFVLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0seUJBQXlCLENBQUM7Ozs7O0FBV3RELE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxhQUFhO0lBSDFEOztRQWdCWSxZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBRXBCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBOEJ4QixjQUFTLEdBQVcsdUJBQXVCLENBQUMsa0JBQWtCLENBQUM7Ozs7UUFJOUQsU0FBSSxHQUE0QixJQUFJLFlBQVksRUFBYSxDQUFDOzs7O1FBSTlELHFCQUFnQixHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDOzs7O1FBR3BFLG1CQUFjLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7SUFvRC9FLENBQUM7Ozs7O0lBdEdHLElBQ0ksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDOzs7OztJQUNELElBQUksTUFBTSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7OztJQUtELElBQ0ksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDOzs7OztJQUNELElBQUksVUFBVSxDQUFDLEtBQWE7O2NBQ2xCLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVztRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUss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QXVFOzs7OztJQUd2RSx1Q0FDdUU7Ozs7O0lBR3ZFLG1EQUM2RTs7Ozs7SUFFN0UsaURBQzJFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIE9uSW5pdCwgQ29tcG9uZW50fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Y29lcmNlTnVtYmVyUHJvcGVydHl9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQge0luaXRpYWxpemFibGV9IGZyb20gJy4uL3NoYXJlZC9pbml0aWFsaXphYmxlJztcbmltcG9ydCB7UGFnZUV2ZW50fSBmcm9tICcuL3BhZ2UtZXZlbnQnO1xuaW1wb3J0IHttYXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEJhc2UgUGFnaW5hdGlvbiBjbGFzcyBmb3Igc2hhcmVkIGZ1bmN0aW9uYWxpdHlcbiAqICovXG5AQ29tcG9uZW50KHtcbiAgICB0ZW1wbGF0ZTogJydcbn0pXG5leHBvcnQgY2xhc3MgQmFzZVBhZ2luYXRpb25Db21wb25lbnQgZXh0ZW5kcyBJbml0aWFsaXphYmxlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwdWJsaWMgc3RhdGljIF9ERUZBVUxUX1BBR0VfU0laRSA9IDIwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiBpdGVtcyB0byBiZSBwYWdlZCB0aHJvdWdoXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG4gICAgfVxuICAgIHNldCBsZW5ndGgodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9sZW5ndGggPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuICAgIHByaXZhdGUgX2xlbmd0aDogbnVtYmVyID0gMDtcblxuICAgIHByaXZhdGUgX3BhZ2VOdW1iZXI6IG51bWJlciA9IDE7XG4gICAgLyoqIFRoZSBjdXJyZW50bHkgZGlzcGxheWVkIHBhZ2UuICpEZWZhdWx0cyB0byAxLiogKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBwYWdlTnVtYmVyKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYWdlTnVtYmVyO1xuICAgIH1cbiAgICBzZXQgcGFnZU51bWJlcih2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHByZXZQYWdlTnVtYmVyID0gdGhpcy5fcGFnZU51bWJlcjtcbiAgICAgICAgdGhpcy5fcGFnZU51bWJlciA9IHZhbHVlO1xuXG4gICAgICAgIGNvbnN0IHNhbml0aXplZFZhbHVlID0gdGhpcy5fc2FuaXRpemVQYWdlTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgaWYgKHNhbml0aXplZFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiAodGhpcy5wYWdlTnVtYmVyID0gc2FuaXRpemVkVmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFnZU51bWJlckNoYW5nZS5lbWl0KHRoaXMucGFnZU51bWJlcik7XG4gICAgICAgICAgICB0aGlzLl9lbWl0UGFnZUV2ZW50KHByZXZQYWdlTnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBOdW1iZXIgb2YgaXRlbXMgdG8gZGlzcGxheSBvbiBhIHBhZ2UuICpEZWZhdWx0cyB0byAyMC4qICovXG4gICAgQElucHV0KClcbiAgICBnZXQgcGFnZVNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VTaXplO1xuICAgIH1cbiAgICBzZXQgcGFnZVNpemUodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9wYWdlU2l6ZSA9IGNvZXJjZU51bWJlclByb3BlcnR5KHZhbHVlKTtcbiAgICAgICAgdGhpcy5fcGFnZVNpemVVcGRhdGVkKCk7XG4gICAgICAgIHRoaXMucGFnZVNpemVDaGFuZ2UuZW1pdCh0aGlzLnBhZ2VTaXplKTtcbiAgICAgICAgdGhpcy5fZW1pdFBhZ2VFdmVudCh0aGlzLnBhZ2VOdW1iZXIpO1xuICAgIH1cbiAgICBwcml2YXRlIF9wYWdlU2l6ZTogbnVtYmVyID0gQmFzZVBhZ2luYXRpb25Db21wb25lbnQuX0RFRkFVTFRfUEFHRV9TSVpFO1xuXG4gICAgLyoqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgcGFnaW5hdG9yIGNoYW5nZXMgdGhlIHBhZ2Ugc2l6ZSBvciBwYWdlIGluZGV4LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHBhZ2U6IEV2ZW50RW1pdHRlcjxQYWdlRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxQYWdlRXZlbnQ+KCk7XG5cbiAgICAvKiogRW1pdHMgdGhlIG5ldyBwYWdlIG51bWJlciB3aGVuIHRoZSBwYWdlIG51bWJlciBjaGFuZ2VzLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHBhZ2VOdW1iZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG4gICAgLyoqIEVtaXRzIHRoZSBuZXcgcGFnZSBzaXplIHdoZW4gdGhlIHBhZ2Ugc2l6ZSBjaGFuZ2VzLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHBhZ2VTaXplQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuX21hcmtJbml0aWFsaXplZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wdXRlZCB0b3RhbCBudW1iZXIgb2YgcGFnZXNcbiAgICAgKi9cbiAgICBnZXQgdG90YWxQYWdlcygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuX2xlbmd0aCAvIHRoaXMuX3BhZ2VTaXplKTtcbiAgICB9XG5cbiAgICBnZXQgX2lzRmlyc3RQYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFnZU51bWJlciA9PT0gMTtcbiAgICB9XG5cbiAgICBnZXQgX2lzTGFzdFBhZ2UoKSB7XG4gICAgICAgIHJldHVybiAhISh0aGlzLnRvdGFsUGFnZXMgJiYgdGhpcy5fcGFnZU51bWJlciA9PT0gdGhpcy50b3RhbFBhZ2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBwYWdlIHNpemUgc28gdGhhdCB0aGUgZmlyc3QgaXRlbSBkaXNwbGF5ZWQgb24gdGhlIHBhZ2Ugd2lsbCBzdGlsbCBiZVxuICAgICAqIGRpc3BsYXllZCB1c2luZyB0aGUgbmV3IHBhZ2Ugc2l6ZS5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlLCBpZiB0aGUgcGFnZSBzaXplIGlzIDEwIGFuZCBvbiB0aGUgc2Vjb25kIHBhZ2UgKGl0ZW1zIGluZGV4ZWQgMTEtMjApIHRoZW5cbiAgICAgKiBzd2l0Y2hpbmcgc28gdGhhdCB0aGUgcGFnZSBzaXplIGlzIDUgd2lsbCBzZXQgdGhlIHRoaXJkIHBhZ2UgYXMgdGhlIGN1cnJlbnQgcGFnZSBzb1xuICAgICAqIHRoYXQgdGhlIDExdGggaXRlbSB3aWxsIHN0aWxsIGJlIGRpc3BsYXllZC5cbiAgICAgKi9cbiAgICBfY2hhbmdlUGFnZVNpemUocGFnZVNpemU6IG51bWJlcikge1xuICAgICAgICAvLyBDdXJyZW50IHBhZ2UgbmVlZHMgdG8gYmUgdXBkYXRlZCB0byByZWZsZWN0IHRoZSBuZXcgcGFnZSBzaXplLiBOYXZpZ2F0ZSB0byB0aGUgcGFnZVxuICAgICAgICAvLyBjb250YWluaW5nIHRoZSBwcmV2aW91cyBwYWdlJ3MgZmlyc3QgaXRlbS5cbiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9ICh0aGlzLnBhZ2VOdW1iZXIgLSAxKSAqIHRoaXMucGFnZVNpemU7XG4gICAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZTtcbiAgICAgICAgdGhpcy5wYWdlTnVtYmVyID0gTWF0aC5jZWlsKHN0YXJ0SW5kZXggLyBwYWdlU2l6ZSkgKyAxO1xuICAgIH1cblxuICAgIF9wYWdlU2l6ZVVwZGF0ZWQoKSB7fVxuXG4gICAgcHJpdmF0ZSBfc2FuaXRpemVQYWdlTnVtYmVyKHBhZ2VOdW1iZXI6IGFueSk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IG51bWJlciA9IE1hdGgubWF4KGNvZXJjZU51bWJlclByb3BlcnR5KHBhZ2VOdW1iZXIpLCAxKTtcbiAgICAgICAgcmV0dXJuIG51bWJlciA+IHRoaXMudG90YWxQYWdlcyA/IHRoaXMudG90YWxQYWdlcyA6IG51bWJlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9lbWl0UGFnZUV2ZW50KHByZXZpb3VzUGFnZU51bWJlcjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucGFnZS5lbWl0KHtcbiAgICAgICAgICAgIHByZXZpb3VzUGFnZU51bWJlcixcbiAgICAgICAgICAgIHBhZ2VOdW1iZXI6IHRoaXMucGFnZU51bWJlcixcbiAgICAgICAgICAgIHBhZ2VTaXplOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICAgICAgbGVuZ3RoOiB0aGlzLmxlbmd0aFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=