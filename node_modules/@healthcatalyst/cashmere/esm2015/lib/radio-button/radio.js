/**
 * @fileoverview added by tsickle
 * Generated from: lib/radio-button/radio.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, EventEmitter, forwardRef, HostBinding, Input, Optional, Output, QueryList, Self, ElementRef } from '@angular/core';
import { parseBooleanAttribute } from '../util';
import { HcFormControlComponent } from '../form-field/hc-form-control.component';
import { NgForm, FormGroupDirective, NgControl } from '@angular/forms';
/** @type {?} */
let nextUniqueId = 0;
/**
 * Groups single radio buttons together into a set for which only one can be selected
 */
export class RadioGroupDirective extends HcFormControlComponent {
    /**
     * @param {?} _cdRef
     * @param {?} _parentForm
     * @param {?} _parentFormGroup
     * @param {?} _ngControl
     */
    constructor(_cdRef, _parentForm, _parentFormGroup, _ngControl) {
        super();
        this._cdRef = _cdRef;
        this._ngControl = _ngControl;
        this._verticalClass = true;
        this._horizontalClass = false;
        /**
         * Event emitted when the value of a radio button changes inside the group.
         */
        this.change = new EventEmitter();
        this._value = null;
        this._uniqueName = `hc-radio-group-${nextUniqueId++}`;
        this._name = this._uniqueName;
        this._inline = false;
        this._tight = false;
        this._initialized = false; // if value of radio group has been set to initial value
        // if value of radio group has been set to initial value
        this._selected = null; // the currently selected radio
        this._componentId = this._name;
        this._onChangeFn = (/**
         * @return {?}
         */
        () => { });
        this._onTouchFn = (/**
         * @return {?}
         */
        () => { });
        this._form = _parentForm || _parentFormGroup;
        if (this._ngControl != null) {
            this._ngControl.valueAccessor = this;
        }
    }
    /**
     * Name of radio group. Auto-generated name will be used if no name is set
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this._name = value ? value : this._uniqueName;
        this._updateRadioButtonNames();
    }
    /**
     * Unique id for the radio group. If none is supplied, defaults to name.
     * @return {?}
     */
    get id() {
        return this._componentId || this._name;
    }
    /**
     * @param {?} idVal
     * @return {?}
     */
    set id(idVal) {
        this._componentId = idVal ? idVal : this._name;
    }
    /**
     * Value of radio buttons
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set value(newValue) {
        if (this._value !== newValue) {
            this._value = newValue;
            this._updateSelectedRadio();
            this._checkSelectedRadio();
        }
    }
    /**
     * Boolean value that enables/disables the radio group
     * @return {?}
     */
    get disabled() {
        if (this._ngControl && this._ngControl.disabled) {
            return this._ngControl.disabled;
        }
        return this._isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._isDisabled = parseBooleanAttribute(value);
        this._markRadiosForCheck();
    }
    /**
     * Boolean value of whether the radio group is required on a form
     * @return {?}
     */
    get required() {
        return this._isRequired;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) {
        this._isRequired = parseBooleanAttribute(value);
        this._markRadiosForCheck();
    }
    /**
     * Gets and sets the currently selected value of the radio button group
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} button
     * @return {?}
     */
    set selected(button) {
        this._selected = button;
        this.value = button ? button.value : null;
        this._checkSelectedRadio();
    }
    /**
     * Sets the layout orientation of the radio button group; defaults to false
     * @return {?}
     */
    get inline() {
        return this._inline;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set inline(value) {
        this._inline = parseBooleanAttribute(value);
        this._verticalClass = !this._inline;
        this._horizontalClass = this._inline;
    }
    /**
     * If true, condense the default margin and reduce the font size on all contained radios. *Defaults to `false`.*
     * @return {?}
     */
    get tight() {
        return this._tight;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tight(value) {
        this._tight = parseBooleanAttribute(value);
        if (this._initialized) {
            setTimeout((/**
             * @return {?}
             */
            () => this._markRadiosForCheck()));
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._initialized = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        this._cdRef.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChangeFn = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouchFn = fn;
    }
    /**
     * @return {?}
     */
    _touch() {
        if (this._onTouchFn) {
            this._onTouchFn();
        }
    }
    /**
     * @return {?}
     */
    _emitChangeEvent() {
        if (this._initialized) {
            this.change.emit(new RadioButtonChangeEvent(this._selected, this.value));
        }
    }
    /**
     * @private
     * @return {?}
     */
    _markRadiosForCheck() {
        if (this.radios) {
            this.radios.forEach((/**
             * @param {?} radio
             * @return {?}
             */
            radio => radio._markForCheck()));
        }
    }
    /**
     * @private
     * @return {?}
     */
    _updateSelectedRadio() {
        /** @type {?} */
        let isAlreadySelected = this._selected !== null && this._selected.value === this._value;
        if (this.radios && !isAlreadySelected) {
            this._selected = null;
            this.radios.forEach((/**
             * @param {?} radio
             * @return {?}
             */
            radio => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                }
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    _checkSelectedRadio() {
        if (this._selected && !this._selected.checked) {
            this._selected.checked = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _updateRadioButtonNames() {
        if (this.radios) {
            this.radios.forEach((/**
             * @param {?} radio
             * @return {?}
             */
            radio => {
                radio.name = this.name;
            }));
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        // This needs to be checked every cycle because we can't subscribe to form submissions
        if (this._ngControl) {
            this._updateErrorState();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _updateErrorState() {
        /** @type {?} */
        const oldState = this._errorState;
        // TODO: this could be abstracted out as an @Input() if we need this to be configurable
        /** @type {?} */
        const newState = !!(this._ngControl &&
            this._ngControl.invalid &&
            (this._ngControl.touched || (this._form && this._form.submitted)));
        if (oldState !== newState) {
            this._errorState = newState;
        }
    }
}
RadioGroupDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable:directive-selector
                selector: 'hc-radio-group',
                providers: [{ provide: HcFormControlComponent, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => RadioGroupDirective)), multi: true }],
                exportAs: 'hcRadioGroup'
            },] }
];
/** @nocollapse */
RadioGroupDirective.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }
];
RadioGroupDirective.propDecorators = {
    _verticalClass: [{ type: HostBinding, args: ['class.hc-radio-group-vertical',] }],
    _horizontalClass: [{ type: HostBinding, args: ['class.hc-radio-group-horizontal',] }],
    change: [{ type: Output }],
    radios: [{ type: ContentChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => RadioButtonComponent)),
                { descendants: true },] }],
    name: [{ type: Input }],
    id: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    inline: [{ type: Input }],
    tight: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RadioGroupDirective.prototype._verticalClass;
    /** @type {?} */
    RadioGroupDirective.prototype._horizontalClass;
    /**
     * Event emitted when the value of a radio button changes inside the group.
     * @type {?}
     */
    RadioGroupDirective.prototype.change;
    /**
     * A list of all the radio buttons included in the group
     * @type {?}
     */
    RadioGroupDirective.prototype.radios;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._value;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._uniqueName;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._name;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._inline;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._tight;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._initialized;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._form;
    /** @type {?} */
    RadioGroupDirective.prototype._componentId;
    /** @type {?} */
    RadioGroupDirective.prototype._onChangeFn;
    /** @type {?} */
    RadioGroupDirective.prototype._onTouchFn;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._cdRef;
    /** @type {?} */
    RadioGroupDirective.prototype._ngControl;
}
/**
 * Event type that is emitted when a radio button or radio button group changes
 */
export class RadioButtonChangeEvent {
    /**
     * @param {?} source the radio button that fired the event
     * @param {?} value the value of that radio button
     */
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}
if (false) {
    /** @type {?} */
    RadioButtonChangeEvent.prototype.source;
    /** @type {?} */
    RadioButtonChangeEvent.prototype.value;
}
/**
 * Radio buttons allow the user to choose only one of a predefined set of mutually exclusive options.
 */
export class RadioButtonComponent {
    /**
     * @param {?} radioGroup
     * @param {?} cdRef
     * @param {?} _elementRef
     */
    constructor(radioGroup, cdRef, _elementRef) {
        this.cdRef = cdRef;
        this._elementRef = _elementRef;
        this._uniqueId = `hc-radio-button-${nextUniqueId++}`;
        /**
         * Element id for the radio button. Auto-generated id will be used if none is set
         */
        this.id = this._uniqueId;
        /**
         * Event emitted when the value of the radio button changes
         */
        this.change = new EventEmitter();
        this._checked = false;
        this._value = null;
        this._required = false;
        this._disabled = false;
        this._tight = false;
        this.radioGroup = radioGroup;
    }
    /**
     * Value of radio buttons
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            if (this.radioGroup !== null && !this.checked) {
                this.checked = this.radioGroup.value === value;
            }
            else if (this.radioGroup !== null && this.checked) {
                this.radioGroup.selected = this;
            }
        }
    }
    /**
     * @return {?}
     */
    get _getHostId() {
        return this.id;
    }
    /**
     * Boolean value of whether the radio button is required
     * @return {?}
     */
    get required() {
        return this._required || (this.radioGroup != null && this.radioGroup.required);
    }
    /**
     * @param {?} required
     * @return {?}
     */
    set required(required) {
        this._required = parseBooleanAttribute(required);
    }
    /**
     * Boolean value that enables/disables the radio button
     * @return {?}
     */
    get disabled() {
        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    set disabled(isDisabled) {
        this._disabled = parseBooleanAttribute(isDisabled);
    }
    /**
     * Boolean that returns whether the radio button is selected
     * @return {?}
     */
    get checked() {
        return this._checked;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set checked(value) {
        /** @type {?} */
        let newCheckedState = parseBooleanAttribute(value);
        if (this._checked !== newCheckedState) {
            this._checked = newCheckedState;
            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {
                this.radioGroup.selected = this;
            }
            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {
                this.radioGroup.selected = null;
            }
            this.cdRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get _inlineGroup() {
        if (this.radioGroup !== null) {
            return this.radioGroup.inline;
        }
        else {
            return false;
        }
    }
    /**
     * If true, condense the default margin, reduce the font size, and decrease the circle size.
     * Inherits value from parent radio group if part of one. *Defaults to `false`.*
     * @return {?}
     */
    get tight() {
        if (this.radioGroup !== null) {
            return this.radioGroup.tight;
        }
        else {
            return this._tight;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tight(value) {
        this._tight = parseBooleanAttribute(value);
    }
    /**
     * @return {?}
     */
    get _inputId() {
        return `${this.id || this._uniqueId}-input`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.radioGroup !== null) {
            this.checked = this.radioGroup.value === this._value;
            this.name = this.radioGroup.name;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onInputClick(event) {
        event.stopPropagation();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onInputChange(event) {
        event.stopPropagation();
        /** @type {?} */
        const valueChanged = this.radioGroup && this.value !== this.radioGroup.value;
        this._emitChangeEvent();
        if (this.radioGroup !== null) {
            this.radioGroup._onChangeFn(this.value);
            this.radioGroup._touch();
            if (valueChanged) {
                this.radioGroup._emitChangeEvent();
                this.radioGroup.value = this.value;
            }
        }
        else {
            this.checked = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _emitChangeEvent() {
        this.change.emit(new RadioButtonChangeEvent(this, this.value));
    }
    /**
     * @return {?}
     */
    _markForCheck() {
        this.cdRef.markForCheck();
    }
}
RadioButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-radio-button',
                template: "<label class=\"hc-radio-container\"\n    [class.disabled]=\"disabled\"\n    [class.hc-radio-inline]=\"_inlineGroup\"\n    [class.hc-radio-tight]=\"tight\" >\n    <input class=\"hc-radio-input\"\n           [class.disabled]=\"disabled\"\n           type=\"radio\"\n           [id]=\"_inputId\"\n           [attr.value]=\"value\"\n           [attr.name]=\"name\"\n           [disabled]=\"disabled\"\n           [required]=\"required\"\n           [checked]=\"checked\"\n           (change)=\"_onInputChange($event)\"\n           (click)=\"_onInputClick($event)\"/>\n    <span class=\"hc-radio-overlay\" [class.disabled]=\"disabled\"></span>\n    <div class=\"hc-radio-content\">\n        <ng-content></ng-content>\n    </div>\n</label>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".hc-radio-container{cursor:pointer;display:block;line-height:1.5;margin:4px 0;padding-left:35px;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.hc-radio-container.disabled{color:#ccc;cursor:not-allowed}.hc-radio-container.hc-radio-inline{padding-left:32px;margin-right:25px}.hc-radio-container.hc-radio-tight{margin:1px 15px 1px 0;padding-left:25px}.hc-radio-tight .hc-radio-overlay{height:18px;width:18px;top:1px}.hc-radio-tight .hc-radio-overlay:after{left:3px;top:3px}.hc-radio-tight .hc-radio-content{font-size:.92857rem}.hc-radio-overlay{background-color:#fff;border:2px solid #ccc;border-radius:50%;height:22px;left:0;position:absolute;top:0;width:22px}.hc-radio-overlay:after{background:#fff;border-radius:50%;content:'';display:none;height:8px;left:5px;position:absolute;top:5px;width:8px}.hc-radio-overlay.disabled{background-color:#e0e0e0;border-color:#ccc;cursor:not-allowed}.hc-radio-overlay.disabled:after{background:#e0e0e0}.hc-radio-container:hover .hc-radio-overlay{border-color:#00aeff}.hc-radio-container:hover .hc-radio-overlay.disabled{background-color:#e0e0e0;border-color:#ccc;cursor:not-allowed}.hc-radio-container:hover .hc-radio-overlay.disabled:after{background:#e0e0e0}.hc-radio-input:checked~.hc-radio-overlay{background-color:#00aeff;border-color:#00aeff}.hc-radio-input:checked~.hc-radio-overlay:after{display:block}.hc-radio-input:checked~.hc-radio-overlay.disabled{background-color:#e0e0e0;border-color:#ccc}.hc-radio-input{cursor:pointer;opacity:0;position:absolute}.hc-radio-input.disabled{cursor:not-allowed}.hc-radio-input:focus+.hc-radio-overlay{outline:#99caff solid 2px;outline-offset:-1px}.hc-radio-input:active+.hc-radio-overlay{outline:0}"]
            }] }
];
/** @nocollapse */
RadioButtonComponent.ctorParameters = () => [
    { type: RadioGroupDirective, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
RadioButtonComponent.propDecorators = {
    id: [{ type: Input }],
    name: [{ type: Input }],
    change: [{ type: Output }],
    value: [{ type: Input }],
    _getHostId: [{ type: HostBinding, args: ['attr.id',] }],
    required: [{ type: Input }],
    disabled: [{ type: Input }],
    checked: [{ type: Input }],
    tight: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._uniqueId;
    /**
     * Element id for the radio button. Auto-generated id will be used if none is set
     * @type {?}
     */
    RadioButtonComponent.prototype.id;
    /**
     * Name of radio button
     * @type {?}
     */
    RadioButtonComponent.prototype.name;
    /**
     * Event emitted when the value of the radio button changes
     * @type {?}
     */
    RadioButtonComponent.prototype.change;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._checked;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._tight;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.radioGroup;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.cdRef;
    /** @type {?} */
    RadioButtonComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcmFkaW8tYnV0dG9uL3JhZGlvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUVILHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULGVBQWUsRUFDZixTQUFTLEVBQ1QsWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUVMLFFBQVEsRUFDUixNQUFNLEVBQ04sU0FBUyxFQUVULElBQUksRUFDSixVQUFVLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQzlDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQy9FLE9BQU8sRUFBdUIsTUFBTSxFQUFFLGtCQUFrQixFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOztJQUV2RixZQUFZLEdBQUcsQ0FBQzs7OztBQVNwQixNQUFNLE9BQU8sbUJBQW9CLFNBQVEsc0JBQXNCOzs7Ozs7O0lBNEgzRCxZQUNZLE1BQXlCLEVBQ3JCLFdBQW1CLEVBQ25CLGdCQUFvQyxFQUd6QyxVQUFxQjtRQUU1QixLQUFLLEVBQUUsQ0FBQztRQVBBLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBSzFCLGVBQVUsR0FBVixVQUFVLENBQVc7UUFoSWhDLG1CQUFjLEdBQVksSUFBSSxDQUFDO1FBRS9CLHFCQUFnQixHQUFZLEtBQUssQ0FBQzs7OztRQUlsQyxXQUFNLEdBQXlDLElBQUksWUFBWSxFQUEwQixDQUFDO1FBT2xGLFdBQU0sR0FBUSxJQUFJLENBQUM7UUFDbkIsZ0JBQVcsR0FBRyxrQkFBa0IsWUFBWSxFQUFFLEVBQUUsQ0FBQztRQUNqRCxVQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN6QixZQUFPLEdBQUcsS0FBSyxDQUFDO1FB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biAgICBBZnRlckNvbnRlbnRJbml0LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgRGlyZWN0aXZlLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBmb3J3YXJkUmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIElucHV0LFxuICAgIE9uSW5pdCxcbiAgICBPcHRpb25hbCxcbiAgICBPdXRwdXQsXG4gICAgUXVlcnlMaXN0LFxuICAgIERvQ2hlY2ssXG4gICAgU2VsZixcbiAgICBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtwYXJzZUJvb2xlYW5BdHRyaWJ1dGV9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtIY0Zvcm1Db250cm9sQ29tcG9uZW50fSBmcm9tICcuLi9mb3JtLWZpZWxkL2hjLWZvcm0tY29udHJvbC5jb21wb25lbnQnO1xuaW1wb3J0IHtDb250cm9sVmFsdWVBY2Nlc3NvciwgTmdGb3JtLCBGb3JtR3JvdXBEaXJlY3RpdmUsIE5nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5sZXQgbmV4dFVuaXF1ZUlkID0gMDtcblxuLyoqIEdyb3VwcyBzaW5nbGUgcmFkaW8gYnV0dG9ucyB0b2dldGhlciBpbnRvIGEgc2V0IGZvciB3aGljaCBvbmx5IG9uZSBjYW4gYmUgc2VsZWN0ZWQgKi9cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnaGMtcmFkaW8tZ3JvdXAnLFxuICAgIHByb3ZpZGVyczogW3twcm92aWRlOiBIY0Zvcm1Db250cm9sQ29tcG9uZW50LCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBSYWRpb0dyb3VwRGlyZWN0aXZlKSwgbXVsdGk6IHRydWV9XSxcbiAgICBleHBvcnRBczogJ2hjUmFkaW9Hcm91cCdcbn0pXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cERpcmVjdGl2ZSBleHRlbmRzIEhjRm9ybUNvbnRyb2xDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgQWZ0ZXJDb250ZW50SW5pdCwgRG9DaGVjayB7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5oYy1yYWRpby1ncm91cC12ZXJ0aWNhbCcpXG4gICAgX3ZlcnRpY2FsQ2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaGMtcmFkaW8tZ3JvdXAtaG9yaXpvbnRhbCcpXG4gICAgX2hvcml6b250YWxDbGFzczogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgdmFsdWUgb2YgYSByYWRpbyBidXR0b24gY2hhbmdlcyBpbnNpZGUgdGhlIGdyb3VwLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPFJhZGlvQnV0dG9uQ2hhbmdlRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxSYWRpb0J1dHRvbkNoYW5nZUV2ZW50PigpO1xuICAgIC8qKiBBIGxpc3Qgb2YgYWxsIHRoZSByYWRpbyBidXR0b25zIGluY2x1ZGVkIGluIHRoZSBncm91cCAqL1xuICAgIEBDb250ZW50Q2hpbGRyZW4oXG4gICAgICAgIGZvcndhcmRSZWYoKCkgPT4gUmFkaW9CdXR0b25Db21wb25lbnQpLFxuICAgICAgICB7ZGVzY2VuZGFudHM6IHRydWV9XG4gICAgKVxuICAgIHJhZGlvczogUXVlcnlMaXN0PFJhZGlvQnV0dG9uQ29tcG9uZW50PjtcbiAgICBwcml2YXRlIF92YWx1ZTogYW55ID0gbnVsbDtcbiAgICBwcml2YXRlIF91bmlxdWVOYW1lID0gYGhjLXJhZGlvLWdyb3VwLSR7bmV4dFVuaXF1ZUlkKyt9YDtcbiAgICBwcml2YXRlIF9uYW1lID0gdGhpcy5fdW5pcXVlTmFtZTtcbiAgICBwcml2YXRlIF9pbmxpbmUgPSBmYWxzZTtcbiAgICBwcml2YXRlIF90aWdodDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX2luaXRpYWxpemVkID0gZmFsc2U7IC8vIGlmIHZhbHVlIG9mIHJhZGlvIGdyb3VwIGhhcyBiZWVuIHNldCB0byBpbml0aWFsIHZhbHVlXG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IFJhZGlvQnV0dG9uQ29tcG9uZW50IHwgbnVsbCA9IG51bGw7IC8vIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcmFkaW9cbiAgICBwcml2YXRlIF9mb3JtOiBOZ0Zvcm0gfCBGb3JtR3JvdXBEaXJlY3RpdmUgfCBudWxsO1xuXG4gICAgX2NvbXBvbmVudElkID0gdGhpcy5fbmFtZTtcblxuICAgIF9vbkNoYW5nZUZuOiAodmFsdWU6IGFueSkgPT4gdm9pZCA9ICgpID0+IHt9O1xuICAgIF9vblRvdWNoRm46ICgpID0+IGFueSA9ICgpID0+IHt9O1xuXG4gICAgLyoqIE5hbWUgb2YgcmFkaW8gZ3JvdXAuIEF1dG8tZ2VuZXJhdGVkIG5hbWUgd2lsbCBiZSB1c2VkIGlmIG5vIG5hbWUgaXMgc2V0ICovXG4gICAgQElucHV0KClcbiAgICBnZXQgbmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9XG5cbiAgICBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZSA/IHZhbHVlIDogdGhpcy5fdW5pcXVlTmFtZTtcbiAgICAgICAgdGhpcy5fdXBkYXRlUmFkaW9CdXR0b25OYW1lcygpO1xuICAgIH1cblxuICAgIC8qKiBVbmlxdWUgaWQgZm9yIHRoZSByYWRpbyBncm91cC4gSWYgbm9uZSBpcyBzdXBwbGllZCwgZGVmYXVsdHMgdG8gbmFtZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBpZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50SWQgfHwgdGhpcy5fbmFtZTtcbiAgICB9XG5cbiAgICBzZXQgaWQoaWRWYWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jb21wb25lbnRJZCA9IGlkVmFsID8gaWRWYWwgOiB0aGlzLl9uYW1lO1xuICAgIH1cblxuICAgIC8qKiBWYWx1ZSBvZiByYWRpbyBidXR0b25zICovXG4gICAgQElucHV0KClcbiAgICBnZXQgdmFsdWUoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZShuZXdWYWx1ZTogYW55KSB7XG4gICAgICAgIGlmICh0aGlzLl92YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTZWxlY3RlZFJhZGlvKCk7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1NlbGVjdGVkUmFkaW8oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBCb29sZWFuIHZhbHVlIHRoYXQgZW5hYmxlcy9kaXNhYmxlcyB0aGUgcmFkaW8gZ3JvdXAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuX25nQ29udHJvbCAmJiB0aGlzLl9uZ0NvbnRyb2wuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uZ0NvbnRyb2wuZGlzYWJsZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgc2V0IGRpc2FibGVkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2lzRGlzYWJsZWQgPSBwYXJzZUJvb2xlYW5BdHRyaWJ1dGUodmFsdWUpO1xuICAgICAgICB0aGlzLl9tYXJrUmFkaW9zRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICAvKiogQm9vbGVhbiB2YWx1ZSBvZiB3aGV0aGVyIHRoZSByYWRpbyBncm91cCBpcyByZXF1aXJlZCBvbiBhIGZvcm0gKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCByZXF1aXJlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUmVxdWlyZWQ7XG4gICAgfVxuXG4gICAgc2V0IHJlcXVpcmVkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2lzUmVxdWlyZWQgPSBwYXJzZUJvb2xlYW5BdHRyaWJ1dGUodmFsdWUpO1xuICAgICAgICB0aGlzLl9tYXJrUmFkaW9zRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICAvKiogR2V0cyBhbmQgc2V0cyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHZhbHVlIG9mIHRoZSByYWRpbyBidXR0b24gZ3JvdXAgKi9cbiAgICBnZXQgc2VsZWN0ZWQoKTogUmFkaW9CdXR0b25Db21wb25lbnQgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICAgIH1cblxuICAgIHNldCBzZWxlY3RlZChidXR0b246IFJhZGlvQnV0dG9uQ29tcG9uZW50IHwgbnVsbCkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IGJ1dHRvbjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGJ1dHRvbiA/IGJ1dHRvbi52YWx1ZSA6IG51bGw7XG4gICAgICAgIHRoaXMuX2NoZWNrU2VsZWN0ZWRSYWRpbygpO1xuICAgIH1cblxuICAgIC8qKiBTZXRzIHRoZSBsYXlvdXQgb3JpZW50YXRpb24gb2YgdGhlIHJhZGlvIGJ1dHRvbiBncm91cDsgZGVmYXVsdHMgdG8gZmFsc2UgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBpbmxpbmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbmxpbmU7XG4gICAgfVxuXG4gICAgc2V0IGlubGluZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9pbmxpbmUgPSBwYXJzZUJvb2xlYW5BdHRyaWJ1dGUodmFsdWUpO1xuICAgICAgICB0aGlzLl92ZXJ0aWNhbENsYXNzID0gIXRoaXMuX2lubGluZTtcbiAgICAgICAgdGhpcy5faG9yaXpvbnRhbENsYXNzID0gdGhpcy5faW5saW5lO1xuICAgIH1cblxuICAgIC8qKiBJZiB0cnVlLCBjb25kZW5zZSB0aGUgZGVmYXVsdCBtYXJnaW4gYW5kIHJlZHVjZSB0aGUgZm9udCBzaXplIG9uIGFsbCBjb250YWluZWQgcmFkaW9zLiAqRGVmYXVsdHMgdG8gYGZhbHNlYC4qICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHRpZ2h0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGlnaHQ7XG4gICAgfVxuICAgIHNldCB0aWdodCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl90aWdodCA9IHBhcnNlQm9vbGVhbkF0dHJpYnV0ZSh2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLl9tYXJrUmFkaW9zRm9yQ2hlY2soKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBfY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBAT3B0aW9uYWwoKSBfcGFyZW50Rm9ybTogTmdGb3JtLFxuICAgICAgICBAT3B0aW9uYWwoKSBfcGFyZW50Rm9ybUdyb3VwOiBGb3JtR3JvdXBEaXJlY3RpdmUsXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgcHVibGljIF9uZ0NvbnRyb2w6IE5nQ29udHJvbFxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2Zvcm0gPSBfcGFyZW50Rm9ybSB8fCBfcGFyZW50Rm9ybUdyb3VwO1xuICAgICAgICBpZiAodGhpcy5fbmdDb250cm9sICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX25nQ29udHJvbC52YWx1ZUFjY2Vzc29yID0gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2NkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xuICAgICAgICB0aGlzLl9vbkNoYW5nZUZuID0gZm47XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xuICAgICAgICB0aGlzLl9vblRvdWNoRm4gPSBmbjtcbiAgICB9XG5cbiAgICBfdG91Y2goKSB7XG4gICAgICAgIGlmICh0aGlzLl9vblRvdWNoRm4pIHtcbiAgICAgICAgICAgIHRoaXMuX29uVG91Y2hGbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2VtaXRDaGFuZ2VFdmVudCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KG5ldyBSYWRpb0J1dHRvbkNoYW5nZUV2ZW50KHRoaXMuX3NlbGVjdGVkLCB0aGlzLnZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9tYXJrUmFkaW9zRm9yQ2hlY2soKSB7XG4gICAgICAgIGlmICh0aGlzLnJhZGlvcykge1xuICAgICAgICAgICAgdGhpcy5yYWRpb3MuZm9yRWFjaChyYWRpbyA9PiByYWRpby5fbWFya0ZvckNoZWNrKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfdXBkYXRlU2VsZWN0ZWRSYWRpbygpIHtcbiAgICAgICAgbGV0IGlzQWxyZWFkeVNlbGVjdGVkID0gdGhpcy5fc2VsZWN0ZWQgIT09IG51bGwgJiYgdGhpcy5fc2VsZWN0ZWQudmFsdWUgPT09IHRoaXMuX3ZhbHVlO1xuICAgICAgICBpZiAodGhpcy5yYWRpb3MgJiYgIWlzQWxyZWFkeVNlbGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnJhZGlvcy5mb3JFYWNoKHJhZGlvID0+IHtcbiAgICAgICAgICAgICAgICByYWRpby5jaGVja2VkID0gdGhpcy52YWx1ZSA9PT0gcmFkaW8udmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHJhZGlvLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSByYWRpbztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2NoZWNrU2VsZWN0ZWRSYWRpbygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NlbGVjdGVkICYmICF0aGlzLl9zZWxlY3RlZC5jaGVja2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZVJhZGlvQnV0dG9uTmFtZXMoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnJhZGlvcykge1xuICAgICAgICAgICAgdGhpcy5yYWRpb3MuZm9yRWFjaChyYWRpbyA9PiB7XG4gICAgICAgICAgICAgICAgcmFkaW8ubmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQge1xuICAgICAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIGNoZWNrZWQgZXZlcnkgY3ljbGUgYmVjYXVzZSB3ZSBjYW4ndCBzdWJzY3JpYmUgdG8gZm9ybSBzdWJtaXNzaW9uc1xuICAgICAgICBpZiAodGhpcy5fbmdDb250cm9sKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVFcnJvclN0YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF91cGRhdGVFcnJvclN0YXRlKCkge1xuICAgICAgICBjb25zdCBvbGRTdGF0ZSA9IHRoaXMuX2Vycm9yU3RhdGU7XG5cbiAgICAgICAgLy8gVE9ETzogdGhpcyBjb3VsZCBiZSBhYnN0cmFjdGVkIG91dCBhcyBhbiBASW5wdXQoKSBpZiB3ZSBuZWVkIHRoaXMgdG8gYmUgY29uZmlndXJhYmxlXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gISEoXG4gICAgICAgICAgICB0aGlzLl9uZ0NvbnRyb2wgJiZcbiAgICAgICAgICAgIHRoaXMuX25nQ29udHJvbC5pbnZhbGlkICYmXG4gICAgICAgICAgICAodGhpcy5fbmdDb250cm9sLnRvdWNoZWQgfHwgKHRoaXMuX2Zvcm0gJiYgdGhpcy5fZm9ybS5zdWJtaXR0ZWQpKVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChvbGRTdGF0ZSAhPT0gbmV3U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqIEV2ZW50IHR5cGUgdGhhdCBpcyBlbWl0dGVkIHdoZW4gYSByYWRpbyBidXR0b24gb3IgcmFkaW8gYnV0dG9uIGdyb3VwIGNoYW5nZXMgKi9cbmV4cG9ydCBjbGFzcyBSYWRpb0J1dHRvbkNoYW5nZUV2ZW50IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc291cmNlIHRoZSByYWRpbyBidXR0b24gdGhhdCBmaXJlZCB0aGUgZXZlbnRcbiAgICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIG9mIHRoYXQgcmFkaW8gYnV0dG9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHVibGljIHNvdXJjZTogUmFkaW9CdXR0b25Db21wb25lbnQgfCBudWxsLCBwdWJsaWMgdmFsdWU6IGFueSkge31cbn1cblxuLyoqIFJhZGlvIGJ1dHRvbnMgYWxsb3cgdGhlIHVzZXIgdG8gY2hvb3NlIG9ubHkgb25lIG9mIGEgcHJlZGVmaW5lZCBzZXQgb2YgbXV0dWFsbHkgZXhjbHVzaXZlIG9wdGlvbnMuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2hjLXJhZGlvLWJ1dHRvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3JhZGlvLWJ1dHRvbi5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcmFkaW8tYnV0dG9uLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUmFkaW9CdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgX3VuaXF1ZUlkID0gYGhjLXJhZGlvLWJ1dHRvbi0ke25leHRVbmlxdWVJZCsrfWA7XG4gICAgLyoqIEVsZW1lbnQgaWQgZm9yIHRoZSByYWRpbyBidXR0b24uIEF1dG8tZ2VuZXJhdGVkIGlkIHdpbGwgYmUgdXNlZCBpZiBub25lIGlzIHNldCAqL1xuICAgIEBJbnB1dCgpXG4gICAgaWQ6IHN0cmluZyA9IHRoaXMuX3VuaXF1ZUlkO1xuICAgIC8qKiBOYW1lIG9mIHJhZGlvIGJ1dHRvbiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIHZhbHVlIG9mIHRoZSByYWRpbyBidXR0b24gY2hhbmdlcyAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8UmFkaW9CdXR0b25DaGFuZ2VFdmVudD4oKTtcbiAgICBwcml2YXRlIF9jaGVja2VkOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfdmFsdWU6IGFueSA9IG51bGw7XG4gICAgcHJpdmF0ZSBfcmVxdWlyZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIF9kaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX3RpZ2h0OiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSByZWFkb25seSByYWRpb0dyb3VwOiBSYWRpb0dyb3VwRGlyZWN0aXZlIHwgbnVsbDtcblxuICAgIC8qKiBWYWx1ZSBvZiByYWRpbyBidXR0b25zICovXG4gICAgQElucHV0KClcbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICBzZXQgdmFsdWUodmFsdWU6IGFueSkge1xuICAgICAgICBpZiAodGhpcy5fdmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKHRoaXMucmFkaW9Hcm91cCAhPT0gbnVsbCAmJiAhdGhpcy5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gdGhpcy5yYWRpb0dyb3VwLnZhbHVlID09PSB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yYWRpb0dyb3VwICE9PSBudWxsICYmIHRoaXMuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmFkaW9Hcm91cC5zZWxlY3RlZCA9IHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuaWQnKVxuICAgIGdldCBfZ2V0SG9zdElkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xuICAgIH1cblxuICAgIC8qKiBCb29sZWFuIHZhbHVlIG9mIHdoZXRoZXIgdGhlIHJhZGlvIGJ1dHRvbiBpcyByZXF1aXJlZCAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHJlcXVpcmVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWlyZWQgfHwgKHRoaXMucmFkaW9Hcm91cCAhPSBudWxsICYmIHRoaXMucmFkaW9Hcm91cC5yZXF1aXJlZCk7XG4gICAgfVxuXG4gICAgc2V0IHJlcXVpcmVkKHJlcXVpcmVkKSB7XG4gICAgICAgIHRoaXMuX3JlcXVpcmVkID0gcGFyc2VCb29sZWFuQXR0cmlidXRlKHJlcXVpcmVkKTtcbiAgICB9XG5cbiAgICAvKiogQm9vbGVhbiB2YWx1ZSB0aGF0IGVuYWJsZXMvZGlzYWJsZXMgdGhlIHJhZGlvIGJ1dHRvbiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQgfHwgKHRoaXMucmFkaW9Hcm91cCAhPSBudWxsICYmIHRoaXMucmFkaW9Hcm91cC5kaXNhYmxlZCk7XG4gICAgfVxuXG4gICAgc2V0IGRpc2FibGVkKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSBwYXJzZUJvb2xlYW5BdHRyaWJ1dGUoaXNEaXNhYmxlZCk7XG4gICAgfVxuXG4gICAgLyoqIEJvb2xlYW4gdGhhdCByZXR1cm5zIHdoZXRoZXIgdGhlIHJhZGlvIGJ1dHRvbiBpcyBzZWxlY3RlZCAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGNoZWNrZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGVja2VkO1xuICAgIH1cblxuICAgIHNldCBjaGVja2VkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGxldCBuZXdDaGVja2VkU3RhdGUgPSBwYXJzZUJvb2xlYW5BdHRyaWJ1dGUodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5fY2hlY2tlZCAhPT0gbmV3Q2hlY2tlZFN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja2VkID0gbmV3Q2hlY2tlZFN0YXRlO1xuICAgICAgICAgICAgaWYgKG5ld0NoZWNrZWRTdGF0ZSAmJiB0aGlzLnJhZGlvR3JvdXAgJiYgdGhpcy5yYWRpb0dyb3VwLnZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYWRpb0dyb3VwLnNlbGVjdGVkID0gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIW5ld0NoZWNrZWRTdGF0ZSAmJiB0aGlzLnJhZGlvR3JvdXAgJiYgdGhpcy5yYWRpb0dyb3VwLnZhbHVlID09PSB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYWRpb0dyb3VwLnNlbGVjdGVkID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgX2lubGluZUdyb3VwKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5yYWRpb0dyb3VwICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yYWRpb0dyb3VwLmlubGluZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBJZiB0cnVlLCBjb25kZW5zZSB0aGUgZGVmYXVsdCBtYXJnaW4sIHJlZHVjZSB0aGUgZm9udCBzaXplLCBhbmQgZGVjcmVhc2UgdGhlIGNpcmNsZSBzaXplLlxuICAgICAqIEluaGVyaXRzIHZhbHVlIGZyb20gcGFyZW50IHJhZGlvIGdyb3VwIGlmIHBhcnQgb2Ygb25lLiAqRGVmYXVsdHMgdG8gYGZhbHNlYC4qICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHRpZ2h0KCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5yYWRpb0dyb3VwICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yYWRpb0dyb3VwLnRpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCB0aWdodCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl90aWdodCA9IHBhcnNlQm9vbGVhbkF0dHJpYnV0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0IF9pbnB1dElkKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5pZCB8fCB0aGlzLl91bmlxdWVJZH0taW5wdXRgO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHJhZGlvR3JvdXA6IFJhZGlvR3JvdXBEaXJlY3RpdmUsIHByaXZhdGUgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwdWJsaWMgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgdGhpcy5yYWRpb0dyb3VwID0gcmFkaW9Hcm91cDtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmFkaW9Hcm91cCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gdGhpcy5yYWRpb0dyb3VwLnZhbHVlID09PSB0aGlzLl92YWx1ZTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMucmFkaW9Hcm91cC5uYW1lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uSW5wdXRDbGljayhldmVudDogRXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgX29uSW5wdXRDaGFuZ2UoZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBjb25zdCB2YWx1ZUNoYW5nZWQgPSB0aGlzLnJhZGlvR3JvdXAgJiYgdGhpcy52YWx1ZSAhPT0gdGhpcy5yYWRpb0dyb3VwLnZhbHVlO1xuICAgICAgICB0aGlzLl9lbWl0Q2hhbmdlRXZlbnQoKTtcbiAgICAgICAgaWYgKHRoaXMucmFkaW9Hcm91cCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5yYWRpb0dyb3VwLl9vbkNoYW5nZUZuKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5yYWRpb0dyb3VwLl90b3VjaCgpO1xuICAgICAgICAgICAgaWYgKHZhbHVlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmFkaW9Hcm91cC5fZW1pdENoYW5nZUV2ZW50KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yYWRpb0dyb3VwLnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9lbWl0Q2hhbmdlRXZlbnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hhbmdlLmVtaXQobmV3IFJhZGlvQnV0dG9uQ2hhbmdlRXZlbnQodGhpcywgdGhpcy52YWx1ZSkpO1xuICAgIH1cblxuICAgIF9tYXJrRm9yQ2hlY2soKSB7XG4gICAgICAgIHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxufVxuIl19