/**
 * @fileoverview added by tsickle
 * Generated from: lib/form-field/hc-form.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ContentChildren, QueryList } from '@angular/core';
import { parseBooleanAttribute } from '../util';
import { HcFormFieldComponent } from './hc-form-field.component';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
/**
 * `hcForm` directive that allows settings to be applied to all included HcFormFields
 */
export class HcFormDirective {
    constructor() {
        this._tight = false;
        this.unsubscribe$ = new Subject();
    }
    /**
     * Set the tight parameter on all enclosed HcFormFields. *Defaults to `false`.*
     * @return {?}
     */
    get tight() {
        return this._tight;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tight(value) {
        this._tight = parseBooleanAttribute(value);
        this._updateTightFields();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._updateTightFields();
        // Pass the tight setting to any FormFields added dynamically
        this._formFields.changes.pipe(takeUntil(this.unsubscribe$)).subscribe((/**
         * @return {?}
         */
        () => this._updateTightFields()));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    /**
     * @return {?}
     */
    _updateTightFields() {
        if (this._formFields) {
            this._formFields.forEach((/**
             * @param {?} field
             * @return {?}
             */
            field => {
                field.tight = this._tight;
            }));
        }
    }
}
HcFormDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hcForm]'
            },] }
];
HcFormDirective.propDecorators = {
    _formFields: [{ type: ContentChildren, args: [HcFormFieldComponent,] }],
    tight: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcFormDirective.prototype._tight;
    /**
     * @type {?}
     * @private
     */
    HcFormDirective.prototype.unsubscribe$;
    /** @type {?} */
    HcFormDirective.prototype._formFields;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGMtZm9ybS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvZm9ybS1maWVsZC9oYy1mb3JtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQThCLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM5QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQzs7OztBQU03QixNQUFNLE9BQU8sZUFBZTtJQUg1QjtRQUlZLFdBQU0sR0FBWSxLQUFLLENBQUM7UUFDeEIsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBaUMvQyxDQUFDOzs7OztJQTNCRyxJQUNJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFDRCxJQUFJLEtBQUssQ0FBQyxLQUFLO1FBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7O0lBRUQsa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUIsNkRBQTZEO1FBQzdELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUMsQ0FBQztJQUMzRyxDQUFDOzs7O0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsa0JBQWtCO1FBQ2QsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTzs7OztZQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM3QixLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDOUIsQ0FBQyxFQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7OztZQXJDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFVBQVU7YUFDdkI7OzswQkFLSSxlQUFlLFNBQUMsb0JBQW9CO29CQUlwQyxLQUFLOzs7Ozs7O0lBUE4saUNBQWdDOzs7OztJQUNoQyx1Q0FBMkM7O0lBRTNDLHNDQUM2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbnB1dCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3BhcnNlQm9vbGVhbkF0dHJpYnV0ZX0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge0hjRm9ybUZpZWxkQ29tcG9uZW50fSBmcm9tICcuL2hjLWZvcm0tZmllbGQuY29tcG9uZW50JztcbmltcG9ydCB7dGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG4vKiogYGhjRm9ybWAgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHNldHRpbmdzIHRvIGJlIGFwcGxpZWQgdG8gYWxsIGluY2x1ZGVkIEhjRm9ybUZpZWxkcyAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaGNGb3JtXSdcbn0pXG5leHBvcnQgY2xhc3MgSGNGb3JtRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF90aWdodDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIEBDb250ZW50Q2hpbGRyZW4oSGNGb3JtRmllbGRDb21wb25lbnQpXG4gICAgX2Zvcm1GaWVsZHM6IFF1ZXJ5TGlzdDxIY0Zvcm1GaWVsZENvbXBvbmVudD47XG5cbiAgICAvKiogU2V0IHRoZSB0aWdodCBwYXJhbWV0ZXIgb24gYWxsIGVuY2xvc2VkIEhjRm9ybUZpZWxkcy4gKkRlZmF1bHRzIHRvIGBmYWxzZWAuKiAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCB0aWdodCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpZ2h0O1xuICAgIH1cbiAgICBzZXQgdGlnaHQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdGlnaHQgPSBwYXJzZUJvb2xlYW5BdHRyaWJ1dGUodmFsdWUpO1xuICAgICAgICB0aGlzLl91cGRhdGVUaWdodEZpZWxkcygpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlVGlnaHRGaWVsZHMoKTtcbiAgICAgICAgLy8gUGFzcyB0aGUgdGlnaHQgc2V0dGluZyB0byBhbnkgRm9ybUZpZWxkcyBhZGRlZCBkeW5hbWljYWxseVxuICAgICAgICB0aGlzLl9mb3JtRmllbGRzLmNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSQpKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5fdXBkYXRlVGlnaHRGaWVsZHMoKSk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUkLm5leHQoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBfdXBkYXRlVGlnaHRGaWVsZHMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9mb3JtRmllbGRzKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3JtRmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgICAgICAgIGZpZWxkLnRpZ2h0ID0gdGhpcy5fdGlnaHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==