/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal/modal-overlay.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, HostListener, Input, ViewEncapsulation } from '@angular/core';
import { ActiveModal } from './active-modal';
import { animate, state, style, transition, trigger } from '@angular/animations';
export class ModalOverlayComponent {
    /**
     * @param {?} activeModal
     */
    constructor(activeModal) {
        this.activeModal = activeModal;
        this._ignoreEscapeKey = false;
    }
    /**
     * @return {?}
     */
    _fadeInOut() {
        return state;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _escapeKey(event) {
        if (!this._ignoreEscapeKey) {
            this.activeModal.dismiss();
        }
    }
}
ModalOverlayComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-modal-overlay',
                template: '',
                encapsulation: ViewEncapsulation.None,
                // tslint:disable-next-line: no-host-metadata-property
                host: { class: 'hc-modal-overlay' },
                animations: [
                    trigger('fadeInOut', [
                        state('in', style({ opacity: 0.5 })),
                        transition('void <=> *', [
                            style({
                                opacity: 0
                            }),
                            animate('0.2s ease-in-out')
                        ])
                    ])
                ],
                styles: [`
            .hc-modal-overlay {
                background-color: #000;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                opacity: 0.5;
                display: block;
            }
        `]
            }] }
];
/** @nocollapse */
ModalOverlayComponent.ctorParameters = () => [
    { type: ActiveModal }
];
ModalOverlayComponent.propDecorators = {
    _ignoreEscapeKey: [{ type: Input }],
    _fadeInOut: [{ type: HostBinding, args: ['@fadeInOut',] }],
    _escapeKey: [{ type: HostListener, args: ['document:keyup.escape', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ModalOverlayComponent.prototype._ignoreEscapeKey;
    /**
     * @type {?}
     * @private
     */
    ModalOverlayComponent.prototype.activeModal;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtb3ZlcmxheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvbW9kYWwvbW9kYWwtb3ZlcmxheS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBa0MvRSxNQUFNLE9BQU8scUJBQXFCOzs7O0lBSTlCLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBRjVDLHFCQUFnQixHQUFHLEtBQUssQ0FBQztJQUVzQixDQUFDOzs7O0lBR2hELFVBQVU7UUFDTixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7OztJQUdELFVBQVUsQ0FBQyxLQUFVO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUM5QjtJQUNMLENBQUM7OztZQWhESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2dCQWdCckMsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLGtCQUFrQixFQUFDO2dCQUNqQyxVQUFVLEVBQUU7b0JBQ1IsT0FBTyxDQUFDLFdBQVcsRUFBRTt3QkFDakIsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQzt3QkFDbEMsVUFBVSxDQUFDLFlBQVksRUFBRTs0QkFDckIsS0FBSyxDQUFDO2dDQUNGLE9BQU8sRUFBRSxDQUFDOzZCQUNiLENBQUM7NEJBQ0YsT0FBTyxDQUFDLGtCQUFrQixDQUFDO3lCQUM5QixDQUFDO3FCQUNMLENBQUM7aUJBQ0w7eUJBekJHOzs7Ozs7Ozs7OztTQVdDO2FBZVI7Ozs7WUFsQ08sV0FBVzs7OytCQW9DZCxLQUFLO3lCQUtMLFdBQVcsU0FBQyxZQUFZO3lCQUt4QixZQUFZLFNBQUMsdUJBQXVCLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUFWakQsaURBQ3lCOzs7OztJQUViLDRDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBY3RpdmVNb2RhbH0gZnJvbSAnLi9hY3RpdmUtbW9kYWwnO1xuaW1wb3J0IHthbmltYXRlLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXJ9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2hjLW1vZGFsLW92ZXJsYXknLFxuICAgIHRlbXBsYXRlOiAnJyxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIHN0eWxlczogW1xuICAgICAgICBgXG4gICAgICAgICAgICAuaGMtbW9kYWwtb3ZlcmxheSB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgICAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICAgIF0sXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5XG4gICAgaG9zdDoge2NsYXNzOiAnaGMtbW9kYWwtb3ZlcmxheSd9LFxuICAgIGFuaW1hdGlvbnM6IFtcbiAgICAgICAgdHJpZ2dlcignZmFkZUluT3V0JywgW1xuICAgICAgICAgICAgc3RhdGUoJ2luJywgc3R5bGUoe29wYWNpdHk6IDAuNX0pKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPD0+IConLCBbXG4gICAgICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgYW5pbWF0ZSgnMC4ycyBlYXNlLWluLW91dCcpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgTW9kYWxPdmVybGF5Q29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIF9pZ25vcmVFc2NhcGVLZXkgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWN0aXZlTW9kYWw6IEFjdGl2ZU1vZGFsKSB7fVxuXG4gICAgQEhvc3RCaW5kaW5nKCdAZmFkZUluT3V0JylcbiAgICBfZmFkZUluT3V0KCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6a2V5dXAuZXNjYXBlJywgWyckZXZlbnQnXSlcbiAgICBfZXNjYXBlS2V5KGV2ZW50OiBhbnkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pZ25vcmVFc2NhcGVLZXkpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlTW9kYWwuZGlzbWlzcygpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19