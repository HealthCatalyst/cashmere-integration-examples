/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal/modal.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ModalWindowComponent } from './modal-window.component';
import { ModalOverlayComponent } from './modal-overlay.component';
import { HcModal } from './modal';
import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector, RendererFactory2, TemplateRef } from '@angular/core';
import { ActiveModal } from './active-modal';
export class ModalService {
    /**
     * @param {?} _componentFactory
     * @param {?} _injector
     * @param {?} _applicationRef
     * @param {?} _rendererFactory
     */
    constructor(_componentFactory, _injector, _applicationRef, _rendererFactory) {
        this._componentFactory = _componentFactory;
        this._injector = _injector;
        this._applicationRef = _applicationRef;
        /**
         * Defaults to false. Restricts multiple modals from being opened on top of each other
         * (an error will be thrown if attempted). It's generally considered bad practice to open multiple
         * models at once, so only change this with good reason.
         */
        this.allowMultiple = false;
        // start at 2000 (reserved range for modals, see _variables.scss)
        this._zIndexCounter = 2000;
        this._modalsOpen = 0;
        this._renderer = _rendererFactory.createRenderer(null, null);
    }
    /**
     * Opens a new modal either from a Component or a TemplateRef with the options specified in ModalOptions
     * In order to use a component, it must be specified in your module's EntryComponents.
     * @template T
     * @param {?} modalContent
     * @param {?=} modalOptions
     * @return {?}
     */
    open(modalContent, modalOptions) {
        if (!this.allowMultiple && this._modalsOpen !== 0) {
            throw new Error(`Multiple modals may not be opened at the same time
                when the allowMultiple property on ModalService is set to false.`);
        }
        /** @type {?} */
        let container = (/** @type {?} */ (document.querySelector('body')));
        /** @type {?} */
        const defaultOptions = {
            container,
            data: {},
            ignoreEscapeKey: false,
            size: 'auto',
            ignoreOverlayClick: false
        };
        /** @type {?} */
        const options = Object.assign({}, defaultOptions, modalOptions);
        if (options.container) {
            container = options.container;
        }
        if (!container) {
            throw new Error('Modal requires that a container be set in the modal options');
        }
        // TODO: HcModal and ActiveModal essentially are the same object with HcModal having refs. Might as well merge them to simplify
        /** @type {?} */
        let modal = new HcModal();
        /** @type {?} */
        let activeModalRef = new ActiveModal();
        modal.data = options.data;
        activeModalRef.data = options.data;
        /** @type {?} */
        const modalInjector = Injector.create({
            providers: [{ provide: ActiveModal, useValue: activeModalRef }],
            parent: this._injector
        });
        // disable scrolling when overlay is present
        this._renderer.addClass(container, 'hc-modal-open');
        modal._removeOpenClass = (/**
         * @return {?}
         */
        () => this._renderer.removeClass(container, 'hc-modal-open'));
        // Create, attach, and append overlay to container
        /** @type {?} */
        let overlay = this._componentFactory.resolveComponentFactory(ModalOverlayComponent).create(modalInjector);
        this._renderer.setStyle(overlay.location.nativeElement, 'z-index', this._zIndexCounter);
        overlay.instance._ignoreEscapeKey = options.ignoreEscapeKey;
        this._applicationRef.attachView(overlay.hostView);
        container.appendChild(overlay.location.nativeElement);
        modal.overlay = overlay;
        // Create and attach content views; prepare nodes to be
        // transcluded with the window ComponentRef
        /** @type {?} */
        let projectableNodes;
        if (modalContent instanceof TemplateRef) {
            /** @type {?} */
            const embeddedViewRef = modalContent.createEmbeddedView(activeModalRef);
            this._applicationRef.attachView(embeddedViewRef);
            projectableNodes = [embeddedViewRef.rootNodes];
        }
        else {
            /** @type {?} */
            const componentRef = this._componentFactory.resolveComponentFactory(modalContent).create(modalInjector);
            // Set host component style to 100% to allow collapsing of body but not header/footer
            this._renderer.addClass(componentRef.location.nativeElement, 'hc-modal-center-component');
            this._applicationRef.attachView(componentRef.hostView);
            modal.componentRef = (/** @type {?} */ (componentRef));
            projectableNodes = [[componentRef.location.nativeElement]];
        }
        // Create, attach, and append Window to container
        // Apply options
        /** @type {?} */
        let window = this._componentFactory.resolveComponentFactory(ModalWindowComponent).create(modalInjector, projectableNodes);
        this._renderer.setStyle(window.location.nativeElement, 'z-index', this._zIndexCounter + 1);
        window.instance._size = (/** @type {?} */ (options.size));
        window.instance._ignoreOverlayClick = options.ignoreOverlayClick;
        this._applicationRef.attachView(window.hostView);
        container.appendChild(window.location.nativeElement);
        modal.window = window;
        activeModalRef.close = (/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            modal.close(result);
        });
        activeModalRef.dismiss = (/**
         * @return {?}
         */
        () => modal.dismiss());
        this._modalsOpen++;
        modal._modalClose.subscribe((/**
         * @return {?}
         */
        () => {
            this._modalsOpen--;
            modal._modalClose.unsubscribe();
        }));
        this._zIndexCounter += 2;
        return modal;
    }
}
ModalService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ModalService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef },
    { type: RendererFactory2 }
];
if (false) {
    /**
     * Defaults to false. Restricts multiple modals from being opened on top of each other
     * (an error will be thrown if attempted). It's generally considered bad practice to open multiple
     * models at once, so only change this with good reason.
     * @type {?}
     */
    ModalService.prototype.allowMultiple;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype._zIndexCounter;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype._modalsOpen;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype._componentFactory;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype._applicationRef;
}
//# sourceMappingURL=data:application/json;base64,