/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal/modal.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * @template T
 */
export class HcModal {
    constructor() {
        this._result = new Subject();
        this._modalClose = new EventEmitter();
    }
    /**
     * Subscribe to result in order to get access to modal result values passed in ActiveModal.close()
     * @return {?}
     */
    get result() {
        return this._result.asObservable();
    }
    /**
     * Closes the modal with a result.
     * Use this close method when opening a modal using a TemplateRef.
     * To close a modal that was created from a Component, inject ActiveModal and use the close method
     * on ActiveModal
     * @param {?=} result
     * @return {?}
     */
    close(result) {
        this.removeModalElements();
        this._result.next(result);
    }
    /**
     * Dismisses the modal with no result.
     * Use this dismiss method when opening a modal using a TemplateRef.
     * To dismiss a modal that was created from a Component, inject ActiveModal and use the dismiss method
     * on ActiveModal
     * @return {?}
     */
    dismiss() {
        this.removeModalElements();
    }
    /**
     * @private
     * @return {?}
     */
    removeModalElements() {
        if (this.window) {
            /** @type {?} */
            const windowNativeElement = this.window.location.nativeElement;
            windowNativeElement.parentNode.removeChild(windowNativeElement);
            this.window.destroy();
        }
        if (this.overlay) {
            /** @type {?} */
            const overlayNativeElement = this.overlay.location.nativeElement;
            overlayNativeElement.parentNode.removeChild(overlayNativeElement);
            this.overlay.destroy();
        }
        if (this.componentRef) {
            /** @type {?} */
            const componentNativeElement = this.componentRef.location.nativeElement;
            componentNativeElement.parentNode.removeChild(componentNativeElement);
            this.componentRef.destroy();
        }
        if (this._removeOpenClass) {
            this._removeOpenClass();
        }
        this._modalClose.emit();
        this.window = null;
        this.overlay = null;
        this.componentRef = null;
        this._removeOpenClass = null;
    }
}
if (false) {
    /**
     * Allows direct access to the component used to create the modal. Null when TemplateRef is used
     * @type {?}
     */
    HcModal.prototype.componentRef;
    /**
     * Allows direct access to overlay component which holds the component/template
     * @type {?}
     */
    HcModal.prototype.overlay;
    /**
     * Allows direct access to window component which holds the component/template
     * @type {?}
     */
    HcModal.prototype.window;
    /**
     * @type {?}
     * @private
     */
    HcModal.prototype._result;
    /** @type {?} */
    HcModal.prototype._removeOpenClass;
    /** @type {?} */
    HcModal.prototype._modalClose;
    /**
     * Data that was passed in through ModalOptions
     * @type {?}
     */
    HcModal.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvbW9kYWwvbW9kYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQWUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBQyxPQUFPLEVBQWEsTUFBTSxNQUFNLENBQUM7Ozs7QUFFekMsTUFBTSxPQUFPLE9BQU87SUFBcEI7UUFlWSxZQUFPLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFJbkQsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBb0RyQyxDQUFDOzs7OztJQTVERyxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdkMsQ0FBQzs7Ozs7Ozs7O0lBZUQsS0FBSyxDQUFDLE1BQVk7UUFDZCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7Ozs7OztJQU1ELE9BQU87UUFDSCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVPLG1CQUFtQjtRQUN2QixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7O2tCQUNQLG1CQUFtQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWE7WUFDOUQsbUJBQW1CLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDekI7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7O2tCQUNSLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGFBQWE7WUFDaEUsb0JBQW9CLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDMUI7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7O2tCQUNiLHNCQUFzQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWE7WUFDdkUsc0JBQXNCLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDL0I7UUFFRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUMzQjtRQUVELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztJQUNqQyxDQUFDO0NBQ0o7Ozs7OztJQXJFRywrQkFBcUM7Ozs7O0lBR3JDLDBCQUFvRDs7Ozs7SUFHcEQseUJBQWtEOzs7OztJQU9sRCwwQkFBbUQ7O0lBRW5ELG1DQUFzQzs7SUFFdEMsOEJBQWlDOzs7OztJQUdqQyx1QkFBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9kYWxPdmVybGF5Q29tcG9uZW50fSBmcm9tICcuL21vZGFsLW92ZXJsYXkuY29tcG9uZW50JztcbmltcG9ydCB7Q29tcG9uZW50UmVmLCBFdmVudEVtaXR0ZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNb2RhbFdpbmRvd0NvbXBvbmVudH0gZnJvbSAnLi9tb2RhbC13aW5kb3cuY29tcG9uZW50JztcbmltcG9ydCB7U3ViamVjdCwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBIY01vZGFsPFQ+IHtcbiAgICAvKiogQWxsb3dzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIGNvbXBvbmVudCB1c2VkIHRvIGNyZWF0ZSB0aGUgbW9kYWwuIE51bGwgd2hlbiBUZW1wbGF0ZVJlZiBpcyB1c2VkICovXG4gICAgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VD4gfCBudWxsO1xuXG4gICAgLyoqIEFsbG93cyBkaXJlY3QgYWNjZXNzIHRvIG92ZXJsYXkgY29tcG9uZW50IHdoaWNoIGhvbGRzIHRoZSBjb21wb25lbnQvdGVtcGxhdGUgKi9cbiAgICBvdmVybGF5OiBDb21wb25lbnRSZWY8TW9kYWxPdmVybGF5Q29tcG9uZW50PiB8IG51bGw7XG5cbiAgICAvKiogQWxsb3dzIGRpcmVjdCBhY2Nlc3MgdG8gd2luZG93IGNvbXBvbmVudCB3aGljaCBob2xkcyB0aGUgY29tcG9uZW50L3RlbXBsYXRlICovXG4gICAgd2luZG93OiBDb21wb25lbnRSZWY8TW9kYWxXaW5kb3dDb21wb25lbnQ+IHwgbnVsbDtcblxuICAgIC8qKiBTdWJzY3JpYmUgdG8gcmVzdWx0IGluIG9yZGVyIHRvIGdldCBhY2Nlc3MgdG8gbW9kYWwgcmVzdWx0IHZhbHVlcyBwYXNzZWQgaW4gQWN0aXZlTW9kYWwuY2xvc2UoKSAqL1xuICAgIGdldCByZXN1bHQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdC5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9yZXN1bHQ6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcblxuICAgIF9yZW1vdmVPcGVuQ2xhc3M6ICgoKSA9PiB2b2lkKSB8IG51bGw7XG5cbiAgICBfbW9kYWxDbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKiBEYXRhIHRoYXQgd2FzIHBhc3NlZCBpbiB0aHJvdWdoIE1vZGFsT3B0aW9ucyAqL1xuICAgIGRhdGE/OiBhbnk7XG5cbiAgICAvKiogQ2xvc2VzIHRoZSBtb2RhbCB3aXRoIGEgcmVzdWx0LlxuICAgICAqIFVzZSB0aGlzIGNsb3NlIG1ldGhvZCB3aGVuIG9wZW5pbmcgYSBtb2RhbCB1c2luZyBhIFRlbXBsYXRlUmVmLlxuICAgICAqIFRvIGNsb3NlIGEgbW9kYWwgdGhhdCB3YXMgY3JlYXRlZCBmcm9tIGEgQ29tcG9uZW50LCBpbmplY3QgQWN0aXZlTW9kYWwgYW5kIHVzZSB0aGUgY2xvc2UgbWV0aG9kXG4gICAgICogb24gQWN0aXZlTW9kYWwgKi9cbiAgICBjbG9zZShyZXN1bHQ/OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVNb2RhbEVsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMuX3Jlc3VsdC5uZXh0KHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqIERpc21pc3NlcyB0aGUgbW9kYWwgd2l0aCBubyByZXN1bHQuXG4gICAgICogVXNlIHRoaXMgZGlzbWlzcyBtZXRob2Qgd2hlbiBvcGVuaW5nIGEgbW9kYWwgdXNpbmcgYSBUZW1wbGF0ZVJlZi5cbiAgICAgKiBUbyBkaXNtaXNzIGEgbW9kYWwgdGhhdCB3YXMgY3JlYXRlZCBmcm9tIGEgQ29tcG9uZW50LCBpbmplY3QgQWN0aXZlTW9kYWwgYW5kIHVzZSB0aGUgZGlzbWlzcyBtZXRob2RcbiAgICAgKiBvbiBBY3RpdmVNb2RhbCAqL1xuICAgIGRpc21pc3MoKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlTW9kYWxFbGVtZW50cygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlTW9kYWxFbGVtZW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMud2luZG93KSB7XG4gICAgICAgICAgICBjb25zdCB3aW5kb3dOYXRpdmVFbGVtZW50ID0gdGhpcy53aW5kb3cubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIHdpbmRvd05hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3aW5kb3dOYXRpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMud2luZG93LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm92ZXJsYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXlOYXRpdmVFbGVtZW50ID0gdGhpcy5vdmVybGF5LmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICBvdmVybGF5TmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG92ZXJsYXlOYXRpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMub3ZlcmxheS5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudE5hdGl2ZUVsZW1lbnQgPSB0aGlzLmNvbXBvbmVudFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50O1xuICAgICAgICAgICAgY29tcG9uZW50TmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbXBvbmVudE5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlbW92ZU9wZW5DbGFzcykge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlT3BlbkNsYXNzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb2RhbENsb3NlLmVtaXQoKTtcblxuICAgICAgICB0aGlzLndpbmRvdyA9IG51bGw7XG4gICAgICAgIHRoaXMub3ZlcmxheSA9IG51bGw7XG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVtb3ZlT3BlbkNsYXNzID0gbnVsbDtcbiAgICB9XG59XG4iXX0=