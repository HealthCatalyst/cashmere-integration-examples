/**
 * @fileoverview added by tsickle
 * Generated from: lib/app-switcher/app-switcher.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { APP_SWITCHER_CONFIG } from './app-switcher-interfaces';
/**
 * An app switcher service designed to work with the Health Catalyst DOS platform's DiscoveryService
 */
export class AppSwitcherService {
    /**
     * @param {?} http
     * @param {?} config
     */
    constructor(http, config) {
        this.http = http;
        this.config = config;
        if (!config || !config.discoveryServiceUri) {
            throw new Error([
                'Failed to initialize AppSwitcherService: invalid APP_SWITCHER_CONFIG.',
                'You must provide a config object with a `discoveryServiceUri`.',
                `(value provided: ${config ? config.discoveryServiceUri : config})`
            ].join(' '));
        }
        this.discoveryServiceUri = this.normalizeUri(this.config.discoveryServiceUri);
        this.allApplicationsUri = `${this.discoveryServiceUri}/apps`;
    }
    /**
     * @return {?}
     */
    getApplications() {
        /** @type {?} */
        const url = `${this.discoveryServiceUri}/v1/Services?$filter=DiscoveryType eq 'Application' and IsHidden eq false&$top=12`;
        return this.http.get(url, { withCredentials: true });
    }
    /**
     * @private
     * @param {?} uri
     * @return {?}
     */
    normalizeUri(uri) {
        return uri.replace(/\/(v\d+\/?)?$/, '');
    }
}
AppSwitcherService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AppSwitcherService.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [APP_SWITCHER_CONFIG,] }] }
];
if (false) {
    /** @type {?} */
    AppSwitcherService.prototype.allApplicationsUri;
    /**
     * @type {?}
     * @private
     */
    AppSwitcherService.prototype.discoveryServiceUri;
    /**
     * @type {?}
     * @private
     */
    AppSwitcherService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AppSwitcherService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXN3aXRjaGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvYXBwLXN3aXRjaGVyL2FwcC1zd2l0Y2hlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBNkQsbUJBQW1CLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQzs7OztBQU0xSCxNQUFNLE9BQU8sa0JBQWtCOzs7OztJQUkzQixZQUFvQixJQUFnQixFQUF1QyxNQUEwQjtRQUFqRixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQXVDLFdBQU0sR0FBTixNQUFNLENBQW9CO1FBQ2pHLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUU7WUFDeEMsTUFBTSxJQUFJLEtBQUssQ0FDWDtnQkFDSSx1RUFBdUU7Z0JBQ3ZFLGdFQUFnRTtnQkFDaEUsb0JBQW9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUc7YUFDdEUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQ2QsQ0FBQztTQUNMO1FBRUQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsT0FBTyxDQUFDO0lBQ2pFLENBQUM7Ozs7SUFFRCxlQUFlOztjQUNMLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsbUZBQW1GO1FBQzFILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQW9CLEdBQUcsRUFBRSxFQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7Ozs7OztJQUVPLFlBQVksQ0FBQyxHQUFXO1FBQzVCLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7O1lBM0JKLFVBQVU7Ozs7WUFQSCxVQUFVOzRDQVl5QixNQUFNLFNBQUMsbUJBQW1COzs7O0lBSGpFLGdEQUFvQzs7Ozs7SUFDcEMsaURBQTZDOzs7OztJQUVqQyxrQ0FBd0I7Ozs7O0lBQUUsb0NBQStEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0lBcHBTd2l0Y2hlckNvbmZpZywgSUFwcFN3aXRjaGVyU2VydmljZSwgSURpc2NvdmVyeVJlcXVlc3QsIEFQUF9TV0lUQ0hFUl9DT05GSUd9IGZyb20gJy4vYXBwLXN3aXRjaGVyLWludGVyZmFjZXMnO1xuXG4vKipcbiAqIEFuIGFwcCBzd2l0Y2hlciBzZXJ2aWNlIGRlc2lnbmVkIHRvIHdvcmsgd2l0aCB0aGUgSGVhbHRoIENhdGFseXN0IERPUyBwbGF0Zm9ybSdzIERpc2NvdmVyeVNlcnZpY2VcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwcFN3aXRjaGVyU2VydmljZSBpbXBsZW1lbnRzIElBcHBTd2l0Y2hlclNlcnZpY2Uge1xuICAgIHJlYWRvbmx5IGFsbEFwcGxpY2F0aW9uc1VyaTogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGlzY292ZXJ5U2VydmljZVVyaTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBASW5qZWN0KEFQUF9TV0lUQ0hFUl9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBJQXBwU3dpdGNoZXJDb25maWcpIHtcbiAgICAgICAgaWYgKCFjb25maWcgfHwgIWNvbmZpZy5kaXNjb3ZlcnlTZXJ2aWNlVXJpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGluaXRpYWxpemUgQXBwU3dpdGNoZXJTZXJ2aWNlOiBpbnZhbGlkIEFQUF9TV0lUQ0hFUl9DT05GSUcuJyxcbiAgICAgICAgICAgICAgICAgICAgJ1lvdSBtdXN0IHByb3ZpZGUgYSBjb25maWcgb2JqZWN0IHdpdGggYSBgZGlzY292ZXJ5U2VydmljZVVyaWAuJyxcbiAgICAgICAgICAgICAgICAgICAgYCh2YWx1ZSBwcm92aWRlZDogJHtjb25maWcgPyBjb25maWcuZGlzY292ZXJ5U2VydmljZVVyaSA6IGNvbmZpZ30pYFxuICAgICAgICAgICAgICAgIF0uam9pbignICcpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXNjb3ZlcnlTZXJ2aWNlVXJpID0gdGhpcy5ub3JtYWxpemVVcmkodGhpcy5jb25maWcuZGlzY292ZXJ5U2VydmljZVVyaSk7XG4gICAgICAgIHRoaXMuYWxsQXBwbGljYXRpb25zVXJpID0gYCR7dGhpcy5kaXNjb3ZlcnlTZXJ2aWNlVXJpfS9hcHBzYDtcbiAgICB9XG5cbiAgICBnZXRBcHBsaWNhdGlvbnMoKTogT2JzZXJ2YWJsZTxJRGlzY292ZXJ5UmVxdWVzdD4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmRpc2NvdmVyeVNlcnZpY2VVcml9L3YxL1NlcnZpY2VzPyRmaWx0ZXI9RGlzY292ZXJ5VHlwZSBlcSAnQXBwbGljYXRpb24nIGFuZCBJc0hpZGRlbiBlcSBmYWxzZSYkdG9wPTEyYDtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8SURpc2NvdmVyeVJlcXVlc3Q+KHVybCwge3dpdGhDcmVkZW50aWFsczogdHJ1ZX0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgbm9ybWFsaXplVXJpKHVyaTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHVyaS5yZXBsYWNlKC9cXC8odlxcZCtcXC8/KT8kLywgJycpO1xuICAgIH1cbn1cbiJdfQ==