/**
 * @fileoverview added by tsickle
 * Generated from: lib/input/input.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostBinding, HostListener, Input, Optional, Self, forwardRef } from '@angular/core';
import { parseBooleanAttribute } from '../util';
import { HcFormControlComponent } from '../form-field/hc-form-control.component';
import { FormGroupDirective, NgControl, NgForm } from '@angular/forms';
/**
 * @param {?} type
 * @return {?}
 */
export function getUnsupportedHCInputType(type) {
    return new Error(`hc-input doesn't support the following type: ${type}`);
}
/** @type {?} */
let uniqueId = 1;
/** @type {?} */
const unsupportedTypes = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset'];
/**
 * Directive that allows a native input to work inside a HcFormFieldComponent
 */
export class InputDirective extends HcFormControlComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _parentForm
     * @param {?} _parentFormGroup
     * @param {?} _ngControl
     */
    constructor(_elementRef, _parentForm, _parentFormGroup, _ngControl) {
        super();
        this._elementRef = _elementRef;
        this._ngControl = _ngControl;
        this._focused = false;
        this._uniqueInputId = `hc-input-${uniqueId++}`;
        this._componentId = this._uniqueInputId;
        this._type = 'input';
        this._readonly = false;
        this._hostHcInputClass = true;
        this._form = _parentForm || _parentFormGroup;
    }
    /**
     * Input type of the element.
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    set type(type) {
        if (unsupportedTypes.indexOf(type) > -1) {
            throw getUnsupportedHCInputType(type);
        }
        this._type = type;
        // textArea doesn't have type property
        if (!this._isTextArea()) {
            this._elementRef.nativeElement.type = this.type;
        }
    }
    /**
     * Element id.
     * @return {?}
     */
    get id() {
        return this._componentId || this._uniqueInputId;
    }
    /**
     * @param {?} idVal
     * @return {?}
     */
    set id(idVal) {
        this._componentId = idVal ? idVal : this._uniqueInputId;
    }
    /**
     * Sets input element as readonly.
     * @return {?}
     */
    get readonly() {
        return this._readonly;
    }
    /**
     * @param {?} isReadOnly
     * @return {?}
     */
    set readonly(isReadOnly) {
        this._readonly = parseBooleanAttribute(isReadOnly);
    }
    /**
     * Disables the input element.
     * @return {?}
     */
    get disabled() {
        if (this._ngControl && this._ngControl.disabled) {
            return this._ngControl.disabled;
        }
        return this._isDisabled;
    }
    /**
     * @param {?} disabledInput
     * @return {?}
     */
    set disabled(disabledInput) {
        this._isDisabled = parseBooleanAttribute(disabledInput);
        if (this._focused) {
            this._focused = false;
            // TODO: trigger state change
        }
    }
    /**
     * Sets required attribute.
     * @return {?}
     */
    get required() {
        return this._isRequired;
    }
    /**
     * @param {?} requiredInput
     * @return {?}
     */
    set required(requiredInput) {
        this._isRequired = parseBooleanAttribute(requiredInput);
    }
    /**
     * @return {?}
     */
    get _hostId() {
        return this._componentId || this._uniqueInputId;
    }
    /**
     * @return {?}
     */
    get _hostReadOnly() {
        return this.readonly;
    }
    /**
     * @return {?}
     */
    get _hostDisabled() {
        return this.disabled;
    }
    /**
     * @return {?}
     */
    get _hostRequired() {
        return this._isRequired;
    }
    /**
     * @return {?}
     */
    _onBlur() {
        this._changeFocus(false);
    }
    /**
     * @return {?}
     */
    _onFocus() {
        this._changeFocus(true);
    }
    /**
     * Sets value of the input element
     * @return {?}
     */
    get value() {
        return this._elementRef.nativeElement.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (value !== this.value) {
            this._elementRef.nativeElement.value = value;
        }
    }
    /**
     * @return {?}
     */
    _inputEvent() {
        // causes angular to run change detection on input event
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        // This needs to be checked every cycle because we can't subscribe to form submissions
        if (this._ngControl) {
            this._updateErrorState();
        }
    }
    /**
     * Sets the focus on the input element
     * @return {?}
     */
    focus() {
        this._elementRef.nativeElement.focus();
    }
    /**
     * @private
     * @param {?} focused
     * @return {?}
     */
    _changeFocus(focused) {
        if (this._focused !== focused && !this.readonly) {
            this._focused = focused;
            // TODO: trigger state change
        }
    }
    /**
     * @private
     * @return {?}
     */
    _isTextArea() {
        return this._elementRef.nativeElement.nodeName.toLowerCase() !== 'textarea';
    }
    /**
     * @private
     * @return {?}
     */
    _updateErrorState() {
        /** @type {?} */
        const oldState = this._errorState;
        // TODO: this could be abstracted out as an @Input() if we need this to be configurable
        /** @type {?} */
        const newState = !!(this._ngControl &&
            this._ngControl.invalid &&
            (this._ngControl.touched || (this._form && this._form.submitted)));
        if (oldState !== newState) {
            this._errorState = newState;
        }
    }
}
InputDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hcInput]',
                providers: [{ provide: HcFormControlComponent, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => InputDirective)) }]
            },] }
];
/** @nocollapse */
InputDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }
];
InputDirective.propDecorators = {
    type: [{ type: Input }],
    id: [{ type: Input }],
    readonly: [{ type: Input }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    _hostHcInputClass: [{ type: HostBinding, args: ['class.hc-input',] }],
    _hostId: [{ type: HostBinding, args: ['attr.id',] }],
    _hostReadOnly: [{ type: HostBinding, args: ['readonly',] }],
    _hostDisabled: [{ type: HostBinding, args: ['disabled',] }],
    _hostRequired: [{ type: HostBinding, args: ['required',] }],
    _onBlur: [{ type: HostListener, args: ['blur',] }],
    _onFocus: [{ type: HostListener, args: ['focus',] }],
    value: [{ type: Input }],
    _inputEvent: [{ type: HostListener, args: ['input',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._focused;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._uniqueInputId;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._form;
    /** @type {?} */
    InputDirective.prototype._componentId;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._type;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._readonly;
    /** @type {?} */
    InputDirective.prototype._hostHcInputClass;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._elementRef;
    /** @type {?} */
    InputDirective.prototype._ngControl;
}
//# sourceMappingURL=data:application/json;base64,