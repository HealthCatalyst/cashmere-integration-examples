/**
 * @fileoverview added by tsickle
 * Generated from: lib/datepicker/datepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Output, EventEmitter, Optional, InjectionToken, ChangeDetectionStrategy, Input, NgZone, ViewContainerRef, Inject } from '@angular/core';
import { DateAdapter } from './datetime/date-adapter';
import { createMissingDateImplError } from './datetime/datepicker-errors';
import { Subject, Subscription, merge } from 'rxjs';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { coerceBooleanProperty } from './utils/boolean-property';
import { DatepickerContentComponent } from './datepicker-content/datepicker-content.component';
import { ComponentPortal } from '@angular/cdk/portal';
import { Directionality } from '@angular/cdk/bidi';
import { DOCUMENT } from '@angular/common';
import { take, filter } from 'rxjs/operators';
import { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';
// tslint:disable:no-output-rename
/**
 * Used to generate a unique ID for each datepicker instance.
 * @type {?}
 */
let datepickerUid = 0;
/**
 * Injection token that determines the scroll handling while the calendar is open.
 * @type {?}
 */
export const HC_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('hc-datepicker-scroll-strategy');
/**
 * \@docs-private
 * @param {?} overlay
 * @return {?}
 */
export function HC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {
    return (/**
     * @return {?}
     */
    () => overlay.scrollStrategies.reposition());
}
/**
 * \@docs-private
 * @type {?}
 */
export const HC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: HC_DATEPICKER_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: HC_DATEPICKER_SCROLL_STRATEGY_FACTORY
};
// Boilerplate for applying mixins to hcDatepickerContent.
/**
 * \@docs-private
 */
export class HcDatepickerContentBase {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
if (false) {
    /** @type {?} */
    HcDatepickerContentBase.prototype._elementRef;
}
/**
 * Component responsible for managing the datepicker popup
 */
export class DatepickerComponent {
    /**
     * @param {?} _overlay
     * @param {?} _ngZone
     * @param {?} _viewContainerRef
     * @param {?} scrollStrategy
     * @param {?} _dateAdapter
     * @param {?} _dir
     * @param {?} _document
     */
    constructor(_overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {
        this._overlay = _overlay;
        this._ngZone = _ngZone;
        this._viewContainerRef = _viewContainerRef;
        this._dateAdapter = _dateAdapter;
        this._dir = _dir;
        this._document = _document;
        this._mode = 'date';
        this._hourCycle = 12;
        /**
         * The view that the calendar should start in.
         */
        this.startView = 'month';
        this._touchUi = false;
        /**
         * Emits selected year in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new EventEmitter();
        /**
         * Emits selected month in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new EventEmitter();
        /**
         * Emits when the datepicker has been opened.
         */
        this.openedStream = new EventEmitter();
        /**
         * Emits when the datepicker has been closed.
         */
        this.closedStream = new EventEmitter();
        this._opened = false;
        /**
         * The id for the datepicker calendar.
         */
        this.id = `hc-datepicker-${datepickerUid++}`;
        this._validSelected = null;
        /**
         * The element that was focused before the datepicker was opened.
         */
        this._focusedElementBeforeOpen = null;
        /**
         * Subscription to value changes in the associated input element.
         */
        this._inputSubscription = Subscription.EMPTY;
        /**
         * Emits when the datepicker is disabled.
         */
        this._disabledChange = new Subject();
        /**
         * Emits new selected date when selected date changes.
         */
        this._selectedChanged = new Subject();
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._scrollStrategy = scrollStrategy;
    }
    /**
     * Whether the datepicker includes the calendar, time selector, or both. Defaults to `date`.
     * @return {?}
     */
    get mode() {
        return this._mode;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set mode(value) {
        this._mode = value;
        if (this._selected) {
            this._selectedChanged.next(this._selected);
        }
    }
    /**
     * Whether the time picker uses a 12 or 24 hour clock. Defaults to 12.
     * @return {?}
     */
    get hourCycle() {
        return this._hourCycle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hourCycle(value) {
        if (+value !== this._hourCycle) {
            this._hourCycle = +value;
            if (this._selected) {
                this._selectedChanged.next(this._selected);
            }
        }
    }
    /**
     * The date to open the calendar to initially.
     * @return {?}
     */
    get startAt() {
        // If an explicit startAt is set we start there, otherwise we start at whatever the currently
        // selected value is.
        return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startAt(value) {
        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * @deprecated
     * \@description The datepicker now only uses `hcPop` to display
     *
     * @return {?}
     */
    get touchUi() {
        return this._touchUi;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set touchUi(value) {
        this._touchUi = coerceBooleanProperty(value);
    }
    /**
     * Whether the datepicker pop-up should be disabled.
     * @return {?}
     */
    get disabled() {
        return this._disabled === undefined && this._datepickerInput ? this._datepickerInput.disabled : !!this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this._disabledChange.next(newValue);
        }
    }
    /**
     * Whether the calendar is open.
     * @return {?}
     */
    get opened() {
        return this._opened;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set opened(value) {
        value ? this.open() : this.close();
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get _selected() {
        return this._validSelected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _selected(value) {
        this._validSelected = value;
    }
    /**
     * The minimum selectable date.
     * @return {?}
     */
    get _minDate() {
        return this._datepickerInput && this._datepickerInput.min;
    }
    /**
     * The maximum selectable date.
     * @return {?}
     */
    get _maxDate() {
        return this._datepickerInput && this._datepickerInput.max;
    }
    /**
     * @return {?}
     */
    get _dateFilter() {
        return this._datepickerInput && this._datepickerInput._dateFilter;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.close();
        this._inputSubscription.unsubscribe();
        this._disabledChange.complete();
        if (this._popupRef) {
            this._popupRef.dispose();
            this._popupComponentRef = null;
        }
    }
    /**
     * Selects the given date
     * @param {?} date
     * @return {?}
     */
    select(date) {
        /** @type {?} */
        const oldValue = this._selected;
        this._selected = date;
        if (!this._dateAdapter.sameDate(oldValue, this._selected)) {
            this._selectedChanged.next(date);
        }
    }
    /**
     * Emits the selected year in multiyear view
     * @param {?} normalizedYear
     * @return {?}
     */
    _selectYear(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    /**
     * Emits selected month in year view
     * @param {?} normalizedMonth
     * @return {?}
     */
    _selectMonth(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    /**
     * Register an input with this datepicker.
     * @param {?} input The datepicker input to register with this datepicker.
     * @return {?}
     */
    _registerInput(input) {
        if (this._datepickerInput) {
            throw Error('A hcDatepicker can only be associated with a single input.');
        }
        this._datepickerInput = input;
        this._inputSubscription = this._datepickerInput._valueChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => (this._selected = value)));
    }
    /**
     * Open the calendar.
     * @return {?}
     */
    open() {
        if (this._opened || this.disabled) {
            return;
        }
        if (!this._datepickerInput) {
            throw Error('Attempted to open an hcDatepicker with no associated input.');
        }
        if (this._document) {
            this._focusedElementBeforeOpen = this._document.activeElement;
        }
        this._openAsPopup();
        this._opened = true;
        this.openedStream.emit();
    }
    /**
     * Close the calendar.
     * @return {?}
     */
    close() {
        if (!this._opened) {
            return;
        }
        if (this._popupRef && this._popupRef.hasAttached()) {
            this._popupRef.detach();
        }
        if (this._calendarPortal && this._calendarPortal.isAttached) {
            this._calendarPortal.detach();
        }
        /** @type {?} */
        const completeClose = (/**
         * @return {?}
         */
        () => {
            // The `_opened` could've been reset already if
            // we got two events in quick succession.
            if (this._opened) {
                this._opened = false;
                this.closedStream.emit();
                this._focusedElementBeforeOpen = null;
            }
        });
        if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {
            // Because IE moves focus asynchronously, we can't count on it being restored before we've
            // marked the datepicker as closed. If the event fires out of sequence and the element that
            // we're refocusing opens the datepicker on focus, the user could be stuck with not being
            // able to close the calendar at all. We work around it by making the logic, that marks
            // the datepicker as closed, async as well.
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
    }
    /**
     * Open the calendar as a popup.
     * @private
     * @return {?}
     */
    _openAsPopup() {
        if (!this._calendarPortal) {
            this._calendarPortal = new ComponentPortal(DatepickerContentComponent, this._viewContainerRef);
        }
        if (!this._popupRef) {
            this._createPopup();
        }
        if (!this._popupRef.hasAttached()) {
            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
            this._popupComponentRef.instance.datepicker = this;
            // Update the position once the calendar has rendered.
            this._ngZone.onStable
                .asObservable()
                .pipe(take(1))
                .subscribe((/**
             * @return {?}
             */
            () => {
                this._popupRef.updatePosition();
            }));
        }
    }
    /**
     * Create the popup.
     * @private
     * @return {?}
     */
    _createPopup() {
        /** @type {?} */
        const overlayConfig = new OverlayConfig({
            positionStrategy: this._createPopupPositionStrategy(),
            hasBackdrop: true,
            backdropClass: 'hc-overlay-transparent-backdrop',
            direction: this._dir,
            scrollStrategy: this._scrollStrategy(),
            panelClass: 'hc-datepicker-popup'
        });
        this._popupRef = this._overlay.create(overlayConfig);
        this._popupRef.overlayElement.setAttribute('role', 'dialog');
        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            // Closing on alt + up is only valid when there's an input associated with the datepicker.
            return event.keyCode === ESCAPE || (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);
        })))).subscribe((/**
         * @return {?}
         */
        () => this.close()));
    }
    /**
     * Create the popup PositionStrategy.
     * @private
     * @return {?}
     */
    _createPopupPositionStrategy() {
        return this._overlay
            .position()
            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())
            .withTransformOriginOn('.hc-datepicker-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition()
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
                // hc form field wrapper bottom margin
                offsetY: -20
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'center'
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top'
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom',
                offsetY: 60
            }
        ]);
    }
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
}
DatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'hc-datepicker',
                template: '',
                exportAs: 'hcDatepicker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: ["@charset \"UTF-8\";body,html{font-family:\"Open Sans\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;color:#333}h1{font-size:2.57143rem;font-weight:300;line-height:1.2;color:#333;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}h2{font-size:1.57143rem;font-weight:600;line-height:1.5;color:#333}h3{font-size:1.28571rem;font-weight:600;line-height:1.5;color:#333}h4{font-size:1rem;font-weight:600;line-height:1.5;color:#333}p{font-size:1.14286rem;font-weight:400;line-height:1.5;color:#333}code{color:#a94c9d;font-family:Consolas,Menlo,'Ubuntu Mono',monospace;background-color:#f1f1f1;border-radius:3px;padding:3px 7px;font-size:1rem;font-weight:400;line-height:1.4}pre{border:1px solid #a1a1a1;padding:20px;margin:16px auto;border-radius:5px;display:block;background-color:#f1f1f1;font-weight:400}pre>span{font-size:1rem;line-height:1.4;padding:10px 0;background-color:#f1f1f1}pre>code{overflow-x:auto;display:block;font-size:1rem;padding:10px;line-height:1.4;background-color:#f1f1f1;color:#333;border:unset;border-radius:unset}a{text-decoration:none;color:#00aeff}a:hover{color:#33beff}a:active{color:#008bcc}.hc-font-xsm{font-size:.85714rem}.hc-font-sm{font-size:1rem}.hc-font-md{font-size:1.14286rem}.hc-font-lg{font-size:1.28571rem}.hc-font-xlg{font-size:1.57143rem}.hc-font-light{font-weight:300}.hc-font-reg{font-weight:400}.hc-font-bold,strong{font-weight:600}.hc-font-xbold{font-weight:700}.hc-text-titlecase{text-transform:capitalize}.hc-text-uppercase{text-transform:uppercase}.hc-text-lowercase{text-transform:lowercase}.hc-text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.hc-font-em,em{color:#6d6e70;font-style:italic}article ul{list-style-type:none;display:table}article>ul>li{display:table;padding-left:20px}article ul>li:before{content:'\u2022  ';display:table-cell;padding-right:10px}article ol li ol li ol li:first-child,article ol li ol li:first-child,article ol>li:first-child,article ul li ul li ul li:first-child,article ul li ul li:first-child,article ul>li:first-child{margin-top:6px!important}article ol li ol li ol li:last-child,article ol li ol li:last-child,article ol>li:last-child,article ul li ul li ul li:last-child,article ul li ul li:last-child,article ul>li:last-child{margin-bottom:6px!important}article ol>li{padding-left:6px;margin-left:40px!important}article ul li ul li{display:table;margin-left:0}article ul li ul li:before{content:'\u2013  ';display:table-cell;padding-right:15px}article ol>li>ol>li{list-style-type:lower-alpha;padding-left:6px;margin-left:18px!important}article ul li ul li ul li:before{content:'- ';display:table-cell;padding-right:15px}article ol li ol li ol li{list-style-type:lower-roman;padding-left:10px;margin-left:12px!important}article table tbody>tr>td{vertical-align:top}article table ul li{font-size:14px;margin-left:15px!important;display:table}article table ol li{font-size:14px;margin-left:30px!important;padding-right:10px;padding-left:6px!important}article table ul li ul li{font-size:14px;padding-right:6px;margin-left:0!important;display:table}article table ul li ul li:before{padding-right:12px}article table ul li ul li ul li{font-size:14px;display:table}article table ul li ul li ul li:before{padding-right:10px}article ol li ol li ol li:first-child,article ol li ol li:first-child,article ol>li:first-child,article table ol li ol li ol>li:first-child,article table ol li ol>li:first-child,article table ol>li:first-child,article table ul li ul li ul>li:first-child,article table ul li ul>li:first-child,article table ul>li:first-child,article ul li ul li ul li:first-child,article ul li ul li:first-child,article ul>li:first-child{padding-top:6px}article ol li ol li ol li:last-child,article ol li ol li:last-child,article ol>li:last-child,article table ol li ol li ol>li:last-child,article table ol li ol>li:last-child,article table ol>li:last-child,article table ul li ul li ul>li:last-child,article table ul li ul>li:last-child,article table ul>li:last-child,article ul li ul li ul li:last-child,article ul li ul li:last-child,article ul>li:last-child{padding-bottom:6px}.hc-datepicker-content{background-color:#fff;border-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12);color:#333;display:block;height:100%;width:310px}.hc-datepicker-toggle-active{color:#00aeff}.hc-calendar{display:block;height:100%;padding:10px 0 20px;width:310px}"]
            }] }
];
/** @nocollapse */
DatepickerComponent.ctorParameters = () => [
    { type: Overlay },
    { type: NgZone },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Inject, args: [HC_DATEPICKER_SCROLL_STRATEGY,] }] },
    { type: DateAdapter, decorators: [{ type: Optional }] },
    { type: Directionality, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
DatepickerComponent.propDecorators = {
    mode: [{ type: Input }],
    hourCycle: [{ type: Input }],
    calendarHeaderComponent: [{ type: Input }],
    startAt: [{ type: Input }],
    startView: [{ type: Input }],
    touchUi: [{ type: Input }],
    disabled: [{ type: Input }],
    yearSelected: [{ type: Output }],
    monthSelected: [{ type: Output }],
    panelClass: [{ type: Input }],
    dateClass: [{ type: Input }],
    openedStream: [{ type: Output, args: ['opened',] }],
    closedStream: [{ type: Output, args: ['closed',] }],
    opened: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._scrollStrategy;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._mode;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._hourCycle;
    /**
     * An input indicating the type of the custom header component for the calendar, if set.
     * @type {?}
     */
    DatepickerComponent.prototype.calendarHeaderComponent;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._startAt;
    /**
     * The view that the calendar should start in.
     * @type {?}
     */
    DatepickerComponent.prototype.startView;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._touchUi;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._disabled;
    /**
     * Emits selected year in multiyear view.
     * This doesn't imply a change on the selected date.
     * @type {?}
     */
    DatepickerComponent.prototype.yearSelected;
    /**
     * Emits selected month in year view.
     * This doesn't imply a change on the selected date.
     * @type {?}
     */
    DatepickerComponent.prototype.monthSelected;
    /**
     * Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`.
     * @type {?}
     */
    DatepickerComponent.prototype.panelClass;
    /**
     * Function that can be used to add custom CSS classes to dates.
     * @type {?}
     */
    DatepickerComponent.prototype.dateClass;
    /**
     * Emits when the datepicker has been opened.
     * @type {?}
     */
    DatepickerComponent.prototype.openedStream;
    /**
     * Emits when the datepicker has been closed.
     * @type {?}
     */
    DatepickerComponent.prototype.closedStream;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._opened;
    /**
     * The id for the datepicker calendar.
     * @type {?}
     */
    DatepickerComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._validSelected;
    /**
     * A reference to the overlay when the calendar is opened as a popup.
     * @type {?}
     */
    DatepickerComponent.prototype._popupRef;
    /**
     * A portal containing the calendar for this datepicker.
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._calendarPortal;
    /**
     * Reference to the component instantiated in popup mode.
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._popupComponentRef;
    /**
     * The element that was focused before the datepicker was opened.
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._focusedElementBeforeOpen;
    /**
     * Subscription to value changes in the associated input element.
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._inputSubscription;
    /**
     * The input element this datepicker is associated with.
     * @type {?}
     */
    DatepickerComponent.prototype._datepickerInput;
    /**
     * Emits when the datepicker is disabled.
     * @type {?}
     */
    DatepickerComponent.prototype._disabledChange;
    /**
     * Emits new selected date when selected date changes.
     * @type {?}
     */
    DatepickerComponent.prototype._selectedChanged;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._dir;
    /**
     * @type {?}
     * @private
     */
    DatepickerComponent.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,