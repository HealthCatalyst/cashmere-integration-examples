/**
 * @fileoverview added by tsickle
 * Generated from: lib/datepicker/datepicker-input/datepicker-input.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { forwardRef, Directive, ElementRef, Optional, Inject, Input, EventEmitter, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';
import { createMissingDateImplError } from '../datetime/datepicker-errors';
import { DatepickerComponent } from '../datepicker.component';
import { coerceBooleanProperty } from '../utils/boolean-property';
import { Subscription } from 'rxjs';
import { DOWN_ARROW } from '@angular/cdk/keycodes';
import { HC_DATE_FORMATS } from '../datetime/date-formats';
import { DateAdapter } from '../datetime/date-adapter';
import { HcFormControlComponent } from '../../form-field/hc-form-control.component';
import { HcFormFieldComponent } from '../../form-field/hc-form-field.component';
// tslint:disable:no-host-metadata-property
// tslint:disable:member-ordering
/**
 * \@docs-private
 * @type {?}
 */
export const HC_DATEPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => DatepickerInputDirective)),
    multi: true
};
/**
 * \@docs-private
 * @type {?}
 */
export const HC_DATEPICKER_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => DatepickerInputDirective)),
    multi: true
};
/**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use hcDatepickerInputEvent instead.
 */
export class HcDatepickerInputEvent {
    /**
     * @param {?} target
     * @param {?} targetElement
     */
    constructor(target, targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
}
if (false) {
    /**
     * The new value for the target datepicker input.
     * @type {?}
     */
    HcDatepickerInputEvent.prototype.value;
    /**
     * Reference to the datepicker input component that emitted the event.
     * @type {?}
     */
    HcDatepickerInputEvent.prototype.target;
    /**
     * Reference to the native input element associated with the datepicker input.
     * @type {?}
     */
    HcDatepickerInputEvent.prototype.targetElement;
}
export class DatepickerInputDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _dateAdapter
     * @param {?} _dateFormats
     * @param {?} _formField
     */
    constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {
        this._elementRef = _elementRef;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this._formField = _formField;
        /**
         * Emits when a `change` event is fired on this `<input>`.
         */
        this.dateChange = new EventEmitter();
        /**
         * Emits when an `input` event is fired on this `<input>`.
         */
        this.dateInput = new EventEmitter();
        /**
         * Emits when the value changes (either due to user input or programmatic change).
         */
        this._valueChange = new EventEmitter();
        /**
         * Emits when the disabled state has changed
         */
        this._disabledChange = new EventEmitter();
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        this._cvaOnChange = (/**
         * @return {?}
         */
        () => { });
        this._validatorOnChange = (/**
         * @return {?}
         */
        () => { });
        this._datepickerSubscription = Subscription.EMPTY;
        this._localeSubscription = Subscription.EMPTY;
        /**
         * The form control validator for whether the input parses.
         */
        this._parseValidator = (/**
         * @return {?}
         */
        () => {
            return this._lastValueValid ? null : { hcDatepickerParse: { text: this._elementRef.nativeElement.value } };
        });
        /**
         * The form control validator for the min date.
         */
        this._minValidator = (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));
            return !this.min || !controlValue || this._dateAdapter.compareDate(this.min, controlValue) <= 0
                ? null
                : { hcDatepickerMin: { min: this.min, actual: controlValue } };
        });
        /**
         * The form control validator for the max date.
         */
        this._maxValidator = (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));
            return !this.max || !controlValue || this._dateAdapter.compareDate(this.max, controlValue) >= 0
                ? null
                : { hcDatepickerMax: { max: this.max, actual: controlValue } };
        });
        /**
         * The form control validator for the date filter.
         */
        this._filterValidator = (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));
            return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ? null : { hcDatepickerFilter: true };
        });
        /**
         * The combined form control validator for this input.
         */
        this._validator = Validators.compose([
            this._parseValidator,
            this._minValidator,
            this._maxValidator,
            this._filterValidator
        ]);
        /**
         * Whether the last value set on the input was valid.
         */
        this._lastValueValid = false;
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('HC_DATE_FORMATS');
        }
        // Update the displayed date when the locale changes.
        this._localeSubscription = _dateAdapter.localeChanges.subscribe((/**
         * @return {?}
         */
        () => {
            this.value = this.value;
        }));
    }
    /**
     * The datepicker that this input is associated with.
     * @param {?} value
     * @return {?}
     */
    set hcDatepicker(value) {
        if (!value) {
            return;
        }
        this._datepicker = value;
        this._datepicker._registerInput(this);
        this._datepickerSubscription.unsubscribe();
        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((/**
         * @param {?} selected
         * @return {?}
         */
        (selected) => {
            this.setDate(selected);
        }));
    }
    /**
     * Function that can be used to filter out dates within the datepicker.
     * @param {?} value
     * @return {?}
     */
    set hcDatepickerFilter(value) {
        this._dateFilter = value;
        this._validatorOnChange();
    }
    /**
     * The value of the input.
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        value = this._dateAdapter.deserialize(value);
        this._lastValueValid = !value || this._dateAdapter.isValid(value);
        value = this._getValidDateOrNull(value);
        /** @type {?} */
        const oldDate = this.value;
        this._value = value;
        this._formatValue(value);
        if (!this._dateAdapter.sameDate(oldDate, value)) {
            this._valueChange.emit(value);
        }
    }
    /**
     * The minimum valid date.
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._validatorOnChange();
    }
    /**
     * The maximum valid date.
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._validatorOnChange();
    }
    /**
     * Whether the datepicker-input is disabled.
     * @return {?}
     */
    get disabled() {
        return !!this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        /** @type {?} */
        const element = this._elementRef.nativeElement;
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this._disabledChange.emit(newValue);
        }
        // We need to null check the `blur` method, because it's undefined during SSR.
        if (newValue && element.blur) {
            // Normally, native input elements automatically blur if they turn disabled. This behavior
            // is problematic, because it would mean that it triggers another change detection cycle,
            // which then causes a changed after checked error if the input element was focused before.
            element.blur();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._datepickerSubscription.unsubscribe();
        this._localeSubscription.unsubscribe();
        this._valueChange.complete();
        this._disabledChange.complete();
    }
    /**
     * \@docs-private
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this._validatorOnChange = fn;
    }
    /**
     * \@docs-private
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this._validator ? this._validator(c) : null;
    }
    /**
     * Gets the element that the datepicker popup should be connected to.
     * @return {?} The element to connect the popup to.
     */
    getConnectedOverlayOrigin() {
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
    }
    /**
     * Sets the focus on the input element
     * @return {?}
     */
    focus() {
        this._elementRef.nativeElement.focus();
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // Set the date programmatically
    /**
     * @param {?} selected
     * @return {?}
     */
    setDate(selected) {
        this.value = selected;
        this._cvaOnChange(selected);
        this._onTouched();
        this.dateInput.emit(new HcDatepickerInputEvent(this, this._elementRef.nativeElement));
        this.dateChange.emit(new HcDatepickerInputEvent(this, this._elementRef.nativeElement));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onKeydown(event) {
        /** @type {?} */
        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;
        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {
            this._datepicker.open();
            event.preventDefault();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _onInput(value) {
        /** @type {?} */
        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);
        /** Two-digit year input conversion method for IE
         * Based on the current year, assume that the four-digit year date should be in
         * either the next 30 years, or the preceding 70 years */
        if (date) {
            /** @type {?} */
            let inputString = this._elementRef.nativeElement.value;
            /** Skip this check if the input string contains any 3+ digit numerical values - assumed to be a year */
            if (!inputString.match(/[1-9][0-9][0-9]/g)) {
                /** @type {?} */
                let currentDate = new Date();
                if (date.getFullYear() >= currentDate.getFullYear() + 30) {
                    date.setFullYear(date.getFullYear() - 100);
                }
                else if (date.getFullYear() < currentDate.getFullYear() - 70) {
                    date.setFullYear(date.getFullYear() + 100);
                }
            }
        }
        this._lastValueValid = !date || this._dateAdapter.isValid(date);
        date = this._getValidDateOrNull(date);
        if (!this._dateAdapter.sameDate(date, this._value)) {
            this._value = date;
            this._cvaOnChange(date);
            this._valueChange.emit(date);
            this.dateInput.emit(new HcDatepickerInputEvent(this, this._elementRef.nativeElement));
        }
    }
    /**
     * @return {?}
     */
    _onChange() {
        this.dateChange.emit(new HcDatepickerInputEvent(this, this._elementRef.nativeElement));
    }
    /**
     * Handles blur events on the input.
     * @return {?}
     */
    _onBlur() {
        // Reformat the input only if we have a valid value.
        if (this.value || this._elementRef.nativeElement.value) {
            this._formatValue(this.value);
        }
        this._onTouched();
    }
    /**
     * Formats a value and sets it on the input element.
     * @private
     * @param {?} value
     * @return {?}
     */
    _formatValue(value) {
        /** @type {?} */
        let dateFormat = this._dateFormats.display.dateInput;
        /** @type {?} */
        let tempMode = 'date';
        /** @type {?} */
        let tempCycle = 12;
        if (this._datepicker) {
            tempMode = this._datepicker.mode;
            tempCycle = +this._datepicker.hourCycle;
        }
        else if (this._mode) {
            tempMode = this._mode;
            if (this._hourCycle) {
                tempCycle = this._hourCycle;
            }
        }
        if (tempMode === 'time') {
            /** @type {?} */
            let tempFormat = this._dateFormats.display.timeInput;
            tempFormat['hour12'] = tempCycle === 12;
            dateFormat = tempFormat;
        }
        else if (tempMode === 'date-time') {
            /** @type {?} */
            let tempFormat = this._dateFormats.display.dateTimeInput;
            tempFormat['hour12'] = tempCycle === 12;
            dateFormat = tempFormat;
        }
        this._elementRef.nativeElement.value = value ? this._dateAdapter.format(value, dateFormat) : '';
    }
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
}
DatepickerInputDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[hcDatepicker]',
                host: {
                    '[attr.aria-haspopup]': 'true',
                    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',
                    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',
                    '[disabled]': 'disabled',
                    '(input)': '_onInput($event.target.value)',
                    '(change)': '_onChange()',
                    '(blur)': '_onBlur()',
                    '(keydown)': '_onKeydown($event)'
                },
                providers: [
                    HC_DATEPICKER_VALUE_ACCESSOR,
                    HC_DATEPICKER_VALIDATORS,
                    { provide: HcFormControlComponent, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => DatepickerInputDirective)) }
                ]
            },] }
];
/** @nocollapse */
DatepickerInputDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: DateAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HC_DATE_FORMATS,] }] },
    { type: HcFormFieldComponent, decorators: [{ type: Optional }] }
];
DatepickerInputDirective.propDecorators = {
    hcDatepicker: [{ type: Input }],
    hcDatepickerFilter: [{ type: Input }],
    value: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    disabled: [{ type: Input }],
    dateChange: [{ type: Output }],
    dateInput: [{ type: Output }],
    _mode: [{ type: Input }],
    _hourCycle: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DatepickerInputDirective.prototype._datepicker;
    /** @type {?} */
    DatepickerInputDirective.prototype._dateFilter;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._value;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._min;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._max;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._disabled;
    /**
     * Emits when a `change` event is fired on this `<input>`.
     * @type {?}
     */
    DatepickerInputDirective.prototype.dateChange;
    /**
     * Emits when an `input` event is fired on this `<input>`.
     * @type {?}
     */
    DatepickerInputDirective.prototype.dateInput;
    /**
     * Stores the mode & hourCycle for the inputs of the date range (which don't have a DatePickerComponent)
     * @type {?}
     */
    DatepickerInputDirective.prototype._mode;
    /** @type {?} */
    DatepickerInputDirective.prototype._hourCycle;
    /**
     * Emits when the value changes (either due to user input or programmatic change).
     * @type {?}
     */
    DatepickerInputDirective.prototype._valueChange;
    /**
     * Emits when the disabled state has changed
     * @type {?}
     */
    DatepickerInputDirective.prototype._disabledChange;
    /** @type {?} */
    DatepickerInputDirective.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._cvaOnChange;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._validatorOnChange;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._datepickerSubscription;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._localeSubscription;
    /**
     * The form control validator for whether the input parses.
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._parseValidator;
    /**
     * The form control validator for the min date.
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._minValidator;
    /**
     * The form control validator for the max date.
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._maxValidator;
    /**
     * The form control validator for the date filter.
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._filterValidator;
    /**
     * The combined form control validator for this input.
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._validator;
    /**
     * Whether the last value set on the input was valid.
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._lastValueValid;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._elementRef;
    /** @type {?} */
    DatepickerInputDirective.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._dateFormats;
    /**
     * @type {?}
     * @private
     */
    DatepickerInputDirective.prototype._formField;
}
//# sourceMappingURL=data:application/json;base64,