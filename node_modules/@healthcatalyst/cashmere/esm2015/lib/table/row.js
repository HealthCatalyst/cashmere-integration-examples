/**
 * @fileoverview added by tsickle
 * Generated from: lib/table/row.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:directive-class-suffix use-input-property-decorator component-class-suffix
// tslint:disable:no-host-metadata-property no-inputs-metadata-property
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ChangeDetectionStrategy, Component, Directive, ViewEncapsulation } from '@angular/core';
import { CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef } from '@angular/cdk/table';
/**
 * Header row definition for the hc-table.
 * Captures the header row's template and other header properties such as the columns to display.
 */
export class HcHeaderRowDef extends CdkHeaderRowDef {
}
HcHeaderRowDef.decorators = [
    { type: Directive, args: [{
                selector: '[hcHeaderRowDef]',
                providers: [{ provide: CdkHeaderRowDef, useExisting: HcHeaderRowDef }],
                inputs: ['columns: hcHeaderRowDef', 'sticky: hcHeaderRowDefSticky']
            },] }
];
/**
 * Footer row definition for the mat-table.
 * Captures the footer row's template and other footer properties such as the columns to display.
 */
export class HcFooterRowDef extends CdkFooterRowDef {
}
HcFooterRowDef.decorators = [
    { type: Directive, args: [{
                selector: '[hcFooterRowDef]',
                providers: [{ provide: CdkFooterRowDef, useExisting: HcFooterRowDef }],
                inputs: ['columns: hcFooterRowDef', 'sticky: hcFooterRowDefSticky']
            },] }
];
/**
 * Data row definition for the mat-table.
 * Captures the footer row's template and other footer properties such as the columns to display and
 * a when predicate that describes when this row should be used.
 * @template T
 */
export class HcRowDef extends CdkRowDef {
}
HcRowDef.decorators = [
    { type: Directive, args: [{
                selector: '[hcRowDef]',
                providers: [{ provide: CdkRowDef, useExisting: HcRowDef }],
                inputs: ['columns: hcRowDefColumns', 'when: hcRowDefWhen']
            },] }
];
/**
 * Footer template container that contains the cell outlet. Adds the right class and role.
 */
export class HcHeaderRow extends CdkHeaderRow {
}
HcHeaderRow.decorators = [
    { type: Component, args: [{
                selector: 'hc-header-row, tr[hc-header-row]',
                template: CDK_ROW_TEMPLATE,
                host: {
                    class: 'hc-header-row',
                    role: 'row'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                exportAs: 'hcHeaderRow',
                providers: [{ provide: CdkHeaderRow, useExisting: HcHeaderRow }]
            }] }
];
/**
 * Footer template container that contains the cell outlet. Adds the right class and role.
 */
export class HcFooterRow extends CdkFooterRow {
}
HcFooterRow.decorators = [
    { type: Component, args: [{
                selector: 'hc-footer-row, tr[hc-footer-row]',
                template: CDK_ROW_TEMPLATE,
                host: {
                    class: 'hc-footer-row',
                    role: 'row'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                exportAs: 'hcFooterRow',
                providers: [{ provide: CdkFooterRow, useExisting: HcFooterRow }]
            }] }
];
/**
 * Data row template container that contains the cell outlet. Adds the right class and role.
 */
export class HcRow extends CdkRow {
}
HcRow.decorators = [
    { type: Component, args: [{
                selector: 'hc-row, tr[hc-row]',
                template: CDK_ROW_TEMPLATE,
                host: {
                    class: 'hc-row',
                    role: 'row'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                exportAs: 'hcRow',
                providers: [{ provide: CdkRow, useExisting: HcRow }]
            }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL3RhYmxlL3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQVdBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQy9GLE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBQyxNQUFNLG9CQUFvQixDQUFDOzs7OztBQVdySSxNQUFNLE9BQU8sY0FBZSxTQUFRLGVBQWU7OztZQUxsRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUMsQ0FBQztnQkFDcEUsTUFBTSxFQUFFLENBQUMseUJBQXlCLEVBQUUsOEJBQThCLENBQUM7YUFDdEU7Ozs7OztBQVlELE1BQU0sT0FBTyxjQUFlLFNBQVEsZUFBZTs7O1lBTGxELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBQyxDQUFDO2dCQUNwRSxNQUFNLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSw4QkFBOEIsQ0FBQzthQUN0RTs7Ozs7Ozs7QUFhRCxNQUFNLE9BQU8sUUFBWSxTQUFRLFNBQVk7OztZQUw1QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFDLENBQUM7Z0JBQ3hELE1BQU0sRUFBRSxDQUFDLDBCQUEwQixFQUFFLG9CQUFvQixDQUFDO2FBQzdEOzs7OztBQWdCRCxNQUFNLE9BQU8sV0FBWSxTQUFRLFlBQVk7OztZQVo1QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtDQUFrQztnQkFDNUMsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsSUFBSSxFQUFFO29CQUNGLEtBQUssRUFBRSxlQUFlO29CQUN0QixJQUFJLEVBQUUsS0FBSztpQkFDZDtnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBQyxDQUFDO2FBQ2pFOzs7OztBQWdCRCxNQUFNLE9BQU8sV0FBWSxTQUFRLFlBQVk7OztZQVo1QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtDQUFrQztnQkFDNUMsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsSUFBSSxFQUFFO29CQUNGLEtBQUssRUFBRSxlQUFlO29CQUN0QixJQUFJLEVBQUUsS0FBSztpQkFDZDtnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBQyxDQUFDO2FBQ2pFOzs7OztBQWdCRCxNQUFNLE9BQU8sS0FBTSxTQUFRLE1BQU07OztZQVpoQyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsSUFBSSxFQUFFO29CQUNGLEtBQUssRUFBRSxRQUFRO29CQUNmLElBQUksRUFBRSxLQUFLO2lCQUNkO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsUUFBUSxFQUFFLE9BQU87Z0JBQ2pCLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFDLENBQUM7YUFDckQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4IHVzZS1pbnB1dC1wcm9wZXJ0eS1kZWNvcmF0b3IgY29tcG9uZW50LWNsYXNzLXN1ZmZpeFxuLy8gdHNsaW50OmRpc2FibGU6bm8taG9zdC1tZXRhZGF0YS1wcm9wZXJ0eSBuby1pbnB1dHMtbWV0YWRhdGEtcHJvcGVydHlcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRGlyZWN0aXZlLCBWaWV3RW5jYXBzdWxhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NES19ST1dfVEVNUExBVEUsIENka0Zvb3RlclJvdywgQ2RrRm9vdGVyUm93RGVmLCBDZGtIZWFkZXJSb3csIENka0hlYWRlclJvd0RlZiwgQ2RrUm93LCBDZGtSb3dEZWZ9IGZyb20gJ0Bhbmd1bGFyL2Nkay90YWJsZSc7XG5cbi8qKlxuICogSGVhZGVyIHJvdyBkZWZpbml0aW9uIGZvciB0aGUgaGMtdGFibGUuXG4gKiBDYXB0dXJlcyB0aGUgaGVhZGVyIHJvdydzIHRlbXBsYXRlIGFuZCBvdGhlciBoZWFkZXIgcHJvcGVydGllcyBzdWNoIGFzIHRoZSBjb2x1bW5zIHRvIGRpc3BsYXkuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2hjSGVhZGVyUm93RGVmXScsXG4gICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENka0hlYWRlclJvd0RlZiwgdXNlRXhpc3Rpbmc6IEhjSGVhZGVyUm93RGVmfV0sXG4gICAgaW5wdXRzOiBbJ2NvbHVtbnM6IGhjSGVhZGVyUm93RGVmJywgJ3N0aWNreTogaGNIZWFkZXJSb3dEZWZTdGlja3knXVxufSlcbmV4cG9ydCBjbGFzcyBIY0hlYWRlclJvd0RlZiBleHRlbmRzIENka0hlYWRlclJvd0RlZiB7fVxuXG4vKipcbiAqIEZvb3RlciByb3cgZGVmaW5pdGlvbiBmb3IgdGhlIG1hdC10YWJsZS5cbiAqIENhcHR1cmVzIHRoZSBmb290ZXIgcm93J3MgdGVtcGxhdGUgYW5kIG90aGVyIGZvb3RlciBwcm9wZXJ0aWVzIHN1Y2ggYXMgdGhlIGNvbHVtbnMgdG8gZGlzcGxheS5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaGNGb290ZXJSb3dEZWZdJyxcbiAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQ2RrRm9vdGVyUm93RGVmLCB1c2VFeGlzdGluZzogSGNGb290ZXJSb3dEZWZ9XSxcbiAgICBpbnB1dHM6IFsnY29sdW1uczogaGNGb290ZXJSb3dEZWYnLCAnc3RpY2t5OiBoY0Zvb3RlclJvd0RlZlN0aWNreSddXG59KVxuZXhwb3J0IGNsYXNzIEhjRm9vdGVyUm93RGVmIGV4dGVuZHMgQ2RrRm9vdGVyUm93RGVmIHt9XG5cbi8qKlxuICogRGF0YSByb3cgZGVmaW5pdGlvbiBmb3IgdGhlIG1hdC10YWJsZS5cbiAqIENhcHR1cmVzIHRoZSBmb290ZXIgcm93J3MgdGVtcGxhdGUgYW5kIG90aGVyIGZvb3RlciBwcm9wZXJ0aWVzIHN1Y2ggYXMgdGhlIGNvbHVtbnMgdG8gZGlzcGxheSBhbmRcbiAqIGEgd2hlbiBwcmVkaWNhdGUgdGhhdCBkZXNjcmliZXMgd2hlbiB0aGlzIHJvdyBzaG91bGQgYmUgdXNlZC5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaGNSb3dEZWZdJyxcbiAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQ2RrUm93RGVmLCB1c2VFeGlzdGluZzogSGNSb3dEZWZ9XSxcbiAgICBpbnB1dHM6IFsnY29sdW1uczogaGNSb3dEZWZDb2x1bW5zJywgJ3doZW46IGhjUm93RGVmV2hlbiddXG59KVxuZXhwb3J0IGNsYXNzIEhjUm93RGVmPFQ+IGV4dGVuZHMgQ2RrUm93RGVmPFQ+IHt9XG5cbi8qKiBGb290ZXIgdGVtcGxhdGUgY29udGFpbmVyIHRoYXQgY29udGFpbnMgdGhlIGNlbGwgb3V0bGV0LiBBZGRzIHRoZSByaWdodCBjbGFzcyBhbmQgcm9sZS4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaGMtaGVhZGVyLXJvdywgdHJbaGMtaGVhZGVyLXJvd10nLFxuICAgIHRlbXBsYXRlOiBDREtfUk9XX1RFTVBMQVRFLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgY2xhc3M6ICdoYy1oZWFkZXItcm93JyxcbiAgICAgICAgcm9sZTogJ3JvdydcbiAgICB9LFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgZXhwb3J0QXM6ICdoY0hlYWRlclJvdycsXG4gICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENka0hlYWRlclJvdywgdXNlRXhpc3Rpbmc6IEhjSGVhZGVyUm93fV1cbn0pXG5leHBvcnQgY2xhc3MgSGNIZWFkZXJSb3cgZXh0ZW5kcyBDZGtIZWFkZXJSb3cge31cblxuLyoqIEZvb3RlciB0ZW1wbGF0ZSBjb250YWluZXIgdGhhdCBjb250YWlucyB0aGUgY2VsbCBvdXRsZXQuIEFkZHMgdGhlIHJpZ2h0IGNsYXNzIGFuZCByb2xlLiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdoYy1mb290ZXItcm93LCB0cltoYy1mb290ZXItcm93XScsXG4gICAgdGVtcGxhdGU6IENES19ST1dfVEVNUExBVEUsXG4gICAgaG9zdDoge1xuICAgICAgICBjbGFzczogJ2hjLWZvb3Rlci1yb3cnLFxuICAgICAgICByb2xlOiAncm93J1xuICAgIH0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBleHBvcnRBczogJ2hjRm9vdGVyUm93JyxcbiAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQ2RrRm9vdGVyUm93LCB1c2VFeGlzdGluZzogSGNGb290ZXJSb3d9XVxufSlcbmV4cG9ydCBjbGFzcyBIY0Zvb3RlclJvdyBleHRlbmRzIENka0Zvb3RlclJvdyB7fVxuXG4vKiogRGF0YSByb3cgdGVtcGxhdGUgY29udGFpbmVyIHRoYXQgY29udGFpbnMgdGhlIGNlbGwgb3V0bGV0LiBBZGRzIHRoZSByaWdodCBjbGFzcyBhbmQgcm9sZS4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaGMtcm93LCB0cltoYy1yb3ddJyxcbiAgICB0ZW1wbGF0ZTogQ0RLX1JPV19URU1QTEFURSxcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAnaGMtcm93JyxcbiAgICAgICAgcm9sZTogJ3JvdydcbiAgICB9LFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgZXhwb3J0QXM6ICdoY1JvdycsXG4gICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENka1JvdywgdXNlRXhpc3Rpbmc6IEhjUm93fV1cbn0pXG5leHBvcnQgY2xhc3MgSGNSb3cgZXh0ZW5kcyBDZGtSb3cge31cbiJdfQ==