/**
 * @fileoverview added by tsickle
 * Generated from: lib/table/cell.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable:directive-class-suffix directive-selector no-host-metadata-property no-input-rename*/
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive, ElementRef, Input } from '@angular/core';
import { CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef } from '@angular/cdk/table';
/**
 * Cell definition for the hc-table.
 * Captures the template of a column's data row cell as well as cell-specific properties.
 */
export class HcCellDef extends CdkCellDef {
}
HcCellDef.decorators = [
    { type: Directive, args: [{
                selector: '[hcCellDef]',
                providers: [{ provide: CdkCellDef, useExisting: HcCellDef }]
            },] }
];
/**
 * Header cell definition for the hc-table.
 * Captures the template of a column's header cell and as well as cell-specific properties.
 */
export class HcHeaderCellDef extends CdkHeaderCellDef {
}
HcHeaderCellDef.decorators = [
    { type: Directive, args: [{
                selector: '[hcHeaderCellDef]',
                providers: [{ provide: CdkHeaderCellDef, useExisting: HcHeaderCellDef }]
            },] }
];
/**
 * Footer cell definition for the hc-table.
 * Captures the template of a column's footer cell and as well as cell-specific properties.
 */
export class HcFooterCellDef extends CdkFooterCellDef {
}
HcFooterCellDef.decorators = [
    { type: Directive, args: [{
                selector: '[hcFooterCellDef]',
                providers: [{ provide: CdkFooterCellDef, useExisting: HcFooterCellDef }]
            },] }
];
/**
 * Column definition for the hc-table.
 * Defines a set of cells available for a table column.
 */
export class HcColumnDef extends CdkColumnDef {
    constructor() {
        super(...arguments);
        this._justify = 'left';
    }
    /**
     * Sets the text alignment for this column: `left` (default), `center` or `right`
     * @return {?}
     */
    get justify() {
        return this._justify;
    }
    /**
     * @param {?} justifyVal
     * @return {?}
     */
    set justify(justifyVal) {
        if (justifyVal === 'left' || justifyVal === 'center' || justifyVal === 'right') {
            this._justify = justifyVal;
        }
        else {
            throw Error('Unsupported table column alignment value: ' + justifyVal);
        }
    }
}
HcColumnDef.decorators = [
    { type: Directive, args: [{
                selector: '[hcColumnDef]',
                providers: [{ provide: CdkColumnDef, useExisting: HcColumnDef }]
            },] }
];
HcColumnDef.propDecorators = {
    name: [{ type: Input, args: ['hcColumnDef',] }],
    justify: [{ type: Input }],
    sticky: [{ type: Input }],
    stickyEnd: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcColumnDef.prototype._justify;
    /**
     * Unique name for this column.
     * @type {?}
     */
    HcColumnDef.prototype.name;
    /**
     * Whether this column should be sticky positioned at the start of the row
     * @type {?}
     */
    HcColumnDef.prototype.sticky;
    /**
     * Whether this column should be sticky positioned on the end of the row
     * @type {?}
     */
    HcColumnDef.prototype.stickyEnd;
}
/**
 * Header cell template container that adds the right classes and role.
 */
export class HcHeaderCell extends CdkHeaderCell {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     */
    constructor(columnDef, elementRef) {
        super(columnDef, elementRef);
        elementRef.nativeElement.classList.add(`hc-column-${columnDef.cssClassFriendlyName}`);
        elementRef.nativeElement.classList.add(`hc-table-justify-` + columnDef.justify);
    }
}
HcHeaderCell.decorators = [
    { type: Directive, args: [{
                selector: 'hc-header-cell, th[hc-header-cell]',
                host: {
                    class: 'hc-header-cell',
                    role: 'columnheader'
                }
            },] }
];
/** @nocollapse */
HcHeaderCell.ctorParameters = () => [
    { type: HcColumnDef },
    { type: ElementRef }
];
/**
 * Footer cell template container that adds the right classes and role.
 */
export class HcFooterCell extends CdkFooterCell {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     */
    constructor(columnDef, elementRef) {
        super(columnDef, elementRef);
        elementRef.nativeElement.classList.add(`hc-column-${columnDef.cssClassFriendlyName}`);
        elementRef.nativeElement.classList.add(`hc-table-justify-` + columnDef.justify);
    }
}
HcFooterCell.decorators = [
    { type: Directive, args: [{
                selector: 'hc-footer-cell, td[hc-footer-cell]',
                host: {
                    class: 'hc-footer-cell',
                    role: 'gridcell'
                }
            },] }
];
/** @nocollapse */
HcFooterCell.ctorParameters = () => [
    { type: HcColumnDef },
    { type: ElementRef }
];
/**
 * Cell template container that adds the right classes and role.
 */
export class HcCell extends CdkCell {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     */
    constructor(columnDef, elementRef) {
        super(columnDef, elementRef);
        elementRef.nativeElement.classList.add(`hc-column-${columnDef.cssClassFriendlyName}`);
        elementRef.nativeElement.classList.add(`hc-table-justify-` + columnDef.justify);
    }
}
HcCell.decorators = [
    { type: Directive, args: [{
                selector: 'hc-cell, td[hc-cell]',
                host: {
                    class: 'hc-cell',
                    role: 'gridcell'
                }
            },] }
];
/** @nocollapse */
HcCell.ctorParameters = () => [
    { type: HcColumnDef },
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,