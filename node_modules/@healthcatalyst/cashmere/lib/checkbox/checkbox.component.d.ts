import { ElementRef, EventEmitter, Renderer2, DoCheck } from '@angular/core';
import { ControlValueAccessor, NgForm, FormGroupDirective, NgControl } from '@angular/forms';
import { HcFormControlComponent } from '../form-field/hc-form-control.component';
export declare class CheckboxChangeEvent {
    source: CheckboxComponent;
    checked: boolean;
    constructor(source: CheckboxComponent, checked: boolean);
}
export declare class CheckboxComponent extends HcFormControlComponent implements ControlValueAccessor, DoCheck {
    private _renderer;
    private _elementRef;
    _ngControl: NgControl;
    private _uniqueId;
    private _form;
    private _checked;
    private _tabIndex;
    private _tight;
    _componentId: string;
    /** Value attribute of the native checkbox */
    value: string;
    /** Whether the checkbox is indeterminate. It can represent a checkbox with three states. */
    indeterminate: boolean;
    /** If true, the checkbox is for display purposes (not user interaction). As such its checked/unchecked state
     * can only be controlled programatically. Useful for embedding in an ng-select typeahead */
    isStub: boolean;
    /** Unique id for the checkbox element. If none is supplied, one will be auto-generated. */
    id: string;
    /** If true, condense the default margin and reduce the font size. *Defaults to `false`.*  */
    tight: boolean;
    /** Sets the position of the checkbox relative to its associated label. *Defaults to `center`.*  */
    align: 'center' | 'top' | 'bottom';
    /** Sets unique name used in a form */
    name: string | null;
    /** Event emitted whenever the state changes */
    change: EventEmitter<CheckboxChangeEvent>;
    _checkboxInput: ElementRef;
    readonly _getHostId: string;
    readonly _getCheckboxCheckedClass: boolean;
    readonly _getCheckboxDisabledClass: boolean;
    readonly _getCheckboxIndeterminateClass: boolean;
    /** Whether the checkbox is required. */
    required: boolean;
    /** Whether the checkbox is disabled. */
    disabled: boolean;
    /** Whether the checkbox is checked. */
    checked: boolean;
    /** TabIndex attribute of native checkbox */
    tabIndex: number;
    readonly _inputId: string;
    private _onChangeFunc;
    private _onTouchFunc;
    constructor(tabindex: string, _renderer: Renderer2, _elementRef: ElementRef, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _ngControl: NgControl);
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => any): void;
    setDisabledState(disabledVal: boolean): void;
    /** Toggles the current checked state of the checkbox */
    toggle(): void;
    _clickEvent(event: Event): void;
    _stopChangeEvent(event: Event): void;
    private _emitChangeEvent;
    _onBlur(): void;
    ngDoCheck(): void;
    private _updateErrorState;
}
