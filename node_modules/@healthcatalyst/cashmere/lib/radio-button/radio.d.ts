import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnInit, QueryList, DoCheck, ElementRef } from '@angular/core';
import { HcFormControlComponent } from '../form-field/hc-form-control.component';
import { ControlValueAccessor, NgForm, FormGroupDirective, NgControl } from '@angular/forms';
/** Groups single radio buttons together into a set for which only one can be selected */
export declare class RadioGroupDirective extends HcFormControlComponent implements ControlValueAccessor, AfterContentInit, DoCheck {
    private _cdRef;
    _ngControl: NgControl;
    _verticalClass: boolean;
    _horizontalClass: boolean;
    /** Event emitted when the value of a radio button changes inside the group. */
    change: EventEmitter<RadioButtonChangeEvent>;
    /** A list of all the radio buttons included in the group */
    radios: QueryList<RadioButtonComponent>;
    private _value;
    private _uniqueName;
    private _name;
    private _inline;
    private _tight;
    private _initialized;
    private _selected;
    private _form;
    _componentId: string;
    _onChangeFn: (value: any) => void;
    _onTouchFn: () => any;
    /** Name of radio group. Auto-generated name will be used if no name is set */
    name: string;
    /** Unique id for the radio group. If none is supplied, defaults to name. */
    id: string;
    /** Value of radio buttons */
    value: any;
    /** Boolean value that enables/disables the radio group */
    disabled: boolean;
    /** Boolean value of whether the radio group is required on a form */
    required: boolean;
    /** Gets and sets the currently selected value of the radio button group */
    selected: RadioButtonComponent | null;
    /** Sets the layout orientation of the radio button group; defaults to false */
    inline: boolean;
    /** If true, condense the default margin and reduce the font size on all contained radios. *Defaults to `false`.*  */
    tight: boolean;
    constructor(_cdRef: ChangeDetectorRef, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _ngControl: NgControl);
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    _touch(): void;
    _emitChangeEvent(): void;
    private _markRadiosForCheck;
    private _updateSelectedRadio;
    private _checkSelectedRadio;
    private _updateRadioButtonNames;
    ngDoCheck(): void;
    private _updateErrorState;
}
/** Event type that is emitted when a radio button or radio button group changes */
export declare class RadioButtonChangeEvent {
    source: RadioButtonComponent | null;
    value: any;
    /**
     * @param source the radio button that fired the event
     * @param value the value of that radio button
     */
    constructor(source: RadioButtonComponent | null, value: any);
}
/** Radio buttons allow the user to choose only one of a predefined set of mutually exclusive options. */
export declare class RadioButtonComponent implements OnInit {
    private cdRef;
    _elementRef: ElementRef;
    private _uniqueId;
    /** Element id for the radio button. Auto-generated id will be used if none is set */
    id: string;
    /** Name of radio button */
    name: string;
    /** Event emitted when the value of the radio button changes */
    change: EventEmitter<RadioButtonChangeEvent>;
    private _checked;
    private _value;
    private _required;
    private _disabled;
    private _tight;
    private readonly radioGroup;
    /** Value of radio buttons */
    value: any;
    readonly _getHostId: string;
    /** Boolean value of whether the radio button is required */
    required: boolean;
    /** Boolean value that enables/disables the radio button */
    disabled: boolean;
    /** Boolean that returns whether the radio button is selected */
    checked: boolean;
    readonly _inlineGroup: boolean;
    /** If true, condense the default margin, reduce the font size, and decrease the circle size.
     * Inherits value from parent radio group if part of one. *Defaults to `false`.*  */
    tight: boolean;
    readonly _inputId: string;
    constructor(radioGroup: RadioGroupDirective, cdRef: ChangeDetectorRef, _elementRef: ElementRef);
    ngOnInit(): void;
    _onInputClick(event: Event): void;
    _onInputChange(event: Event): void;
    private _emitChangeEvent;
    _markForCheck(): void;
}
