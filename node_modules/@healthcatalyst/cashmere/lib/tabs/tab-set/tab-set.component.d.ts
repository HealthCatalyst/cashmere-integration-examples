import { AfterContentInit, QueryList } from '@angular/core';
import { EventEmitter, TemplateRef } from '@angular/core';
import { TabComponent } from '../tab/tab.component';
import { ActivatedRoute, Router } from '@angular/router';
export declare class TabChangeEvent {
    index: number;
    tab: TabComponent;
    constructor(index: number, tab: TabComponent);
}
export declare function throwErrorForMissingRouterLink(tabsWithoutRouterLink: TabComponent[]): void;
export declare function validateDirectionInput(inputStr: string): void;
export declare function tabComponentMissing(): Error;
export declare function invalidDefaultTab(tabVal: string | number): void;
export declare class TabSetComponent implements AfterContentInit {
    private router;
    private route;
    _routerEnabled: boolean;
    private _direction;
    private _defaultTab;
    private _stopTabSubscriptionSubject;
    /** The content to be displayed for the currently selected tab.
     * This is read from the tab when it is selected.
     * Not used when this component uses routing.
     */
    tabContent: TemplateRef<any>;
    _tabs: QueryList<TabComponent>;
    /** Emits when the selected tab is changed */
    selectedTabChange: EventEmitter<TabChangeEvent>;
    /** Specify direction of tabs as either `horizontal` or `vertical`. Defaults to `vertical` */
    direction: string;
    /** Zero-based numerical value specifying which tab to select by default, setting to `none` means no tab
     * will be immediately selected. Defaults to 0 (the first tab). */
    defaultTab: string | number;
    /** Determines whether the tab set will create a router-outlet or ng-container for the tab content.
     * If set to false, the app will need to add its own container.  Defaults to `true`. */
    addContentContainer: boolean;
    _addContentContainer: boolean;
    /** If true, condense the default padding on all included tabs. *Defaults to `false`.*  */
    tight: boolean;
    private _tight;
    constructor(router: Router, route: ActivatedRoute);
    ngAfterContentInit(): void;
    private setUpTabs;
    private setTabDirection;
    private subscribeToTabClicks;
    /** Sets the currently selected tab by either its numerical index or `TabComponent` object  */
    selectTab(tab: number | TabComponent): void;
    _setActive(tab: TabComponent): void;
    private defaultToFirstTab;
    private checkForRouterUse;
    private defaultToFirstRoute;
    private mapRouterLinkToString;
}
