import { Subscriber, Observable } from 'rxjs';
/** Abstract class for common initialization functionality */
export declare abstract class Initializable {
    /** Whether this directive has been marked as initialized. */
    _isInitialized: boolean;
    /**
     * List of subscribers that subscribed before the directive was initialized. Should be notified
     * during _markInitialized. Set to null after pending subscribers are notified, and should
     * not expect to be populated after.
     */
    _pendingSubscribers: Subscriber<never>[] | null;
    /**
     * Observable stream that emits when the directive initializes. If already initialized, the
     * subscriber is stored to be notified once _markInitialized is called.
     * @docs-private
     */
    initialized: Observable<never>;
    /**
     * Marks the state as initialized and notifies pending subscribers. Should be called at the end
     * of ngOnInit.
     * @docs-private
     */
    _markInitialized(): void;
    /** Emits and completes the subscriber stream (should only emit once). */
    _notifySubscriber(subscriber: Subscriber<never>): void;
}
