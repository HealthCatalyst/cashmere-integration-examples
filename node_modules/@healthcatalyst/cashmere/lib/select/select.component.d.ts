import { ElementRef, DoCheck, EventEmitter, QueryList, AfterContentInit } from '@angular/core';
import { ControlValueAccessor, NgForm, FormGroupDirective, NgControl } from '@angular/forms';
import { HcFormControlComponent } from '../form-field/hc-form-control.component';
import { HcOptionDirective } from './hc-option.directive';
export declare class SelectChangeEvent {
    source: SelectComponent;
    value: any;
    constructor(source: SelectComponent, value: any);
}
/** Select one of many options from a dropdown */
export declare class SelectComponent extends HcFormControlComponent implements ControlValueAccessor, AfterContentInit, DoCheck {
    _ngControl: NgControl;
    private _uniqueInputId;
    private _form;
    private _tight;
    private _value;
    private _valueData;
    _componentId: string;
    _options: QueryList<HcOptionDirective>;
    _nativeSelect: ElementRef;
    /** Optional string of text to appear before selection is made */
    placeholder: string;
    /** Enables or disables the component */
    disabled: boolean;
    /** Sets whether this is a required form element */
    required: boolean;
    /** Element id. */
    id: string;
    /** Get or set the value of the select component */
    value: any;
    /** If true, condense the default margin and reduce the font size. *Defaults to `false`.*  */
    tight: boolean;
    readonly focus: EventEmitter<void>;
    readonly blur: EventEmitter<void>;
    /** Event emitted whenever the state changes */
    change: EventEmitter<SelectChangeEvent>;
    _hostClass: boolean;
    readonly _disabledClass: boolean;
    constructor(_parentForm: NgForm, _parentFormGroup: FormGroupDirective, _ngControl: NgControl);
    ngAfterContentInit(): void;
    private onChange;
    private onTouched;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    _change(event: Event, value: any): void;
    ngDoCheck(): void;
    private _updateErrorState;
}
