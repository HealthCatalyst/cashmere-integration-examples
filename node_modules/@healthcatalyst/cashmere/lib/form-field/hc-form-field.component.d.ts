import { AfterContentInit, QueryList, ElementRef, OnDestroy } from '@angular/core';
import { HcFormControlComponent } from './hc-form-control.component';
import { HcErrorComponent } from './hc-error.component';
import { HcPrefixDirective } from './hc-prefix.directive';
import { HcSuffixDirective } from './hc-suffix.directive';
import { HcLabelComponent } from './hc-label.component';
import { InputDirective } from '../input/input.directive';
export declare function getControlMissing(): Error;
/** Container for form fields that applies Cashmere styling and behavior */
export declare class HcFormFieldComponent implements AfterContentInit, OnDestroy {
    private _elementRef;
    private _inline;
    private _tight;
    private unsubscribe$;
    _control: HcFormControlComponent;
    _controls: QueryList<HcFormControlComponent>;
    _errorChildren: QueryList<HcErrorComponent>;
    _prefixChildren: QueryList<HcPrefixDirective>;
    _suffixChildren: QueryList<HcSuffixDirective>;
    _inputChildren: QueryList<InputDirective>;
    _labelChildren: QueryList<HcLabelComponent>;
    _classHcFormFieldClass: boolean;
    readonly _disabledClass: boolean;
    /** Read-only boolean value of whether the form field has an associated label element */
    readonly hasLabel: boolean;
    /** Read-only boolean value of whether the form field has an input element */
    readonly hasInput: boolean;
    /** Whether the form elements should be stacked (default), or inline */
    inline: boolean;
    /** If true, condense the default padding on all included elements and reduce the font size. *Defaults to `false`.*  */
    tight: boolean;
    constructor(_elementRef: ElementRef<HTMLInputElement>);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    _updateTightControls(): void;
    getConnectedOverlayOrigin(): ElementRef;
    _shouldShowErrorMessages(): boolean;
}
