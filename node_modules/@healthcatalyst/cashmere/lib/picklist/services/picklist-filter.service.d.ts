import { Observable, Subscription } from 'rxjs';
import { FilterableSelectList, SelectListOption, ValueListOption, ValueSetListOption } from '../pane/picklist-pane.model';
import { PicklistValueType } from '../picklist.model';
import { WorkTrackerService } from '../../shared/work-tracker.service';
import { PicklistFilterRemoteService } from './picklist-filter-remote.service';
import { PicklistFilterLocalService } from './picklist-filter-local.service';
import { PicklistStateService } from './picklist-state.service';
export declare class PicklistFilterService {
    private workTracker;
    private stateService;
    private remoteFilterService;
    private localFilterService;
    readonly valueList: FilterableSelectList<ValueListOption>;
    readonly valueSetList: FilterableSelectList<ValueSetListOption>;
    readonly searchTokens: string[];
    searchTerm: string;
    constructor(workTracker: WorkTrackerService, stateService: PicklistStateService, remoteFilterService: PicklistFilterRemoteService, localFilterService: PicklistFilterLocalService);
    reset(): void;
    runFilter(searchTerm: string): void;
    filterOptionsRemote(type?: PicklistValueType, shouldAppend?: boolean, selectAllCount?: number | null): Subscription;
    loadMore(type?: PicklistValueType, autoLoadMore?: boolean): void;
    loadForSelectAll(numberToLoad: number): Observable<boolean>;
    reloadIfEmpty(): void;
    preFilterOptionsForRemoteMode(valuesMap: Map<string, SelectListOption>, list: FilterableSelectList<SelectListOption>): void;
    showListLoadingIndicators(workTracker: Observable<boolean>, type?: PicklistValueType, isAppending?: boolean): void;
    private showLoadingIndicatorForList;
}
