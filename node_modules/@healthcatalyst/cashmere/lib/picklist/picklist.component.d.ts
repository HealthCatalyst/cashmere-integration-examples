import { EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { PicklistPaneComponent } from './pane/picklist-pane.component';
import { IPicklistOptions, IPicklistSettings, PicklistSettings } from './picklist.model';
export declare function validateSortInput(inputStr: string): void;
export declare class PicklistComponent implements ControlValueAccessor {
    /**
     * Settings for the picklist. Internally, this will trigger a call to `reset()`.
     */
    settings: PicklistSettings;
    /**
     * An array of unique strings to be used as the picklist options.
     */
    simpleOptions: Array<string> | null;
    /**
     * Set to true to show text in the header. *Defaults to true.*
     */
    showHeaderText: boolean;
    /**
     * Text for left header. *Defaults to "Available".*
     */
    leftHeaderText: string;
    /**
     * Text for right header. *Defaults to "Selected".*
     */
    rightHeaderText: string;
    /**
     * How to sort options in the pane. Options: `asc` | `desc` | `none`; *Defaults to `none`.*
     */
    sort: string;
    _available: PicklistPaneComponent | undefined;
    _confirmed: PicklistPaneComponent | undefined;
    /** Fired when a change is made to the picklist selection. */
    changed: EventEmitter<any>;
    private picklistSettings;
    readonly _leftToRightMoveBtnIsDisabled: boolean;
    private stringOptions;
    /**
     * Current selected value of the picklist. Will be either `IPicklistOptions` or `string[]` depending on the type of options provided.
     */
    value: IPicklistOptions | string[];
    onChange: any;
    onTouched: any;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: IPicklistOptions | string[]): void;
    /**
     * Will update the picklist with the given settings, maintaining any previous settings that have not been overridden.
     */
    update(settings: IPicklistSettings): void;
    /**
     * Will reset the picklist settings with the given settings. (Clears out any previous settings.)
     */
    reset(settings?: IPicklistSettings): void;
    /**
     * Will change the active tab. (Will do nothing if `settings.useValuesets` is false.)
     */
    setActiveValueType(type: 'values' | 'valueSets'): void;
    /**
     * Will move all selected items from the given pane into its companion pane. Used internally by the left and right arrow buttons.
     * @param pane the pane from which we are moving items out of
     */
    moveSelectedItems(pane: PicklistPaneComponent): void;
    private updateStateFromStringOptions;
    private resetPanes;
    private applyChangeToModel;
    private convertStringsToValueOptions;
    private picklistModelisArray;
}
