import { ElementRef, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { PicklistService } from '../services/picklist.service';
import { PicklistActionService } from '../services/picklist-action.service';
import { PicklistFilterService } from '../services/picklist-filter.service';
import { PicklistOptionsSource, PicklistSettings, PicklistValueType } from '../picklist.model';
import { FilterableSelectList, SelectListOption, ValueListOption, ValueSetListOption } from './picklist-pane.model';
export declare class PicklistPaneComponent {
    listService: PicklistService;
    actionService: PicklistActionService;
    filterService: PicklistFilterService;
    emptyMsg: string;
    moveSelectedItems: EventEmitter<PicklistPaneComponent>;
    listContainerEl: ElementRef | undefined;
    searchInputEl: ElementRef | undefined;
    companion: PicklistPaneComponent | null;
    shouldExcludeCompanion: boolean;
    codeIsSignificant: boolean;
    searchTerm: string;
    searchTermStream: Subject<string>;
    selectAllWasLastClicked: boolean;
    selectAllLimit: number;
    constructor(listService: PicklistService, actionService: PicklistActionService, filterService: PicklistFilterService);
    reset(source: PicklistOptionsSource, settings: PicklistSettings, companion: PicklistPaneComponent, excludeCompanion?: boolean): void;
    readonly valueList: FilterableSelectList<ValueListOption>;
    readonly valueSetList: FilterableSelectList<ValueSetListOption>;
    readonly isPaged: boolean;
    readonly optionsAvailableCount: number;
    readonly PicklistValueOptionsTotal: number;
    readonly valueSetOptionsTotal: number;
    readonly optionsShowingCount: number;
    readonly showTooManyToSelectAllMsg: boolean;
    shouldShowList<T extends SelectListOption>(list: FilterableSelectList<T>): boolean;
    listIsFilteredToEmpty<T extends SelectListOption>(list: FilterableSelectList<T>): boolean;
    isAnySelected(): boolean;
    focusSearch(): void;
    scrollToTop(): void;
    onSearchKeyup(): void;
    onItemClicked<T extends SelectListOption>(event: MouseEvent, index: number, list: FilterableSelectList<T>, item: T): void;
    preventIEHighlightBug(): void;
    onValuesetCaretClicked(event: MouseEvent, valueset: ValueSetListOption): void;
    triggerLoadMore(type: PicklistValueType): void;
    onItemDoubleClicked<T extends SelectListOption>(event: MouseEvent, list: FilterableSelectList<T>, item: T): void;
    selectAll(): void;
    selectNone(): void;
    private loadAndSelectAll;
    private pagingValueList;
    private wireUpSearch;
}
