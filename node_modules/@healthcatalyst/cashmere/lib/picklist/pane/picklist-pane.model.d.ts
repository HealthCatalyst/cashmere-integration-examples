import { Observable } from 'rxjs';
import { IValueOption, IValueSetOption } from '../picklist.model';
export declare class FilterableSelectList<T extends SelectListOption> {
    options: Map<string, T>;
    selectedOptions: Map<string, T>;
    lastClickedOption: T | null;
    filteredOptions: T[];
    isActive: boolean;
    additionalRemoteOptions: number;
    loadingOptions: Observable<boolean>;
    appendingOptions: Observable<boolean>;
    codeIsSignificant: boolean;
    sort: string;
    constructor(options?: Map<string, T>);
}
export declare class SubSelectList extends FilterableSelectList<ValueListOption> {
    parentValueSet: ValueSetListOption;
    options: Map<string, ValueListOption>;
    constructor(parentValueSet: ValueSetListOption, options?: Map<string, ValueListOption>);
}
export declare function isSubList(model: FilterableSelectList<SelectListOption>): model is SubSelectList;
export declare class SelectListOption {
    option: any;
    code: string;
    selected: boolean;
    constructor(option: any, code: string);
}
export declare class ValueListOption extends SelectListOption {
    constructor(option: IValueOption, code: string);
}
export declare class ValueSetListOption extends SelectListOption {
    subValuesSelectList: SubSelectList;
    showValues: boolean;
    loadingValues: boolean;
    constructor(option: IValueSetOption, code: string);
}
export declare class PicklistValueOptions {
    values: Map<string, ValueListOption>;
    valueSets: Map<string, ValueSetListOption>;
}
