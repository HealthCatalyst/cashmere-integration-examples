import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ConfigStoreService } from '../services/config-store.service';
import { CalendarComponent } from '../../datepicker/calendar/calendar.component';
import { DatepickerInputDirective, HcDatepickerInputEvent } from '../../datepicker/datepicker-input/datepicker-input.directive';
import { D } from '../../datepicker/datetime/date-formats';
/** Component combining a calendar and input as a representation of a date  */
export declare class CalendarWrapperComponent implements OnChanges {
    configStore: ConfigStoreService;
    _hostClass: boolean;
    hcCalendar: CalendarComponent;
    datePickerInput: DatepickerInputDirective;
    /** Emits when selected date has changed. */
    readonly selectedDateChange: EventEmitter<D>;
    /** Current selected date. */
    selectedDate: D | undefined;
    dateFormat: string;
    /** Whether the pickers include the calendar, time selector, or both. Defaults to `date`. */
    mode: 'date' | 'time' | 'date-time';
    /** Whether the time picker should use a 12 or 24 hour clock. Defaults to 12. */
    hourCycle: number;
    /** Prefix label on top of component. */
    prefixLabel: string;
    /** Flag to filter out weekends. */
    excludeWeekends: boolean;
    /** The minimum selectable date. */
    minDate: D | undefined;
    /** The maximum selectable date. */
    maxDate: D | undefined;
    /** Message displayed when a date is invalid. */
    invalidDateLabel: string;
    weekendFilter: () => boolean;
    constructor(configStore: ConfigStoreService);
    ngOnChanges(changes: SimpleChanges): void;
    _onCalendarChange(date: D): void;
    _onInputChange(event: HcDatepickerInputEvent): void;
    /** Focus inner input */
    focusInput(): void;
}
