import { ElementRef, EventEmitter, OnInit, OnDestroy, ViewContainerRef, AfterContentInit } from '@angular/core';
import { HcPopComponent } from '../popover.component';
import { HcPopoverAnchoringService } from '../popover-anchoring.service';
import { HcPopoverOpenOptions, HcPopoverTrigger } from '../types';
import { PopoverNotificationService } from '../notification.service';
import { HcPopoverAccessibilityService } from '../popover-accessibility.service';
export declare class HcPopoverAnchorDirective implements OnInit, AfterContentInit, OnDestroy {
    _elementRef: ElementRef;
    private _viewContainerRef;
    _anchoring: HcPopoverAnchoringService;
    private _accessibility;
    /** Reference to the popover instance. */
    attachedPopover: HcPopComponent;
    private _attachedPopover;
    /** Trigger event to toggle the popover. *Defaults to `"click"`.*
     * Accepts `click`, `mousedown`, `hover`, `rightclick`, or `none`.
     * Note: if "hover" is selected, the backdrop for the popover will be disabled. */
    trigger: HcPopoverTrigger;
    private _trigger;
    /** Object or value that can be passed into the popover to customize its content */
    context: any;
    _hasSubmenu: boolean;
    /** Emits when the popover is opened. */
    popoverOpened: EventEmitter<void>;
    /** Emits when the popover is closed. */
    popoverClosed: EventEmitter<any>;
    /** Instance of notification service. Will be undefined until attached to a popover. */
    _notifications: PopoverNotificationService;
    /** Emits when the directive is destroyed. */
    private _onDestroy;
    constructor(_elementRef: ElementRef, _viewContainerRef: ViewContainerRef, _anchoring: HcPopoverAnchoringService, _accessibility: HcPopoverAccessibilityService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    _showOrHideOnClick($event: MouseEvent): void;
    _showOrHideOnMouseOver($event: MouseEvent): void;
    _showOrHideRightClick($event: MouseEvent): boolean;
    _showOnHover($event: MouseEvent): void;
    _hideOnLeave($event: MouseEvent): void;
    /** Handle keyboard navigation of a hcMenu using the arrow or tab keys */
    _keyEvent(event: KeyboardEvent): void;
    /** Gets whether the popover is presently open. */
    isPopoverOpen(): boolean;
    /** Toggles the popover between the open and closed states. */
    togglePopover(): void;
    /** Opens the popover. */
    openPopover(options?: HcPopoverOpenOptions): void;
    /** Closes the popover. */
    closePopover(value?: any, neighborSubMenusAreOpen?: boolean): void;
    /** Realign the popover to the anchor. */
    realignPopover(): void;
    /** Get a reference to the anchor element. */
    getElement(): ElementRef;
    /** Throws an error if the popover instance is not provided. */
    private _validateAttachedPopover;
    /** Throws an error if the trigger is not a valid HcPopoverTrigger. */
    private _validateTrigger;
    /** Dispatch a notification to the notification service, if possible. */
    private _dispatchConfigNotification;
    private _setupKeyboardEvents;
}
