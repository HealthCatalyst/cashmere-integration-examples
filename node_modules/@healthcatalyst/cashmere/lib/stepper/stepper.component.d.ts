import { AfterContentInit, EventEmitter } from '@angular/core';
import { Router, Params, UrlSerializer } from '@angular/router';
export declare function throwErrorForMissingRouterLink(stepsWithoutRouterLink: StepInterface[]): void;
export interface StepInterface {
    /** The text to be displayed under the step indicator */
    label?: string;
    /** If using a router, the route this step should navigate to */
    routerLink?: string;
    /** The icon set the step's hc-icon should use. Must be set if using the icon parameter. */
    iconSet?: string;
    /** An glyph that should be displayed inside the step's circle.
     * If not set, the step number will display in the circle instead. */
    icon?: string;
    /** If true, the step will not be clickable */
    disabled?: boolean;
    /** Apply query params to the routerLink */
    queryParams?: Params;
}
export declare type StepColor = 'green' | 'blue' | 'purple' | 'orange' | 'red' | 'none';
export declare type StepType = 'arrow' | 'isolated';
/** Convey progress through numbered steps, providing a wizard-like workflow.  */
export declare class StepperComponent implements AfterContentInit {
    private router;
    private urlSerializer;
    _routerEnabled: boolean;
    /** An array defining the steps in the stepper */
    steps: StepInterface[];
    /** Sets the layout of the progress stepper. *Defaults to `arrow`.*  */
    type: StepType;
    /** Sets the highlight color of the progress stepper. *Defaults to `green`.*  */
    color: StepColor;
    private _color;
    /** Determines whether numerals should be displayed on each step indicator for the isolated type.
     * *Defaults to `false`.*  */
    showStepCount: boolean;
    private _showStepCount;
    /** If true, include a router outlet with the component. *Defaults to `true`.*  */
    useRouterOutlet: boolean;
    private _useRouterOutlet;
    /** Get or set the currently selected zero-based index of the stepper */
    activeIndex: number | undefined;
    private _activeIndex;
    /** Emits the current zero-based index for the active step whenever it changes */
    activeIndexChange: EventEmitter<number>;
    _hostClass: string;
    constructor(router: Router, urlSerializer: UrlSerializer);
    ngAfterContentInit(): void;
    _stepClick(index: number | undefined): void;
    private _checkForRouterUse;
    /** Can be used to activate the current step following @Input() steps routerLink or queryParams updates  */
    findCurrentStep(): void;
}
