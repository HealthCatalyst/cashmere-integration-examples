import { Injector, TemplateRef, Type } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { HcToastOptions } from './hc-toast-options';
import { HcToastRef } from './hc-toast-ref';
export declare type ComponentSetup<T> = Partial<T> | ((instance: T) => void);
export declare type ToastContentType<T> = Type<T> | TemplateRef<any>;
/** Toasts provide users with instant feedback on actions they've taken. For more general information,
 * use a `hc-banner`. */
export declare class HcToasterService {
    private injector;
    private _overlay;
    _toasts: HcToastRef[];
    constructor(injector: Injector, _overlay: Overlay);
    /** Displays a new toaster message with the settings included in `toastOptions`. `toastContent` can be used to
     * create entirely custom toasts, but only if the type in toastOptions is set to `custom`. Be sure to set `border-radius: 5px`
     * in the style of your custom content template so it matches the toast container. If your custom toast is
     * using a component, the `componentSetup` parameter accepts an object or function to configure that component. */
    addToast<T = any>(toastOptions?: HcToastOptions, toastContent?: ToastContentType<T>, componentSetup?: ComponentSetup<T>): HcToastRef;
    /** Closes the most recent toast displayed */
    closeLastToast(): void;
    /** Closes currently visible toasts */
    closeAllToasts(): void;
    private _createOverlay;
    private _attachToastContainer;
    private _createInjector;
    private _getOverlayConfig;
    private _getPositionStrategy;
    private _removeToastPointer;
    private _getLastToast;
    private _updateToastPositions;
}
