/**
 * @fileoverview added by tsickle
 * Generated from: lib/table/row.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// tslint:disable:directive-class-suffix use-input-property-decorator component-class-suffix
// tslint:disable:no-host-metadata-property no-inputs-metadata-property
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ChangeDetectionStrategy, Component, Directive, ViewEncapsulation } from '@angular/core';
import { CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef } from '@angular/cdk/table';
/**
 * Header row definition for the hc-table.
 * Captures the header row's template and other header properties such as the columns to display.
 */
var HcHeaderRowDef = /** @class */ (function (_super) {
    tslib_1.__extends(HcHeaderRowDef, _super);
    function HcHeaderRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HcHeaderRowDef.decorators = [
        { type: Directive, args: [{
                    selector: '[hcHeaderRowDef]',
                    providers: [{ provide: CdkHeaderRowDef, useExisting: HcHeaderRowDef }],
                    inputs: ['columns: hcHeaderRowDef', 'sticky: hcHeaderRowDefSticky']
                },] }
    ];
    return HcHeaderRowDef;
}(CdkHeaderRowDef));
export { HcHeaderRowDef };
/**
 * Footer row definition for the mat-table.
 * Captures the footer row's template and other footer properties such as the columns to display.
 */
var HcFooterRowDef = /** @class */ (function (_super) {
    tslib_1.__extends(HcFooterRowDef, _super);
    function HcFooterRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HcFooterRowDef.decorators = [
        { type: Directive, args: [{
                    selector: '[hcFooterRowDef]',
                    providers: [{ provide: CdkFooterRowDef, useExisting: HcFooterRowDef }],
                    inputs: ['columns: hcFooterRowDef', 'sticky: hcFooterRowDefSticky']
                },] }
    ];
    return HcFooterRowDef;
}(CdkFooterRowDef));
export { HcFooterRowDef };
/**
 * Data row definition for the mat-table.
 * Captures the footer row's template and other footer properties such as the columns to display and
 * a when predicate that describes when this row should be used.
 * @template T
 */
var HcRowDef = /** @class */ (function (_super) {
    tslib_1.__extends(HcRowDef, _super);
    function HcRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HcRowDef.decorators = [
        { type: Directive, args: [{
                    selector: '[hcRowDef]',
                    providers: [{ provide: CdkRowDef, useExisting: HcRowDef }],
                    inputs: ['columns: hcRowDefColumns', 'when: hcRowDefWhen']
                },] }
    ];
    return HcRowDef;
}(CdkRowDef));
export { HcRowDef };
/**
 * Footer template container that contains the cell outlet. Adds the right class and role.
 */
var HcHeaderRow = /** @class */ (function (_super) {
    tslib_1.__extends(HcHeaderRow, _super);
    function HcHeaderRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HcHeaderRow.decorators = [
        { type: Component, args: [{
                    selector: 'hc-header-row, tr[hc-header-row]',
                    template: CDK_ROW_TEMPLATE,
                    host: {
                        class: 'hc-header-row',
                        role: 'row'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'hcHeaderRow',
                    providers: [{ provide: CdkHeaderRow, useExisting: HcHeaderRow }]
                }] }
    ];
    return HcHeaderRow;
}(CdkHeaderRow));
export { HcHeaderRow };
/**
 * Footer template container that contains the cell outlet. Adds the right class and role.
 */
var HcFooterRow = /** @class */ (function (_super) {
    tslib_1.__extends(HcFooterRow, _super);
    function HcFooterRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HcFooterRow.decorators = [
        { type: Component, args: [{
                    selector: 'hc-footer-row, tr[hc-footer-row]',
                    template: CDK_ROW_TEMPLATE,
                    host: {
                        class: 'hc-footer-row',
                        role: 'row'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'hcFooterRow',
                    providers: [{ provide: CdkFooterRow, useExisting: HcFooterRow }]
                }] }
    ];
    return HcFooterRow;
}(CdkFooterRow));
export { HcFooterRow };
/**
 * Data row template container that contains the cell outlet. Adds the right class and role.
 */
var HcRow = /** @class */ (function (_super) {
    tslib_1.__extends(HcRow, _super);
    function HcRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HcRow.decorators = [
        { type: Component, args: [{
                    selector: 'hc-row, tr[hc-row]',
                    template: CDK_ROW_TEMPLATE,
                    host: {
                        class: 'hc-row',
                        role: 'row'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'hcRow',
                    providers: [{ provide: CdkRow, useExisting: HcRow }]
                }] }
    ];
    return HcRow;
}(CdkRow));
export { HcRow };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL3RhYmxlL3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFXQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7QUFNckk7SUFLb0MsMENBQWU7SUFMbkQ7O0lBS3FELENBQUM7O2dCQUxyRCxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUMsQ0FBQztvQkFDcEUsTUFBTSxFQUFFLENBQUMseUJBQXlCLEVBQUUsOEJBQThCLENBQUM7aUJBQ3RFOztJQUNvRCxxQkFBQztDQUFBLEFBTHRELENBS29DLGVBQWUsR0FBRztTQUF6QyxjQUFjOzs7OztBQU0zQjtJQUtvQywwQ0FBZTtJQUxuRDs7SUFLcUQsQ0FBQzs7Z0JBTHJELFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBQyxDQUFDO29CQUNwRSxNQUFNLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSw4QkFBOEIsQ0FBQztpQkFDdEU7O0lBQ29ELHFCQUFDO0NBQUEsQUFMdEQsQ0FLb0MsZUFBZSxHQUFHO1NBQXpDLGNBQWM7Ozs7Ozs7QUFPM0I7SUFLaUMsb0NBQVk7SUFMN0M7O0lBSytDLENBQUM7O2dCQUwvQyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFDLENBQUM7b0JBQ3hELE1BQU0sRUFBRSxDQUFDLDBCQUEwQixFQUFFLG9CQUFvQixDQUFDO2lCQUM3RDs7SUFDOEMsZUFBQztDQUFBLEFBTGhELENBS2lDLFNBQVMsR0FBTTtTQUFuQyxRQUFROzs7O0FBR3JCO0lBWWlDLHVDQUFZO0lBWjdDOztJQVkrQyxDQUFDOztnQkFaL0MsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxrQ0FBa0M7b0JBQzVDLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLElBQUksRUFBRTt3QkFDRixLQUFLLEVBQUUsZUFBZTt3QkFDdEIsSUFBSSxFQUFFLEtBQUs7cUJBQ2Q7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUMsQ0FBQztpQkFDakU7O0lBQzhDLGtCQUFDO0NBQUEsQUFaaEQsQ0FZaUMsWUFBWSxHQUFHO1NBQW5DLFdBQVc7Ozs7QUFHeEI7SUFZaUMsdUNBQVk7SUFaN0M7O0lBWStDLENBQUM7O2dCQVovQyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtDQUFrQztvQkFDNUMsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsSUFBSSxFQUFFO3dCQUNGLEtBQUssRUFBRSxlQUFlO3dCQUN0QixJQUFJLEVBQUUsS0FBSztxQkFDZDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLFFBQVEsRUFBRSxhQUFhO29CQUN2QixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBQyxDQUFDO2lCQUNqRTs7SUFDOEMsa0JBQUM7Q0FBQSxBQVpoRCxDQVlpQyxZQUFZLEdBQUc7U0FBbkMsV0FBVzs7OztBQUd4QjtJQVkyQixpQ0FBTTtJQVpqQzs7SUFZbUMsQ0FBQzs7Z0JBWm5DLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixJQUFJLEVBQUU7d0JBQ0YsS0FBSyxFQUFFLFFBQVE7d0JBQ2YsSUFBSSxFQUFFLEtBQUs7cUJBQ2Q7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxRQUFRLEVBQUUsT0FBTztvQkFDakIsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUMsQ0FBQztpQkFDckQ7O0lBQ2tDLFlBQUM7Q0FBQSxBQVpwQyxDQVkyQixNQUFNLEdBQUc7U0FBdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXggdXNlLWlucHV0LXByb3BlcnR5LWRlY29yYXRvciBjb21wb25lbnQtY2xhc3Mtc3VmZml4XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5IG5vLWlucHV0cy1tZXRhZGF0YS1wcm9wZXJ0eVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBEaXJlY3RpdmUsIFZpZXdFbmNhcHN1bGF0aW9ufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q0RLX1JPV19URU1QTEFURSwgQ2RrRm9vdGVyUm93LCBDZGtGb290ZXJSb3dEZWYsIENka0hlYWRlclJvdywgQ2RrSGVhZGVyUm93RGVmLCBDZGtSb3csIENka1Jvd0RlZn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3RhYmxlJztcblxuLyoqXG4gKiBIZWFkZXIgcm93IGRlZmluaXRpb24gZm9yIHRoZSBoYy10YWJsZS5cbiAqIENhcHR1cmVzIHRoZSBoZWFkZXIgcm93J3MgdGVtcGxhdGUgYW5kIG90aGVyIGhlYWRlciBwcm9wZXJ0aWVzIHN1Y2ggYXMgdGhlIGNvbHVtbnMgdG8gZGlzcGxheS5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaGNIZWFkZXJSb3dEZWZdJyxcbiAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQ2RrSGVhZGVyUm93RGVmLCB1c2VFeGlzdGluZzogSGNIZWFkZXJSb3dEZWZ9XSxcbiAgICBpbnB1dHM6IFsnY29sdW1uczogaGNIZWFkZXJSb3dEZWYnLCAnc3RpY2t5OiBoY0hlYWRlclJvd0RlZlN0aWNreSddXG59KVxuZXhwb3J0IGNsYXNzIEhjSGVhZGVyUm93RGVmIGV4dGVuZHMgQ2RrSGVhZGVyUm93RGVmIHt9XG5cbi8qKlxuICogRm9vdGVyIHJvdyBkZWZpbml0aW9uIGZvciB0aGUgbWF0LXRhYmxlLlxuICogQ2FwdHVyZXMgdGhlIGZvb3RlciByb3cncyB0ZW1wbGF0ZSBhbmQgb3RoZXIgZm9vdGVyIHByb3BlcnRpZXMgc3VjaCBhcyB0aGUgY29sdW1ucyB0byBkaXNwbGF5LlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1toY0Zvb3RlclJvd0RlZl0nLFxuICAgIHByb3ZpZGVyczogW3twcm92aWRlOiBDZGtGb290ZXJSb3dEZWYsIHVzZUV4aXN0aW5nOiBIY0Zvb3RlclJvd0RlZn1dLFxuICAgIGlucHV0czogWydjb2x1bW5zOiBoY0Zvb3RlclJvd0RlZicsICdzdGlja3k6IGhjRm9vdGVyUm93RGVmU3RpY2t5J11cbn0pXG5leHBvcnQgY2xhc3MgSGNGb290ZXJSb3dEZWYgZXh0ZW5kcyBDZGtGb290ZXJSb3dEZWYge31cblxuLyoqXG4gKiBEYXRhIHJvdyBkZWZpbml0aW9uIGZvciB0aGUgbWF0LXRhYmxlLlxuICogQ2FwdHVyZXMgdGhlIGZvb3RlciByb3cncyB0ZW1wbGF0ZSBhbmQgb3RoZXIgZm9vdGVyIHByb3BlcnRpZXMgc3VjaCBhcyB0aGUgY29sdW1ucyB0byBkaXNwbGF5IGFuZFxuICogYSB3aGVuIHByZWRpY2F0ZSB0aGF0IGRlc2NyaWJlcyB3aGVuIHRoaXMgcm93IHNob3VsZCBiZSB1c2VkLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1toY1Jvd0RlZl0nLFxuICAgIHByb3ZpZGVyczogW3twcm92aWRlOiBDZGtSb3dEZWYsIHVzZUV4aXN0aW5nOiBIY1Jvd0RlZn1dLFxuICAgIGlucHV0czogWydjb2x1bW5zOiBoY1Jvd0RlZkNvbHVtbnMnLCAnd2hlbjogaGNSb3dEZWZXaGVuJ11cbn0pXG5leHBvcnQgY2xhc3MgSGNSb3dEZWY8VD4gZXh0ZW5kcyBDZGtSb3dEZWY8VD4ge31cblxuLyoqIEZvb3RlciB0ZW1wbGF0ZSBjb250YWluZXIgdGhhdCBjb250YWlucyB0aGUgY2VsbCBvdXRsZXQuIEFkZHMgdGhlIHJpZ2h0IGNsYXNzIGFuZCByb2xlLiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdoYy1oZWFkZXItcm93LCB0cltoYy1oZWFkZXItcm93XScsXG4gICAgdGVtcGxhdGU6IENES19ST1dfVEVNUExBVEUsXG4gICAgaG9zdDoge1xuICAgICAgICBjbGFzczogJ2hjLWhlYWRlci1yb3cnLFxuICAgICAgICByb2xlOiAncm93J1xuICAgIH0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBleHBvcnRBczogJ2hjSGVhZGVyUm93JyxcbiAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQ2RrSGVhZGVyUm93LCB1c2VFeGlzdGluZzogSGNIZWFkZXJSb3d9XVxufSlcbmV4cG9ydCBjbGFzcyBIY0hlYWRlclJvdyBleHRlbmRzIENka0hlYWRlclJvdyB7fVxuXG4vKiogRm9vdGVyIHRlbXBsYXRlIGNvbnRhaW5lciB0aGF0IGNvbnRhaW5zIHRoZSBjZWxsIG91dGxldC4gQWRkcyB0aGUgcmlnaHQgY2xhc3MgYW5kIHJvbGUuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2hjLWZvb3Rlci1yb3csIHRyW2hjLWZvb3Rlci1yb3ddJyxcbiAgICB0ZW1wbGF0ZTogQ0RLX1JPV19URU1QTEFURSxcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAnaGMtZm9vdGVyLXJvdycsXG4gICAgICAgIHJvbGU6ICdyb3cnXG4gICAgfSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGV4cG9ydEFzOiAnaGNGb290ZXJSb3cnLFxuICAgIHByb3ZpZGVyczogW3twcm92aWRlOiBDZGtGb290ZXJSb3csIHVzZUV4aXN0aW5nOiBIY0Zvb3RlclJvd31dXG59KVxuZXhwb3J0IGNsYXNzIEhjRm9vdGVyUm93IGV4dGVuZHMgQ2RrRm9vdGVyUm93IHt9XG5cbi8qKiBEYXRhIHJvdyB0ZW1wbGF0ZSBjb250YWluZXIgdGhhdCBjb250YWlucyB0aGUgY2VsbCBvdXRsZXQuIEFkZHMgdGhlIHJpZ2h0IGNsYXNzIGFuZCByb2xlLiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdoYy1yb3csIHRyW2hjLXJvd10nLFxuICAgIHRlbXBsYXRlOiBDREtfUk9XX1RFTVBMQVRFLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgY2xhc3M6ICdoYy1yb3cnLFxuICAgICAgICByb2xlOiAncm93J1xuICAgIH0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBleHBvcnRBczogJ2hjUm93JyxcbiAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQ2RrUm93LCB1c2VFeGlzdGluZzogSGNSb3d9XVxufSlcbmV4cG9ydCBjbGFzcyBIY1JvdyBleHRlbmRzIENka1JvdyB7fVxuIl19