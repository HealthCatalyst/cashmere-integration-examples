/**
 * @fileoverview added by tsickle
 * Generated from: lib/table/table.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgModule } from '@angular/core';
import { HcTable } from './table.component';
import { HcCell, HcCellDef, HcColumnDef, HcFooterCell, HcFooterCellDef, HcHeaderCell, HcHeaderCellDef } from './cell';
import { HcFooterRow, HcFooterRowDef, HcHeaderRow, HcHeaderRowDef, HcRow, HcRowDef } from './row';
import { HcCellResizer } from './cell-resizer.component';
import { CdkTableModule } from '@angular/cdk/table';
import { CommonModule } from '@angular/common';
/** @type {?} */
var EXPORTED_DECLARATIONS = [
    // HcTable
    HcTable,
    // Template defs
    HcHeaderCellDef,
    HcHeaderRowDef,
    HcColumnDef,
    HcCellDef,
    HcRowDef,
    HcFooterCellDef,
    HcFooterRowDef,
    // Cell directives
    HcHeaderCell,
    HcCell,
    HcFooterCell,
    // Row directions
    HcHeaderRow,
    HcRow,
    HcFooterRow,
    // Cell resizer
    HcCellResizer
];
var TableModule = /** @class */ (function () {
    function TableModule() {
    }
    TableModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CdkTableModule, CommonModule],
                    exports: EXPORTED_DECLARATIONS,
                    declarations: EXPORTED_DECLARATIONS
                },] }
    ];
    return TableModule;
}());
export { TableModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL3RhYmxlL3RhYmxlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQ3BILE9BQU8sRUFBQyxXQUFXLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUNoRyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQzs7SUFFdkMscUJBQXFCLEdBQUc7SUFDMUIsVUFBVTtJQUNWLE9BQU87SUFFUCxnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLGNBQWM7SUFDZCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixlQUFlO0lBQ2YsY0FBYztJQUVkLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osTUFBTTtJQUNOLFlBQVk7SUFFWixpQkFBaUI7SUFDakIsV0FBVztJQUNYLEtBQUs7SUFDTCxXQUFXO0lBRVgsZUFBZTtJQUNmLGFBQWE7Q0FDaEI7QUFFRDtJQUFBO0lBSzBCLENBQUM7O2dCQUwxQixRQUFRLFNBQUM7b0JBQ04sT0FBTyxFQUFFLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQztvQkFDdkMsT0FBTyxFQUFFLHFCQUFxQjtvQkFDOUIsWUFBWSxFQUFFLHFCQUFxQjtpQkFDdEM7O0lBQ3lCLGtCQUFDO0NBQUEsQUFMM0IsSUFLMkI7U0FBZCxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIY1RhYmxlfSBmcm9tICcuL3RhYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQge0hjQ2VsbCwgSGNDZWxsRGVmLCBIY0NvbHVtbkRlZiwgSGNGb290ZXJDZWxsLCBIY0Zvb3RlckNlbGxEZWYsIEhjSGVhZGVyQ2VsbCwgSGNIZWFkZXJDZWxsRGVmfSBmcm9tICcuL2NlbGwnO1xuaW1wb3J0IHtIY0Zvb3RlclJvdywgSGNGb290ZXJSb3dEZWYsIEhjSGVhZGVyUm93LCBIY0hlYWRlclJvd0RlZiwgSGNSb3csIEhjUm93RGVmfSBmcm9tICcuL3Jvdyc7XG5pbXBvcnQge0hjQ2VsbFJlc2l6ZXJ9IGZyb20gJy4vY2VsbC1yZXNpemVyLmNvbXBvbmVudCc7XG5pbXBvcnQge0Nka1RhYmxlTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jZGsvdGFibGUnO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmNvbnN0IEVYUE9SVEVEX0RFQ0xBUkFUSU9OUyA9IFtcbiAgICAvLyBIY1RhYmxlXG4gICAgSGNUYWJsZSxcblxuICAgIC8vIFRlbXBsYXRlIGRlZnNcbiAgICBIY0hlYWRlckNlbGxEZWYsXG4gICAgSGNIZWFkZXJSb3dEZWYsXG4gICAgSGNDb2x1bW5EZWYsXG4gICAgSGNDZWxsRGVmLFxuICAgIEhjUm93RGVmLFxuICAgIEhjRm9vdGVyQ2VsbERlZixcbiAgICBIY0Zvb3RlclJvd0RlZixcblxuICAgIC8vIENlbGwgZGlyZWN0aXZlc1xuICAgIEhjSGVhZGVyQ2VsbCxcbiAgICBIY0NlbGwsXG4gICAgSGNGb290ZXJDZWxsLFxuXG4gICAgLy8gUm93IGRpcmVjdGlvbnNcbiAgICBIY0hlYWRlclJvdyxcbiAgICBIY1JvdyxcbiAgICBIY0Zvb3RlclJvdyxcblxuICAgIC8vIENlbGwgcmVzaXplclxuICAgIEhjQ2VsbFJlc2l6ZXJcbl07XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW0Nka1RhYmxlTW9kdWxlLCBDb21tb25Nb2R1bGVdLFxuICAgIGV4cG9ydHM6IEVYUE9SVEVEX0RFQ0xBUkFUSU9OUyxcbiAgICBkZWNsYXJhdGlvbnM6IEVYUE9SVEVEX0RFQ0xBUkFUSU9OU1xufSlcbmV4cG9ydCBjbGFzcyBUYWJsZU1vZHVsZSB7fVxuIl19