/**
 * @fileoverview added by tsickle
 * Generated from: lib/table/cell.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/* tslint:disable:directive-class-suffix directive-selector no-host-metadata-property no-input-rename*/
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive, ElementRef, Input } from '@angular/core';
import { CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef } from '@angular/cdk/table';
/**
 * Cell definition for the hc-table.
 * Captures the template of a column's data row cell as well as cell-specific properties.
 */
var HcCellDef = /** @class */ (function (_super) {
    tslib_1.__extends(HcCellDef, _super);
    function HcCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HcCellDef.decorators = [
        { type: Directive, args: [{
                    selector: '[hcCellDef]',
                    providers: [{ provide: CdkCellDef, useExisting: HcCellDef }]
                },] }
    ];
    return HcCellDef;
}(CdkCellDef));
export { HcCellDef };
/**
 * Header cell definition for the hc-table.
 * Captures the template of a column's header cell and as well as cell-specific properties.
 */
var HcHeaderCellDef = /** @class */ (function (_super) {
    tslib_1.__extends(HcHeaderCellDef, _super);
    function HcHeaderCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HcHeaderCellDef.decorators = [
        { type: Directive, args: [{
                    selector: '[hcHeaderCellDef]',
                    providers: [{ provide: CdkHeaderCellDef, useExisting: HcHeaderCellDef }]
                },] }
    ];
    return HcHeaderCellDef;
}(CdkHeaderCellDef));
export { HcHeaderCellDef };
/**
 * Footer cell definition for the hc-table.
 * Captures the template of a column's footer cell and as well as cell-specific properties.
 */
var HcFooterCellDef = /** @class */ (function (_super) {
    tslib_1.__extends(HcFooterCellDef, _super);
    function HcFooterCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HcFooterCellDef.decorators = [
        { type: Directive, args: [{
                    selector: '[hcFooterCellDef]',
                    providers: [{ provide: CdkFooterCellDef, useExisting: HcFooterCellDef }]
                },] }
    ];
    return HcFooterCellDef;
}(CdkFooterCellDef));
export { HcFooterCellDef };
/**
 * Column definition for the hc-table.
 * Defines a set of cells available for a table column.
 */
var HcColumnDef = /** @class */ (function (_super) {
    tslib_1.__extends(HcColumnDef, _super);
    function HcColumnDef() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._justify = 'left';
        return _this;
    }
    Object.defineProperty(HcColumnDef.prototype, "justify", {
        /** Sets the text alignment for this column: `left` (default), `center` or `right` */
        get: /**
         * Sets the text alignment for this column: `left` (default), `center` or `right`
         * @return {?}
         */
        function () {
            return this._justify;
        },
        set: /**
         * @param {?} justifyVal
         * @return {?}
         */
        function (justifyVal) {
            if (justifyVal === 'left' || justifyVal === 'center' || justifyVal === 'right') {
                this._justify = justifyVal;
            }
            else {
                throw Error('Unsupported table column alignment value: ' + justifyVal);
            }
        },
        enumerable: true,
        configurable: true
    });
    HcColumnDef.decorators = [
        { type: Directive, args: [{
                    selector: '[hcColumnDef]',
                    providers: [{ provide: CdkColumnDef, useExisting: HcColumnDef }]
                },] }
    ];
    HcColumnDef.propDecorators = {
        name: [{ type: Input, args: ['hcColumnDef',] }],
        justify: [{ type: Input }],
        sticky: [{ type: Input }],
        stickyEnd: [{ type: Input }]
    };
    return HcColumnDef;
}(CdkColumnDef));
export { HcColumnDef };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcColumnDef.prototype._justify;
    /**
     * Unique name for this column.
     * @type {?}
     */
    HcColumnDef.prototype.name;
    /**
     * Whether this column should be sticky positioned at the start of the row
     * @type {?}
     */
    HcColumnDef.prototype.sticky;
    /**
     * Whether this column should be sticky positioned on the end of the row
     * @type {?}
     */
    HcColumnDef.prototype.stickyEnd;
}
/**
 * Header cell template container that adds the right classes and role.
 */
var HcHeaderCell = /** @class */ (function (_super) {
    tslib_1.__extends(HcHeaderCell, _super);
    function HcHeaderCell(columnDef, elementRef) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        elementRef.nativeElement.classList.add("hc-column-" + columnDef.cssClassFriendlyName);
        elementRef.nativeElement.classList.add("hc-table-justify-" + columnDef.justify);
        return _this;
    }
    HcHeaderCell.decorators = [
        { type: Directive, args: [{
                    selector: 'hc-header-cell, th[hc-header-cell]',
                    host: {
                        class: 'hc-header-cell',
                        role: 'columnheader'
                    }
                },] }
    ];
    /** @nocollapse */
    HcHeaderCell.ctorParameters = function () { return [
        { type: HcColumnDef },
        { type: ElementRef }
    ]; };
    return HcHeaderCell;
}(CdkHeaderCell));
export { HcHeaderCell };
/**
 * Footer cell template container that adds the right classes and role.
 */
var HcFooterCell = /** @class */ (function (_super) {
    tslib_1.__extends(HcFooterCell, _super);
    function HcFooterCell(columnDef, elementRef) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        elementRef.nativeElement.classList.add("hc-column-" + columnDef.cssClassFriendlyName);
        elementRef.nativeElement.classList.add("hc-table-justify-" + columnDef.justify);
        return _this;
    }
    HcFooterCell.decorators = [
        { type: Directive, args: [{
                    selector: 'hc-footer-cell, td[hc-footer-cell]',
                    host: {
                        class: 'hc-footer-cell',
                        role: 'gridcell'
                    }
                },] }
    ];
    /** @nocollapse */
    HcFooterCell.ctorParameters = function () { return [
        { type: HcColumnDef },
        { type: ElementRef }
    ]; };
    return HcFooterCell;
}(CdkFooterCell));
export { HcFooterCell };
/**
 * Cell template container that adds the right classes and role.
 */
var HcCell = /** @class */ (function (_super) {
    tslib_1.__extends(HcCell, _super);
    function HcCell(columnDef, elementRef) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        elementRef.nativeElement.classList.add("hc-column-" + columnDef.cssClassFriendlyName);
        elementRef.nativeElement.classList.add("hc-table-justify-" + columnDef.justify);
        return _this;
    }
    HcCell.decorators = [
        { type: Directive, args: [{
                    selector: 'hc-cell, td[hc-cell]',
                    host: {
                        class: 'hc-cell',
                        role: 'gridcell'
                    }
                },] }
    ];
    /** @nocollapse */
    HcCell.ctorParameters = function () { return [
        { type: HcColumnDef },
        { type: ElementRef }
    ]; };
    return HcCell;
}(CdkCell));
export { HcCell };
//# sourceMappingURL=data:application/json;base64,