/**
 * @fileoverview added by tsickle
 * Generated from: lib/table/cell-resizer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/* Based on an example posted by Paolo Caleffi at: https://github.com/angular/material2/issues/8312 */
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, HostListener, Input, Output, ViewEncapsulation } from '@angular/core';
import { BindObservable } from './bind-observable/bind-observable';
import { untilDestroyed } from '../util';
import { fromEvent } from 'rxjs';
import { skip } from 'rxjs/operators';
var CellResizeEvent = /** @class */ (function () {
    function CellResizeEvent(width, directionLeft) {
        this.width = width;
        this.directionLeft = directionLeft;
    }
    return CellResizeEvent;
}());
export { CellResizeEvent };
if (false) {
    /** @type {?} */
    CellResizeEvent.prototype.width;
    /** @type {?} */
    CellResizeEvent.prototype.directionLeft;
}
var HcCellResizer = /** @class */ (function () {
    function HcCellResizer() {
        /**
         * Sets whether the resizer is active or not
         */
        this.disabled = false;
        this._directionModifier = 1;
        /**
         * Emits a `CellResizeEvent` when a cell has been resized
         */
        this.resized = new EventEmitter();
        this.isResizing = false;
        /**
         * Emits a boolean value of true while a cell is being resized
         */
        this.resizing = new EventEmitter();
    }
    Object.defineProperty(HcCellResizer.prototype, "width", {
        /**
         * Stores the width value for this resizer;
         * typically used with two-way binding on the cell's style.width property
         */
        get: /**
         * Stores the width value for this resizer;
         * typically used with two-way binding on the cell's style.width property
         * @return {?}
         */
        function () {
            return this._width;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value > 0) {
                this._width = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HcCellResizer.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isResizing$
            .pipe(
        // Skip default value
        skip(1), untilDestroyed(this))
            .subscribe((/**
         * @param {?} isResizing
         * @return {?}
         */
        function (isResizing) {
            _this.resizing.emit(isResizing);
            if (isResizing) {
                // We must use arrow function to avoid losing the context,
                //  we cannot pass directly the functions references
                _this.dragSubscription = fromEvent(window.document, 'mousemove')
                    .pipe(untilDestroyed(_this))
                    .subscribe((/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this._resizeColumn(event); }));
                _this.dragSubscription.add(fromEvent(window.document, 'mouseup')
                    .pipe(untilDestroyed(_this))
                    .subscribe((/**
                 * @return {?}
                 */
                function () { return _this._stopResizing(); })));
            }
            else {
                // When resize finishes, we emit one last "resized" event for which
                //  the corresponding "isResizing" value will be false.
                // This can be used to detect which is the final resizing event
                //  and ignore the others
                _this.resized.emit(new CellResizeEvent(_this.width, _this._directionModifier === -1));
                if (_this.dragSubscription) {
                    _this.dragSubscription.unsubscribe();
                }
            }
        }));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    HcCellResizer.prototype._resizeColumn = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var deltaX = event.screenX - this._mouseX;
        /** @type {?} */
        var newWidth = this.width + deltaX * this._directionModifier;
        this._mouseX = event.screenX;
        if (newWidth >= 0) {
            this.resized.emit(new CellResizeEvent(newWidth, this._directionModifier === -1));
        }
        // Prevent text selection while resizing
        event.preventDefault();
        event.stopPropagation();
    };
    // Same problems that mousemove listener have
    // Same problems that mousemove listener have
    /**
     * @private
     * @return {?}
     */
    HcCellResizer.prototype._stopResizing = 
    // Same problems that mousemove listener have
    /**
     * @private
     * @return {?}
     */
    function () {
        this.isResizing = false;
    };
    // isResizing can be set to true only when the component is not disabled
    // isResizing can be set to true only when the component is not disabled
    /**
     * @param {?} event
     * @return {?}
     */
    HcCellResizer.prototype._startResizing = 
    // isResizing can be set to true only when the component is not disabled
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.isResizing = !this.disabled;
        this._mouseX = event.screenX;
        if (((/** @type {?} */ (event.target))).className === 'hc-cell-resizer-left') {
            this._directionModifier = -1;
        }
        else {
            this._directionModifier = 1;
        }
        // Prevent text selection while resizing
        event.preventDefault();
        event.stopPropagation();
    };
    // Must be present for AOT compilation to work, even if empty
    // Otherwise 'ng build --prod' will optimize away any calls to ngOnDestroy,
    // even if the method is added by the untilDestroyed operator
    // Must be present for AOT compilation to work, even if empty
    // Otherwise 'ng build --prod' will optimize away any calls to ngOnDestroy,
    // even if the method is added by the untilDestroyed operator
    /**
     * @return {?}
     */
    HcCellResizer.prototype.ngOnDestroy = 
    // Must be present for AOT compilation to work, even if empty
    // Otherwise 'ng build --prod' will optimize away any calls to ngOnDestroy,
    // even if the method is added by the untilDestroyed operator
    /**
     * @return {?}
     */
    function () { };
    HcCellResizer.decorators = [
        { type: Component, args: [{
                    selector: 'hc-cell-resizer',
                    template: '<div class="hc-cell-resizer-left"></div><div class="hc-cell-resizer-right"></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    HcCellResizer.propDecorators = {
        disabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
        width: [{ type: Input }],
        resized: [{ type: Output }],
        resizing: [{ type: Output }],
        _startResizing: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
    };
    tslib_1.__decorate([
        BindObservable(),
        tslib_1.__metadata("design:type", Object)
    ], HcCellResizer.prototype, "isResizing", void 0);
    return HcCellResizer;
}());
export { HcCellResizer };
if (false) {
    /**
     * Sets whether the resizer is active or not
     * @type {?}
     */
    HcCellResizer.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    HcCellResizer.prototype._width;
    /**
     * @type {?}
     * @private
     */
    HcCellResizer.prototype._directionModifier;
    /**
     * @type {?}
     * @private
     */
    HcCellResizer.prototype._mouseX;
    /**
     * Emits a `CellResizeEvent` when a cell has been resized
     * @type {?}
     */
    HcCellResizer.prototype.resized;
    /**
     * @type {?}
     * @private
     */
    HcCellResizer.prototype.isResizing;
    /**
     * @type {?}
     * @private
     */
    HcCellResizer.prototype.isResizing$;
    /**
     * Emits a boolean value of true while a cell is being resized
     * @type {?}
     */
    HcCellResizer.prototype.resizing;
    /**
     * @type {?}
     * @private
     */
    HcCellResizer.prototype.dragSubscription;
}
//# sourceMappingURL=data:application/json;base64,