/**
 * @fileoverview added by tsickle
 * Generated from: lib/navbar/navbar-link/navbar-link.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';
/**
 * Primary navigation links
 */
var NavbarLinkComponent = /** @class */ (function () {
    function NavbarLinkComponent(el, ref) {
        this.el = el;
        this.ref = ref;
        /**
         * Sets the RouterLinkActive options to match the url exactly to set active state. *Default is false.*
         * See https://angular.io/api/router/RouterLinkActive#description
         */
        this.exact = false;
        this._hidden = false;
    }
    /** Disable visibility of component from view */
    /**
     * Disable visibility of component from view
     * @return {?}
     */
    NavbarLinkComponent.prototype.hide = /**
     * Disable visibility of component from view
     * @return {?}
     */
    function () {
        this._hidden = true;
        this.ref.detectChanges();
    };
    /** Enable visibility of component from view */
    /**
     * Enable visibility of component from view
     * @return {?}
     */
    NavbarLinkComponent.prototype.show = /**
     * Enable visibility of component from view
     * @return {?}
     */
    function () {
        this._hidden = false;
        this.ref.detectChanges();
    };
    /**
     * @return {?}
     */
    NavbarLinkComponent.prototype._getWidth = /**
     * @return {?}
     */
    function () {
        return this.el.nativeElement.scrollWidth;
    };
    NavbarLinkComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-navbar-link',
                    template: "<a *ngIf=\"!_hidden\" title=\"{{linkText}}\" [routerLink]=\"uri\" routerLinkActive=\"active\"\n   class=\"navbar-link\" [ngClass]=\"{ 'active': this.active === true, 'inactive': this.active === false }\"\n   [routerLinkActiveOptions]=\"{exact: exact}\">\n    {{linkText}}<ng-content></ng-content>\n</a>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    NavbarLinkComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    NavbarLinkComponent.propDecorators = {
        active: [{ type: Input }],
        uri: [{ type: Input }],
        linkText: [{ type: Input }],
        exact: [{ type: Input }]
    };
    return NavbarLinkComponent;
}());
export { NavbarLinkComponent };
if (false) {
    /**
     * (optional) forces active state *Default is `null`.*
     * @type {?}
     */
    NavbarLinkComponent.prototype.active;
    /**
     * RouterLink uri. See https://angular.io/api/router/RouterLink
     * @type {?}
     */
    NavbarLinkComponent.prototype.uri;
    /**
     * The text to display. This can also optionally be the contents within the element
     * @type {?}
     */
    NavbarLinkComponent.prototype.linkText;
    /**
     * Sets the RouterLinkActive options to match the url exactly to set active state. *Default is false.*
     * See https://angular.io/api/router/RouterLinkActive#description
     * @type {?}
     */
    NavbarLinkComponent.prototype.exact;
    /** @type {?} */
    NavbarLinkComponent.prototype._hidden;
    /**
     * @type {?}
     * @private
     */
    NavbarLinkComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NavbarLinkComponent.prototype.ref;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLWxpbmsuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL25hdmJhci9uYXZiYXItbGluay9uYXZiYXItbGluay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZSxLQUFLLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7QUFHOUc7SUEwQkksNkJBQW9CLEVBQWMsRUFBVSxHQUFzQjtRQUE5QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7Ozs7O1FBSmxFLFVBQUssR0FBWSxLQUFLLENBQUM7UUFFdkIsWUFBTyxHQUFZLEtBQUssQ0FBQztJQUU0QyxDQUFDO0lBRXRFLGdEQUFnRDs7Ozs7SUFDaEQsa0NBQUk7Ozs7SUFBSjtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELCtDQUErQzs7Ozs7SUFDL0Msa0NBQUk7Ozs7SUFBSjtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELHVDQUFTOzs7SUFBVDtRQUNJLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQzdDLENBQUM7O2dCQTFDSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsNFRBQTJDO29CQUMzQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtpQkFDeEM7Ozs7Z0JBUHFDLFVBQVU7Z0JBQXhDLGlCQUFpQjs7O3lCQVVwQixLQUFLO3NCQUlMLEtBQUs7MkJBSUwsS0FBSzt3QkFNTCxLQUFLOztJQXNCViwwQkFBQztDQUFBLEFBM0NELElBMkNDO1NBdENZLG1CQUFtQjs7Ozs7O0lBRTVCLHFDQUNpQjs7Ozs7SUFHakIsa0NBQ1k7Ozs7O0lBR1osdUNBQ2lCOzs7Ozs7SUFLakIsb0NBQ3VCOztJQUV2QixzQ0FBeUI7Ozs7O0lBRWIsaUNBQXNCOzs7OztJQUFFLGtDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBQcmltYXJ5IG5hdmlnYXRpb24gbGlua3MgKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaGMtbmF2YmFyLWxpbmsnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9uYXZiYXItbGluay5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBOYXZiYXJMaW5rQ29tcG9uZW50IHtcbiAgICAvKiogKG9wdGlvbmFsKSBmb3JjZXMgYWN0aXZlIHN0YXRlICpEZWZhdWx0IGlzIGBudWxsYC4qICovXG4gICAgQElucHV0KClcbiAgICBhY3RpdmU/OiBib29sZWFuO1xuXG4gICAgLyoqIFJvdXRlckxpbmsgdXJpLiBTZWUgaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9yb3V0ZXIvUm91dGVyTGluayAqL1xuICAgIEBJbnB1dCgpXG4gICAgdXJpOiBzdHJpbmc7XG5cbiAgICAvKiogVGhlIHRleHQgdG8gZGlzcGxheS4gVGhpcyBjYW4gYWxzbyBvcHRpb25hbGx5IGJlIHRoZSBjb250ZW50cyB3aXRoaW4gdGhlIGVsZW1lbnQgKi9cbiAgICBASW5wdXQoKVxuICAgIGxpbmtUZXh0OiBzdHJpbmc7XG5cbiAgICAvKiogU2V0cyB0aGUgUm91dGVyTGlua0FjdGl2ZSBvcHRpb25zIHRvIG1hdGNoIHRoZSB1cmwgZXhhY3RseSB0byBzZXQgYWN0aXZlIHN0YXRlLiAqRGVmYXVsdCBpcyBmYWxzZS4qXG4gICAgICogU2VlIGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlckxpbmtBY3RpdmUjZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGV4YWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBfaGlkZGVuOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgICAvKiogRGlzYWJsZSB2aXNpYmlsaXR5IG9mIGNvbXBvbmVudCBmcm9tIHZpZXcgKi9cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLl9oaWRkZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLnJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgLyoqIEVuYWJsZSB2aXNpYmlsaXR5IG9mIGNvbXBvbmVudCBmcm9tIHZpZXcgKi9cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLl9oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIF9nZXRXaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aDtcbiAgICB9XG59XG4iXX0=