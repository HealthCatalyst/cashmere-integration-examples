/**
 * @fileoverview added by tsickle
 * Generated from: lib/typeform-survey/typeform-survey.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewEncapsulation } from '@angular/core';
/**
 * @return {?}
 */
export function throwErrorForMissingSurveyUri() {
    throw Error("SurveyUri must be specified on element hc-typeform-survey");
}
var TypeformWindow = /** @class */ (function (_super) {
    tslib_1.__extends(TypeformWindow, _super);
    function TypeformWindow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TypeformWindow;
}(Window));
export { TypeformWindow };
if (false) {
    /** @type {?} */
    TypeformWindow.prototype.typeformEmbed;
}
var TypeformSurveyComponent = /** @class */ (function () {
    function TypeformSurveyComponent() {
        this._id = 'typef_orm_share';
    }
    Object.defineProperty(TypeformSurveyComponent.prototype, "surveyUri", {
        get: /**
         * @return {?}
         */
        function () {
            return this._surveyUri;
        },
        /**
         * TypeForm survey URI you want to use. Example: https://somecompany.typeform.com/to/surveyId?parameter=parametervalue
         */
        set: /**
         * TypeForm survey URI you want to use. Example: https://somecompany.typeform.com/to/surveyId?parameter=parametervalue
         * @param {?} uri
         * @return {?}
         */
        function (uri) {
            this._surveyUri = uri;
            this.refreshFullUri();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypeformSurveyComponent.prototype, "appVersion", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appVersion;
        },
        /**
         * App version which will be passed to the survey in a hidden field. Ensures you know what version the feedback is referencing.
         */
        set: /**
         * App version which will be passed to the survey in a hidden field. Ensures you know what version the feedback is referencing.
         * @param {?} version
         * @return {?}
         */
        function (version) {
            this._appVersion = version;
            this.refreshFullUri();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens the survey specified in the surveyUri
     */
    /**
     * Opens the survey specified in the surveyUri
     * @return {?}
     */
    TypeformSurveyComponent.prototype.open = /**
     * Opens the survey specified in the surveyUri
     * @return {?}
     */
    function () {
        if (!document.getElementById(this._id)) {
            this.getScripts();
        }
        else {
            ((/** @type {?} */ (window))).typeformEmbed.makePopup(this._fullUri, {
                mode: 'drawer_right',
                autoOpen: true,
                opacity: 100,
                autoClose: 0,
                hideScrollbars: true
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    TypeformSurveyComponent.prototype.refreshFullUri = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var varChar = this.surveyUri.includes('?') ? '&' : '?';
        this._fullUri = this.appVersion ? this.surveyUri + varChar + 'app_version=' + this.appVersion : this.surveyUri;
    };
    /**
     * @private
     * @return {?}
     */
    TypeformSurveyComponent.prototype.getScripts = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.surveyUri) {
            throwErrorForMissingSurveyUri();
        }
        /* this is directly from the embed
                   markup given from TypeForm */
        /** @type {?} */
        var embedScript;
        /** @type {?} */
        var firstScript;
        if (!document.getElementById(this._id)) {
            // create new embed script with typeform cdn source
            embedScript = document.createElement('script');
            embedScript.id = this._id;
            embedScript.src = "https://embed.typeform.com/embed.js";
            // insert embed script before other js scripts
            firstScript = document.getElementsByTagName.call(document, 'script')[0];
            if (firstScript.parentNode) {
                firstScript.parentNode.insertBefore(embedScript, firstScript);
            }
        }
    };
    TypeformSurveyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-typeform-survey',
                    template: "\n        <a\n            class=\"typeform-share link\"\n            [href]=\"_fullUri\"\n            data-mode=\"drawer_right\"\n            data-auto-open=\"true\"\n            data-submit-close-delay=\"0\"\n            target=\"_blank\"\n            rel=\"noopener\"\n        ></a>\n    ",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    TypeformSurveyComponent.propDecorators = {
        surveyUri: [{ type: Input }],
        appVersion: [{ type: Input }]
    };
    return TypeformSurveyComponent;
}());
export { TypeformSurveyComponent };
if (false) {
    /** @type {?} */
    TypeformSurveyComponent.prototype._fullUri;
    /**
     * @type {?}
     * @private
     */
    TypeformSurveyComponent.prototype._surveyUri;
    /**
     * @type {?}
     * @private
     */
    TypeformSurveyComponent.prototype._appVersion;
    /**
     * @type {?}
     * @private
     */
    TypeformSurveyComponent.prototype._id;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWZvcm0tc3VydmV5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi90eXBlZm9ybS1zdXJ2ZXkvdHlwZWZvcm0tc3VydmV5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7OztBQUVsRSxNQUFNLFVBQVUsNkJBQTZCO0lBQ3pDLE1BQU0sS0FBSyxDQUFDLDJEQUEyRCxDQUFDLENBQUM7QUFDN0UsQ0FBQztBQUVEO0lBQW9DLDBDQUFNO0lBQTFDOztJQUVBLENBQUM7SUFBRCxxQkFBQztBQUFELENBQUMsQUFGRCxDQUFvQyxNQUFNLEdBRXpDOzs7O0lBREcsdUNBQTBCOztBQUc5QjtJQUFBO1FBd0NZLFFBQUcsR0FBVyxpQkFBaUIsQ0FBQztJQTRDNUMsQ0FBQztJQWhFRyxzQkFBb0IsOENBQVM7Ozs7UUFJN0I7WUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDM0IsQ0FBQztRQVREOztXQUVHOzs7Ozs7UUFDSCxVQUE4QixHQUFXO1lBQ3JDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUMxQixDQUFDOzs7T0FBQTtJQU9ELHNCQUFvQiwrQ0FBVTs7OztRQUk5QjtZQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QixDQUFDO1FBVEQ7O1dBRUc7Ozs7OztRQUNILFVBQStCLE9BQWU7WUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7WUFDM0IsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzFCLENBQUM7OztPQUFBO0lBU0Q7O09BRUc7Ozs7O0lBQ0ksc0NBQUk7Ozs7SUFBWDtRQUNJLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7YUFBTTtZQUNILENBQUMsbUJBQWdCLE1BQU0sRUFBQSxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUM1RCxJQUFJLEVBQUUsY0FBYztnQkFDcEIsUUFBUSxFQUFFLElBQUk7Z0JBQ2QsT0FBTyxFQUFFLEdBQUc7Z0JBQ1osU0FBUyxFQUFFLENBQUM7Z0JBQ1osY0FBYyxFQUFFLElBQUk7YUFDdkIsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7OztJQUVPLGdEQUFjOzs7O0lBQXRCOztZQUNRLE9BQU8sR0FBVyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHO1FBQzlELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDbkgsQ0FBQzs7Ozs7SUFFTyw0Q0FBVTs7OztJQUFsQjtRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLDZCQUE2QixFQUFFLENBQUM7U0FDbkM7Ozs7WUFHRyxXQUFXOztZQUFFLFdBQVc7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BDLG1EQUFtRDtZQUNuRCxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvQyxXQUFXLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDMUIsV0FBVyxDQUFDLEdBQUcsR0FBRyxxQ0FBcUMsQ0FBQztZQUV4RCw4Q0FBOEM7WUFDOUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hFLElBQUksV0FBVyxDQUFDLFVBQVUsRUFBRTtnQkFDeEIsV0FBVyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO2FBQ2pFO1NBQ0o7SUFDTCxDQUFDOztnQkFuRkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFFBQVEsRUFBRSxvU0FVVDtvQkFFRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtpQkFDeEM7Ozs0QkFLSSxLQUFLOzZCQVVMLEtBQUs7O0lBc0RWLDhCQUFDO0NBQUEsQUFwRkQsSUFvRkM7U0FwRVksdUJBQXVCOzs7SUFxQmhDLDJDQUF3Qjs7Ozs7SUFDeEIsNkNBQTJCOzs7OztJQUMzQiw4Q0FBNEI7Ozs7O0lBQzVCLHNDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dFcnJvckZvck1pc3NpbmdTdXJ2ZXlVcmkoKSB7XG4gICAgdGhyb3cgRXJyb3IoYFN1cnZleVVyaSBtdXN0IGJlIHNwZWNpZmllZCBvbiBlbGVtZW50IGhjLXR5cGVmb3JtLXN1cnZleWApO1xufVxuXG5leHBvcnQgY2xhc3MgVHlwZWZvcm1XaW5kb3cgZXh0ZW5kcyBXaW5kb3cge1xuICAgIHB1YmxpYyB0eXBlZm9ybUVtYmVkOiBhbnk7XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaGMtdHlwZWZvcm0tc3VydmV5JyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3M9XCJ0eXBlZm9ybS1zaGFyZSBsaW5rXCJcbiAgICAgICAgICAgIFtocmVmXT1cIl9mdWxsVXJpXCJcbiAgICAgICAgICAgIGRhdGEtbW9kZT1cImRyYXdlcl9yaWdodFwiXG4gICAgICAgICAgICBkYXRhLWF1dG8tb3Blbj1cInRydWVcIlxuICAgICAgICAgICAgZGF0YS1zdWJtaXQtY2xvc2UtZGVsYXk9XCIwXCJcbiAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICByZWw9XCJub29wZW5lclwiXG4gICAgICAgID48L2E+XG4gICAgYCxcbiAgICBzdHlsZXM6IFtdLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgVHlwZWZvcm1TdXJ2ZXlDb21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIFR5cGVGb3JtIHN1cnZleSBVUkkgeW91IHdhbnQgdG8gdXNlLiBFeGFtcGxlOiBodHRwczovL3NvbWVjb21wYW55LnR5cGVmb3JtLmNvbS90by9zdXJ2ZXlJZD9wYXJhbWV0ZXI9cGFyYW1ldGVydmFsdWVcbiAgICAgKi9cbiAgICBASW5wdXQoKSBwdWJsaWMgc2V0IHN1cnZleVVyaSh1cmk6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9zdXJ2ZXlVcmkgPSB1cmk7XG4gICAgICAgIHRoaXMucmVmcmVzaEZ1bGxVcmkoKTtcbiAgICB9XG4gICAgcHVibGljIGdldCBzdXJ2ZXlVcmkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cnZleVVyaTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwIHZlcnNpb24gd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gdGhlIHN1cnZleSBpbiBhIGhpZGRlbiBmaWVsZC4gRW5zdXJlcyB5b3Uga25vdyB3aGF0IHZlcnNpb24gdGhlIGZlZWRiYWNrIGlzIHJlZmVyZW5jaW5nLlxuICAgICAqL1xuICAgIEBJbnB1dCgpIHB1YmxpYyBzZXQgYXBwVmVyc2lvbih2ZXJzaW9uOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fYXBwVmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMucmVmcmVzaEZ1bGxVcmkoKTtcbiAgICB9XG4gICAgcHVibGljIGdldCBhcHBWZXJzaW9uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBWZXJzaW9uO1xuICAgIH1cbiAgICBwdWJsaWMgX2Z1bGxVcmk6IHN0cmluZztcbiAgICBwcml2YXRlIF9zdXJ2ZXlVcmk6IHN0cmluZztcbiAgICBwcml2YXRlIF9hcHBWZXJzaW9uOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfaWQ6IHN0cmluZyA9ICd0eXBlZl9vcm1fc2hhcmUnO1xuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHN1cnZleSBzcGVjaWZpZWQgaW4gdGhlIHN1cnZleVVyaVxuICAgICAqL1xuICAgIHB1YmxpYyBvcGVuKCkge1xuICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuX2lkKSkge1xuICAgICAgICAgICAgdGhpcy5nZXRTY3JpcHRzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoPFR5cGVmb3JtV2luZG93PndpbmRvdykudHlwZWZvcm1FbWJlZC5tYWtlUG9wdXAodGhpcy5fZnVsbFVyaSwge1xuICAgICAgICAgICAgICAgIG1vZGU6ICdkcmF3ZXJfcmlnaHQnLFxuICAgICAgICAgICAgICAgIGF1dG9PcGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEwMCxcbiAgICAgICAgICAgICAgICBhdXRvQ2xvc2U6IDAsXG4gICAgICAgICAgICAgICAgaGlkZVNjcm9sbGJhcnM6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWZyZXNoRnVsbFVyaSgpIHtcbiAgICAgICAgbGV0IHZhckNoYXI6IHN0cmluZyA9IHRoaXMuc3VydmV5VXJpLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPyc7XG4gICAgICAgIHRoaXMuX2Z1bGxVcmkgPSB0aGlzLmFwcFZlcnNpb24gPyB0aGlzLnN1cnZleVVyaSArIHZhckNoYXIgKyAnYXBwX3ZlcnNpb249JyArIHRoaXMuYXBwVmVyc2lvbiA6IHRoaXMuc3VydmV5VXJpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0U2NyaXB0cygpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnN1cnZleVVyaSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvckZvck1pc3NpbmdTdXJ2ZXlVcmkoKTtcbiAgICAgICAgfVxuICAgICAgICAvKiB0aGlzIGlzIGRpcmVjdGx5IGZyb20gdGhlIGVtYmVkXG4gICAgICAgICAgIG1hcmt1cCBnaXZlbiBmcm9tIFR5cGVGb3JtICovXG4gICAgICAgIGxldCBlbWJlZFNjcmlwdCwgZmlyc3RTY3JpcHQ7XG4gICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5faWQpKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgbmV3IGVtYmVkIHNjcmlwdCB3aXRoIHR5cGVmb3JtIGNkbiBzb3VyY2VcbiAgICAgICAgICAgIGVtYmVkU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBlbWJlZFNjcmlwdC5pZCA9IHRoaXMuX2lkO1xuICAgICAgICAgICAgZW1iZWRTY3JpcHQuc3JjID0gYGh0dHBzOi8vZW1iZWQudHlwZWZvcm0uY29tL2VtYmVkLmpzYDtcblxuICAgICAgICAgICAgLy8gaW5zZXJ0IGVtYmVkIHNjcmlwdCBiZWZvcmUgb3RoZXIganMgc2NyaXB0c1xuICAgICAgICAgICAgZmlyc3RTY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZS5jYWxsKGRvY3VtZW50LCAnc2NyaXB0JylbMF07XG4gICAgICAgICAgICBpZiAoZmlyc3RTY3JpcHQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIGZpcnN0U2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVtYmVkU2NyaXB0LCBmaXJzdFNjcmlwdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=