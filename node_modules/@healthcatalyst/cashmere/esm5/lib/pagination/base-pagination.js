/**
 * @fileoverview added by tsickle
 * Generated from: lib/pagination/base-pagination.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output, Component } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { Initializable } from '../shared/initializable';
/**
 * Base Pagination class for shared functionality
 *
 */
var BasePaginationComponent = /** @class */ (function (_super) {
    tslib_1.__extends(BasePaginationComponent, _super);
    function BasePaginationComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._length = 0;
        _this._pageNumber = 1;
        _this._pageSize = BasePaginationComponent._DEFAULT_PAGE_SIZE;
        /**
         * Event emitted when the paginator changes the page size or page index.
         */
        _this.page = new EventEmitter();
        /**
         * Emits the new page number when the page number changes.
         */
        _this.pageNumberChange = new EventEmitter();
        /**
         * Emits the new page size when the page size changes.
         */
        _this.pageSizeChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(BasePaginationComponent.prototype, "length", {
        /**
         * The total number of items to be paged through
         */
        get: /**
         * The total number of items to be paged through
         * @return {?}
         */
        function () {
            return this._length;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._length = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasePaginationComponent.prototype, "pageNumber", {
        /** The currently displayed page. *Defaults to 1.* */
        get: /**
         * The currently displayed page. *Defaults to 1.*
         * @return {?}
         */
        function () {
            return this._pageNumber;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            /** @type {?} */
            var prevPageNumber = this._pageNumber;
            this._pageNumber = value;
            /** @type {?} */
            var sanitizedValue = this._sanitizePageNumber(value);
            if (sanitizedValue !== value) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return (_this.pageNumber = sanitizedValue); }));
            }
            else {
                this.pageNumberChange.emit(this.pageNumber);
                this._emitPageEvent(prevPageNumber);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasePaginationComponent.prototype, "pageSize", {
        /** Number of items to display on a page. *Defaults to 20.* */
        get: /**
         * Number of items to display on a page. *Defaults to 20.*
         * @return {?}
         */
        function () {
            return this._pageSize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pageSize = coerceNumberProperty(value);
            this._pageSizeUpdated();
            this.pageSizeChange.emit(this.pageSize);
            this._emitPageEvent(this.pageNumber);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BasePaginationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._markInitialized();
    };
    Object.defineProperty(BasePaginationComponent.prototype, "totalPages", {
        /**
         * The computed total number of pages
         */
        get: /**
         * The computed total number of pages
         * @return {?}
         */
        function () {
            return Math.ceil(this._length / this._pageSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasePaginationComponent.prototype, "_isFirstPage", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pageNumber === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasePaginationComponent.prototype, "_isLastPage", {
        get: /**
         * @return {?}
         */
        function () {
            return !!(this.totalPages && this._pageNumber === this.totalPages);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Changes the page size so that the first item displayed on the page will still be
     * displayed using the new page size.
     *
     * For example, if the page size is 10 and on the second page (items indexed 11-20) then
     * switching so that the page size is 5 will set the third page as the current page so
     * that the 11th item will still be displayed.
     */
    /**
     * Changes the page size so that the first item displayed on the page will still be
     * displayed using the new page size.
     *
     * For example, if the page size is 10 and on the second page (items indexed 11-20) then
     * switching so that the page size is 5 will set the third page as the current page so
     * that the 11th item will still be displayed.
     * @param {?} pageSize
     * @return {?}
     */
    BasePaginationComponent.prototype._changePageSize = /**
     * Changes the page size so that the first item displayed on the page will still be
     * displayed using the new page size.
     *
     * For example, if the page size is 10 and on the second page (items indexed 11-20) then
     * switching so that the page size is 5 will set the third page as the current page so
     * that the 11th item will still be displayed.
     * @param {?} pageSize
     * @return {?}
     */
    function (pageSize) {
        // Current page needs to be updated to reflect the new page size. Navigate to the page
        // containing the previous page's first item.
        /** @type {?} */
        var startIndex = (this.pageNumber - 1) * this.pageSize;
        this.pageSize = pageSize;
        this.pageNumber = Math.ceil(startIndex / pageSize) + 1;
    };
    /**
     * @return {?}
     */
    BasePaginationComponent.prototype._pageSizeUpdated = /**
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @param {?} pageNumber
     * @return {?}
     */
    BasePaginationComponent.prototype._sanitizePageNumber = /**
     * @private
     * @param {?} pageNumber
     * @return {?}
     */
    function (pageNumber) {
        /** @type {?} */
        var number = Math.max(coerceNumberProperty(pageNumber), 1);
        return number > this.totalPages ? this.totalPages : number;
    };
    /**
     * @private
     * @param {?} previousPageNumber
     * @return {?}
     */
    BasePaginationComponent.prototype._emitPageEvent = /**
     * @private
     * @param {?} previousPageNumber
     * @return {?}
     */
    function (previousPageNumber) {
        this.page.emit({
            previousPageNumber: previousPageNumber,
            pageNumber: this.pageNumber,
            pageSize: this.pageSize,
            length: this.length
        });
    };
    BasePaginationComponent._DEFAULT_PAGE_SIZE = 20;
    BasePaginationComponent.decorators = [
        { type: Component, args: [{
                    template: ''
                }] }
    ];
    BasePaginationComponent.propDecorators = {
        length: [{ type: Input }],
        pageNumber: [{ type: Input }],
        pageSize: [{ type: Input }],
        page: [{ type: Output }],
        pageNumberChange: [{ type: Output }],
        pageSizeChange: [{ type: Output }]
    };
    return BasePaginationComponent;
}(Initializable));
export { BasePaginationComponent };
if (false) {
    /** @type {?} */
    BasePaginationComponent._DEFAULT_PAGE_SIZE;
    /**
     * @type {?}
     * @private
     */
    BasePaginationComponent.prototype._length;
    /**
     * @type {?}
     * @private
     */
    BasePaginationComponent.prototype._pageNumber;
    /**
     * @type {?}
     * @private
     */
    BasePaginationComponent.prototype._pageSize;
    /**
     * Event emitted when the paginator changes the page size or page index.
     * @type {?}
     */
    BasePaginationComponent.prototype.page;
    /**
     * Emits the new page number when the page number changes.
     * @type {?}
     */
    BasePaginationComponent.prototype.pageNumberChange;
    /**
     * Emits the new page size when the page size changes.
     * @type {?}
     */
    BasePaginationComponent.prototype.pageSizeChange;
}
//# sourceMappingURL=data:application/json;base64,