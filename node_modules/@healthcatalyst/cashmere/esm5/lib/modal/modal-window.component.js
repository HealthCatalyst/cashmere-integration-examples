/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal/modal-window.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, ElementRef, HostBinding, HostListener, Input, ViewEncapsulation } from '@angular/core';
import { ActiveModal } from './active-modal';
var ModalWindowComponent = /** @class */ (function () {
    function ModalWindowComponent(activeModal, el) {
        this.activeModal = activeModal;
        this.el = el;
        this._ignoreOverlayClick = false;
        this._size = 'auto';
    }
    /**
     * @return {?}
     */
    ModalWindowComponent.prototype._fadeInOut = /**
     * @return {?}
     */
    function () {
        return state;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ModalWindowComponent.prototype._overlayClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var e_1, _a;
        var _this = this;
        /** @type {?} */
        var modalContentNotPresent = true;
        /** @type {?} */
        var path = this._eventPath(event);
        /** @type {?} */
        var modalWindowTargetIncluded = path.findIndex((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p === _this.el.nativeElement; })) > -1;
        /** @type {?} */
        var classList = path.map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p.classList; }));
        try {
            for (var classList_1 = tslib_1.__values(classList), classList_1_1 = classList_1.next(); !classList_1_1.done; classList_1_1 = classList_1.next()) {
                var cl = classList_1_1.value;
                if (cl) {
                    if (cl.contains('hc-modal-content')) {
                        modalContentNotPresent = false;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (classList_1_1 && !classList_1_1.done && (_a = classList_1.return)) _a.call(classList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        /* The hc-modal has 100% height (although not completely visible).
            To enable closing the modal while clicking above or below the modal (in
            addition to the sides) this function will check to see if the click
            event includes:
                1. This window element
                2. Not the hc-modal-content and
                3. the overlay click option is disabled. */
        if (!this._ignoreOverlayClick && modalContentNotPresent && modalWindowTargetIncluded) {
            this.activeModal.dismiss();
        }
    };
    // Serves as a polyfill for Event.composedPath() or Event.Path
    // Serves as a polyfill for Event.composedPath() or Event.Path
    /**
     * @param {?} evt
     * @return {?}
     */
    ModalWindowComponent.prototype._eventPath = 
    // Serves as a polyfill for Event.composedPath() or Event.Path
    /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var path = (evt.composedPath && evt.composedPath()) || evt.path;
        /** @type {?} */
        var target = evt.target;
        if (path != null) {
            // Safari doesn't include Window, but it should.
            return path.indexOf(window) < 0 ? path.concat(window) : path;
        }
        if (target === window) {
            return [window];
        }
        /**
         * @param {?} node
         * @param {?=} memo
         * @return {?}
         */
        function _getParents(node, memo) {
            memo = memo || [];
            /** @type {?} */
            var parentNode = node.parentNode;
            if (!parentNode) {
                return memo;
            }
            else {
                return _getParents(parentNode, memo.concat(parentNode));
            }
        }
        return [target].concat(_getParents(target), window);
    };
    ModalWindowComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-modal-window',
                    template: "\n        <div [class]=\"'hc-modal hc-modal-' + _size\"><ng-content></ng-content></div>\n    ",
                    encapsulation: ViewEncapsulation.None,
                    // tslint:disable-next-line: no-host-metadata-property
                    host: { class: 'hc-modal-window' },
                    animations: [
                        trigger('fadeInOut', [
                            state('in', style({ opacity: 1 })),
                            transition('void <=> *', [
                                style({
                                    opacity: 0
                                }),
                                animate('0.2s ease-in-out')
                            ])
                        ])
                    ],
                    styles: [".hc-modal-window{-webkit-box-align:center;align-items:center;bottom:0;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;left:0;position:fixed;right:0;top:0}.hc-modal{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;height:calc(100% - 50px);-webkit-box-pack:center;justify-content:center;max-height:calc(100% - 50px);min-height:135px}.hc-modal-auto{width:auto}.hc-modal-sm{width:300px}.hc-modal-md{width:500px}.hc-modal-lg{width:800px}.hc-modal-xl{width:992px}"]
                }] }
    ];
    /** @nocollapse */
    ModalWindowComponent.ctorParameters = function () { return [
        { type: ActiveModal },
        { type: ElementRef }
    ]; };
    ModalWindowComponent.propDecorators = {
        _ignoreOverlayClick: [{ type: Input }],
        _size: [{ type: Input }],
        _fadeInOut: [{ type: HostBinding, args: ['@fadeInOut',] }],
        _overlayClick: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
    };
    return ModalWindowComponent;
}());
export { ModalWindowComponent };
if (false) {
    /** @type {?} */
    ModalWindowComponent.prototype._ignoreOverlayClick;
    /** @type {?} */
    ModalWindowComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    ModalWindowComponent.prototype.activeModal;
    /**
     * @type {?}
     * @private
     */
    ModalWindowComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtd2luZG93LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9tb2RhbC9tb2RhbC13aW5kb3cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFFL0UsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekcsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTNDO0lBMkJJLDhCQUFvQixXQUF3QixFQUFVLEVBQWM7UUFBaEQsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBSnBFLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUU1QixVQUFLLEdBQWMsTUFBTSxDQUFDO0lBRTZDLENBQUM7Ozs7SUFHeEUseUNBQVU7OztJQURWO1FBRUksT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7Ozs7SUFHRCw0Q0FBYTs7OztJQURiLFVBQ2MsS0FBVTs7UUFEeEIsaUJBd0JDOztZQXRCTyxzQkFBc0IsR0FBRyxJQUFJOztZQUM3QixJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7O1lBQzdCLHlCQUF5QixHQUFHLElBQUksQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQTNCLENBQTJCLEVBQUMsR0FBRyxDQUFDLENBQUM7O1lBQ2pGLFNBQVMsR0FBaUMsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxP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ZXJ9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtNb2RhbFNpemV9IGZyb20gJy4vbW9kYWwtb3B0aW9ucyc7XG5pbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9ufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWN0aXZlTW9kYWx9IGZyb20gJy4vYWN0aXZlLW1vZGFsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdoYy1tb2RhbC13aW5kb3cnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXYgW2NsYXNzXT1cIidoYy1tb2RhbCBoYy1tb2RhbC0nICsgX3NpemVcIj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9kaXY+XG4gICAgYCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taG9zdC1tZXRhZGF0YS1wcm9wZXJ0eVxuICAgIGhvc3Q6IHtjbGFzczogJ2hjLW1vZGFsLXdpbmRvdyd9LFxuICAgIHN0eWxlVXJsczogWycuL21vZGFsLXdpbmRvdy5jb21wb25lbnQuc2NzcyddLFxuICAgIGFuaW1hdGlvbnM6IFtcbiAgICAgICAgdHJpZ2dlcignZmFkZUluT3V0JywgW1xuICAgICAgICAgICAgc3RhdGUoJ2luJywgc3R5bGUoe29wYWNpdHk6IDF9KSksXG4gICAgICAgICAgICB0cmFuc2l0aW9uKCd2b2lkIDw9PiAqJywgW1xuICAgICAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGFuaW1hdGUoJzAuMnMgZWFzZS1pbi1vdXQnKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIE1vZGFsV2luZG93Q29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIF9pZ25vcmVPdmVybGF5Q2xpY2sgPSBmYWxzZTtcbiAgICBASW5wdXQoKVxuICAgIF9zaXplOiBNb2RhbFNpemUgPSAnYXV0byc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGl2ZU1vZGFsOiBBY3RpdmVNb2RhbCwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZikge31cblxuICAgIEBIb3N0QmluZGluZygnQGZhZGVJbk91dCcpXG4gICAgX2ZhZGVJbk91dCgpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bicsIFsnJGV2ZW50J10pXG4gICAgX292ZXJsYXlDbGljayhldmVudDogYW55KSB7XG4gICAgICAgIGxldCBtb2RhbENvbnRlbnROb3RQcmVzZW50ID0gdHJ1ZTtcbiAgICAgICAgbGV0IHBhdGggPSB0aGlzLl9ldmVudFBhdGgoZXZlbnQpO1xuICAgICAgICBsZXQgbW9kYWxXaW5kb3dUYXJnZXRJbmNsdWRlZCA9IHBhdGguZmluZEluZGV4KHAgPT4gcCA9PT0gdGhpcy5lbC5uYXRpdmVFbGVtZW50KSA+IC0xO1xuICAgICAgICBsZXQgY2xhc3NMaXN0OiAoRE9NVG9rZW5MaXN0IHwgdW5kZWZpbmVkKVtdID0gcGF0aC5tYXAocCA9PiBwLmNsYXNzTGlzdCk7XG4gICAgICAgIGZvciAobGV0IGNsIG9mIGNsYXNzTGlzdCkge1xuICAgICAgICAgICAgaWYgKGNsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNsLmNvbnRhaW5zKCdoYy1tb2RhbC1jb250ZW50JykpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxDb250ZW50Tm90UHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFRoZSBoYy1tb2RhbCBoYXMgMTAwJSBoZWlnaHQgKGFsdGhvdWdoIG5vdCBjb21wbGV0ZWx5IHZpc2libGUpLlxuICAgICAgICAgICAgVG8gZW5hYmxlIGNsb3NpbmcgdGhlIG1vZGFsIHdoaWxlIGNsaWNraW5nIGFib3ZlIG9yIGJlbG93IHRoZSBtb2RhbCAoaW5cbiAgICAgICAgICAgIGFkZGl0aW9uIHRvIHRoZSBzaWRlcykgdGhpcyBmdW5jdGlvbiB3aWxsIGNoZWNrIHRvIHNlZSBpZiB0aGUgY2xpY2tcbiAgICAgICAgICAgIGV2ZW50IGluY2x1ZGVzOlxuICAgICAgICAgICAgICAgIDEuIFRoaXMgd2luZG93IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAyLiBOb3QgdGhlIGhjLW1vZGFsLWNvbnRlbnQgYW5kXG4gICAgICAgICAgICAgICAgMy4gdGhlIG92ZXJsYXkgY2xpY2sgb3B0aW9uIGlzIGRpc2FibGVkLiAqL1xuICAgICAgICBpZiAoIXRoaXMuX2lnbm9yZU92ZXJsYXlDbGljayAmJiBtb2RhbENvbnRlbnROb3RQcmVzZW50ICYmIG1vZGFsV2luZG93VGFyZ2V0SW5jbHVkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlTW9kYWwuZGlzbWlzcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2VydmVzIGFzIGEgcG9seWZpbGwgZm9yIEV2ZW50LmNvbXBvc2VkUGF0aCgpIG9yIEV2ZW50LlBhdGhcbiAgICBfZXZlbnRQYXRoKGV2dDogYW55KSB7XG4gICAgICAgIGxldCBwYXRoID0gKGV2dC5jb21wb3NlZFBhdGggJiYgZXZ0LmNvbXBvc2VkUGF0aCgpKSB8fCBldnQucGF0aCxcbiAgICAgICAgICAgIHRhcmdldCA9IGV2dC50YXJnZXQ7XG5cbiAgICAgICAgaWYgKHBhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gU2FmYXJpIGRvZXNuJ3QgaW5jbHVkZSBXaW5kb3csIGJ1dCBpdCBzaG91bGQuXG4gICAgICAgICAgICByZXR1cm4gcGF0aC5pbmRleE9mKHdpbmRvdykgPCAwID8gcGF0aC5jb25jYXQod2luZG93KSA6IHBhdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0ID09PSB3aW5kb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBbd2luZG93XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRQYXJlbnRzKG5vZGUsIG1lbW8/KSB7XG4gICAgICAgICAgICBtZW1vID0gbWVtbyB8fCBbXTtcbiAgICAgICAgICAgIGxldCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuXG4gICAgICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9nZXRQYXJlbnRzKHBhcmVudE5vZGUsIG1lbW8uY29uY2F0KHBhcmVudE5vZGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbdGFyZ2V0XS5jb25jYXQoX2dldFBhcmVudHModGFyZ2V0KSwgd2luZG93KTtcbiAgICB9XG59XG4iXX0=