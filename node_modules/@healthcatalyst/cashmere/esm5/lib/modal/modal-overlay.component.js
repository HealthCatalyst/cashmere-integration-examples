/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal/modal-overlay.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, HostListener, Input, ViewEncapsulation } from '@angular/core';
import { ActiveModal } from './active-modal';
import { animate, state, style, transition, trigger } from '@angular/animations';
var ModalOverlayComponent = /** @class */ (function () {
    function ModalOverlayComponent(activeModal) {
        this.activeModal = activeModal;
        this._ignoreEscapeKey = false;
    }
    /**
     * @return {?}
     */
    ModalOverlayComponent.prototype._fadeInOut = /**
     * @return {?}
     */
    function () {
        return state;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ModalOverlayComponent.prototype._escapeKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this._ignoreEscapeKey) {
            this.activeModal.dismiss();
        }
    };
    ModalOverlayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-modal-overlay',
                    template: '',
                    encapsulation: ViewEncapsulation.None,
                    // tslint:disable-next-line: no-host-metadata-property
                    host: { class: 'hc-modal-overlay' },
                    animations: [
                        trigger('fadeInOut', [
                            state('in', style({ opacity: 0.5 })),
                            transition('void <=> *', [
                                style({
                                    opacity: 0
                                }),
                                animate('0.2s ease-in-out')
                            ])
                        ])
                    ],
                    styles: ["\n            .hc-modal-overlay {\n                background-color: #000;\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                opacity: 0.5;\n                display: block;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    ModalOverlayComponent.ctorParameters = function () { return [
        { type: ActiveModal }
    ]; };
    ModalOverlayComponent.propDecorators = {
        _ignoreEscapeKey: [{ type: Input }],
        _fadeInOut: [{ type: HostBinding, args: ['@fadeInOut',] }],
        _escapeKey: [{ type: HostListener, args: ['document:keyup.escape', ['$event'],] }]
    };
    return ModalOverlayComponent;
}());
export { ModalOverlayComponent };
if (false) {
    /** @type {?} */
    ModalOverlayComponent.prototype._ignoreEscapeKey;
    /**
     * @type {?}
     * @private
     */
    ModalOverlayComponent.prototype.activeModal;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtb3ZlcmxheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvbW9kYWwvbW9kYWwtb3ZlcmxheS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRS9FO0lBb0NJLCtCQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUY1QyxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7SUFFc0IsQ0FBQzs7OztJQUdoRCwwQ0FBVTs7O0lBRFY7UUFFSSxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7OztJQUdELDBDQUFVOzs7O0lBRFYsVUFDVyxLQUFVO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUM5QjtJQUNMLENBQUM7O2dCQWhESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O29CQWdCckMsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLGtCQUFrQixFQUFDO29CQUNqQyxVQUFVLEVBQUU7d0JBQ1IsT0FBTyxDQUFDLFdBQVcsRUFBRTs0QkFDakIsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQzs0QkFDbEMsVUFBVSxDQUFDLFlBQVksRUFBRTtnQ0FDckIsS0FBSyxDQUFDO29DQUNGLE9BQU8sRUFBRSxDQUFDO2lDQUNiLENBQUM7Z0NBQ0YsT0FBTyxDQUFDLGtCQUFrQixDQUFDOzZCQUM5QixDQUFDO3lCQUNMLENBQUM7cUJBQ0w7NkJBekJHLGlUQVdDO2lCQWVSOzs7O2dCQWxDTyxXQUFXOzs7bUNBb0NkLEtBQUs7NkJBS0wsV0FBVyxTQUFDLFlBQVk7NkJBS3hCLFlBQVksU0FBQyx1QkFBdUIsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUFNckQsNEJBQUM7Q0FBQSxBQWpERCxJQWlEQztTQWpCWSxxQkFBcUI7OztJQUM5QixpREFDeUI7Ozs7O0lBRWIsNENBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FjdGl2ZU1vZGFsfSBmcm9tICcuL2FjdGl2ZS1tb2RhbCc7XG5pbXBvcnQge2FuaW1hdGUsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlcn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaGMtbW9kYWwtb3ZlcmxheScsXG4gICAgdGVtcGxhdGU6ICcnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgc3R5bGVzOiBbXG4gICAgICAgIGBcbiAgICAgICAgICAgIC5oYy1tb2RhbC1vdmVybGF5IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgICByaWdodDogMDtcbiAgICAgICAgICAgICAgICBib3R0b206IDA7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC41O1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgXSxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWhvc3QtbWV0YWRhdGEtcHJvcGVydHlcbiAgICBob3N0OiB7Y2xhc3M6ICdoYy1tb2RhbC1vdmVybGF5J30sXG4gICAgYW5pbWF0aW9uczogW1xuICAgICAgICB0cmlnZ2VyKCdmYWRlSW5PdXQnLCBbXG4gICAgICAgICAgICBzdGF0ZSgnaW4nLCBzdHlsZSh7b3BhY2l0eTogMC41fSkpLFxuICAgICAgICAgICAgdHJhbnNpdGlvbigndm9pZCA8PT4gKicsIFtcbiAgICAgICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBhbmltYXRlKCcwLjJzIGVhc2UtaW4tb3V0JylcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBNb2RhbE92ZXJsYXlDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgX2lnbm9yZUVzY2FwZUtleSA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhY3RpdmVNb2RhbDogQWN0aXZlTW9kYWwpIHt9XG5cbiAgICBASG9zdEJpbmRpbmcoJ0BmYWRlSW5PdXQnKVxuICAgIF9mYWRlSW5PdXQoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXl1cC5lc2NhcGUnLCBbJyRldmVudCddKVxuICAgIF9lc2NhcGVLZXkoZXZlbnQ6IGFueSkge1xuICAgICAgICBpZiAoIXRoaXMuX2lnbm9yZUVzY2FwZUtleSkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVNb2RhbC5kaXNtaXNzKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=