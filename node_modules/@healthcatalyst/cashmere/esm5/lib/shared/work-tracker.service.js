/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/work-tracker.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
var WorkTrackerService = /** @class */ (function () {
    function WorkTrackerService() {
    }
    /**
     * @param {?} task
     * @return {?}
     */
    WorkTrackerService.prototype.start = /**
     * @param {?} task
     * @return {?}
     */
    function (task) {
        /** @type {?} */
        var working = new ReplaySubject();
        working.next(true);
        task()
            .then((/**
         * @return {?}
         */
        function () {
            working.next(false);
        }))
            .catch((/**
         * @return {?}
         */
        function () {
            working.next(false);
        }));
        return working.asObservable();
    };
    /**
     * @param {?} task
     * @return {?}
     */
    WorkTrackerService.prototype.startObservable = /**
     * @param {?} task
     * @return {?}
     */
    function (task) {
        /** @type {?} */
        var working = new ReplaySubject();
        /** @type {?} */
        var taskSubscription = task();
        working.next(true);
        taskSubscription.add((/**
         * @return {?}
         */
        function () {
            working.next(false);
            taskSubscription.unsubscribe();
        }));
        return working.asObservable();
    };
    WorkTrackerService.decorators = [
        { type: Injectable }
    ];
    return WorkTrackerService;
}());
export { WorkTrackerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay10cmFja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvc2hhcmVkL3dvcmstdHJhY2tlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQWEsYUFBYSxFQUFlLE1BQU0sTUFBTSxDQUFDO0FBRTdEO0lBQUE7SUE0QkEsQ0FBQzs7Ozs7SUExQlUsa0NBQUs7Ozs7SUFBWixVQUFhLElBQXdCOztZQUM3QixPQUFPLEdBQUcsSUFBSSxhQUFhLEVBQVc7UUFDMUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixJQUFJLEVBQUU7YUFDRCxJQUFJOzs7UUFBQztZQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxFQUFDO2FBQ0QsS0FBSzs7O1FBQUM7WUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLENBQUMsRUFBQyxDQUFDO1FBRVAsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFTSw0Q0FBZTs7OztJQUF0QixVQUF1QixJQUF3Qjs7WUFDdkMsT0FBTyxHQUFHLElBQUksYUFBYSxFQUFXOztZQUN0QyxnQkFBZ0IsR0FBRyxJQUFJLEVBQUU7UUFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVuQixnQkFBZ0IsQ0FBQyxHQUFHOzs7UUFBQztZQUNqQixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25DLENBQUMsRUFBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7Z0JBM0JKLFVBQVU7O0lBNEJYLHlCQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0EzQlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCwgU3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFdvcmtUcmFja2VyU2VydmljZSB7XG4gICAgcHVibGljIHN0YXJ0KHRhc2s6ICgpID0+IFByb21pc2U8YW55Pik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgICAgICBsZXQgd29ya2luZyA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KCk7XG4gICAgICAgIHdvcmtpbmcubmV4dCh0cnVlKTtcbiAgICAgICAgdGFzaygpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgd29ya2luZy5uZXh0KGZhbHNlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIHdvcmtpbmcubmV4dChmYWxzZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gd29ya2luZy5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhcnRPYnNlcnZhYmxlKHRhc2s6ICgpID0+IFN1YnNjcmlwdGlvbik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgICAgICBsZXQgd29ya2luZyA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KCk7XG4gICAgICAgIGxldCB0YXNrU3Vic2NyaXB0aW9uID0gdGFzaygpO1xuICAgICAgICB3b3JraW5nLm5leHQodHJ1ZSk7XG5cbiAgICAgICAgdGFza1N1YnNjcmlwdGlvbi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgd29ya2luZy5uZXh0KGZhbHNlKTtcbiAgICAgICAgICAgIHRhc2tTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHdvcmtpbmcuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxufVxuIl19