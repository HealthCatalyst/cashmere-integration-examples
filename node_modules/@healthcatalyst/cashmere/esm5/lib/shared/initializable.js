/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/initializable.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs';
/**
 * Abstract class for common initialization functionality
 * @abstract
 */
var /**
 * Abstract class for common initialization functionality
 * @abstract
 */
Initializable = /** @class */ (function () {
    function Initializable() {
        var _this = this;
        /**
         * Whether this directive has been marked as initialized.
         */
        this._isInitialized = false;
        /**
         * List of subscribers that subscribed before the directive was initialized. Should be notified
         * during _markInitialized. Set to null after pending subscribers are notified, and should
         * not expect to be populated after.
         */
        this._pendingSubscribers = [];
        /**
         * Observable stream that emits when the directive initializes. If already initialized, the
         * subscriber is stored to be notified once _markInitialized is called.
         * \@docs-private
         */
        this.initialized = new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        function (subscriber) {
            // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify
            // when _markInitialized is called.
            if (_this._isInitialized) {
                _this._notifySubscriber(subscriber);
            }
            else {
                (/** @type {?} */ (_this._pendingSubscribers)).push(subscriber);
            }
        }));
    }
    /**
     * Marks the state as initialized and notifies pending subscribers. Should be called at the end
     * of ngOnInit.
     * @docs-private
     */
    /**
     * Marks the state as initialized and notifies pending subscribers. Should be called at the end
     * of ngOnInit.
     * \@docs-private
     * @return {?}
     */
    Initializable.prototype._markInitialized = /**
     * Marks the state as initialized and notifies pending subscribers. Should be called at the end
     * of ngOnInit.
     * \@docs-private
     * @return {?}
     */
    function () {
        if (this._isInitialized) {
            throw Error('This directive has already been marked as initialized and should not be called twice.');
        }
        this._isInitialized = true;
        (/** @type {?} */ (this._pendingSubscribers)).forEach(this._notifySubscriber);
        this._pendingSubscribers = null;
    };
    /** Emits and completes the subscriber stream (should only emit once). */
    /**
     * Emits and completes the subscriber stream (should only emit once).
     * @param {?} subscriber
     * @return {?}
     */
    Initializable.prototype._notifySubscriber = /**
     * Emits and completes the subscriber stream (should only emit once).
     * @param {?} subscriber
     * @return {?}
     */
    function (subscriber) {
        subscriber.next();
        subscriber.complete();
    };
    return Initializable;
}());
/**
 * Abstract class for common initialization functionality
 * @abstract
 */
export { Initializable };
if (false) {
    /**
     * Whether this directive has been marked as initialized.
     * @type {?}
     */
    Initializable.prototype._isInitialized;
    /**
     * List of subscribers that subscribed before the directive was initialized. Should be notified
     * during _markInitialized. Set to null after pending subscribers are notified, and should
     * not expect to be populated after.
     * @type {?}
     */
    Initializable.prototype._pendingSubscribers;
    /**
     * Observable stream that emits when the directive initializes. If already initialized, the
     * subscriber is stored to be notified once _markInitialized is called.
     * \@docs-private
     * @type {?}
     */
    Initializable.prototype.initialized;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGl6YWJsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZWQvaW5pdGlhbGl6YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBYSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7Ozs7O0FBRzVDOzs7OztJQUFBO1FBQUEsaUJBK0NDOzs7O1FBN0NHLG1CQUFjLEdBQUcsS0FBSyxDQUFDOzs7Ozs7UUFPdkIsd0JBQW1CLEdBQStCLEVBQUUsQ0FBQzs7Ozs7O1FBT3JELGdCQUFXLEdBQUcsSUFBSSxVQUFVOzs7O1FBQVEsVUFBQSxVQUFVO1lBQzFDLDhGQUE4RjtZQUM5RixtQ0FBbUM7WUFDbkMsSUFBSSxLQUFJLENBQUMsY0FBYyxFQUFFO2dCQUNyQixLQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDdEM7aUJBQU07Z0JBQ0gsbUJBQUEsS0FBSSxDQUFDLG1CQUFtQixFQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzlDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUF1QlAsQ0FBQztJQXJCRzs7OztPQUlHOzs7Ozs7O0lBQ0gsd0NBQWdCOzs7Ozs7SUFBaEI7UUFDSSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDckIsTUFBTSxLQUFLLENBQUMsdUZBQXVGLENBQUMsQ0FBQztTQUN4RztRQUVELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBRTNCLG1CQUFBLElBQUksQ0FBQyxtQkFBbUIsRUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFFRCx5RUFBeUU7Ozs7OztJQUN6RSx5Q0FBaUI7Ozs7O0lBQWpCLFVBQWtCLFVBQTZCO1FBQzNDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FBQyxBQS9DRCxJQStDQzs7Ozs7Ozs7Ozs7SUE3Q0csdUNBQXVCOzs7Ozs7O0lBT3ZCLDRDQUFxRDs7Ozs7OztJQU9yRCxvQ0FRRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3Vic2NyaWJlciwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbi8qKiBBYnN0cmFjdCBjbGFzcyBmb3IgY29tbW9uIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uYWxpdHkgKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJbml0aWFsaXphYmxlIHtcbiAgICAvKiogV2hldGhlciB0aGlzIGRpcmVjdGl2ZSBoYXMgYmVlbiBtYXJrZWQgYXMgaW5pdGlhbGl6ZWQuICovXG4gICAgX2lzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2Ygc3Vic2NyaWJlcnMgdGhhdCBzdWJzY3JpYmVkIGJlZm9yZSB0aGUgZGlyZWN0aXZlIHdhcyBpbml0aWFsaXplZC4gU2hvdWxkIGJlIG5vdGlmaWVkXG4gICAgICogZHVyaW5nIF9tYXJrSW5pdGlhbGl6ZWQuIFNldCB0byBudWxsIGFmdGVyIHBlbmRpbmcgc3Vic2NyaWJlcnMgYXJlIG5vdGlmaWVkLCBhbmQgc2hvdWxkXG4gICAgICogbm90IGV4cGVjdCB0byBiZSBwb3B1bGF0ZWQgYWZ0ZXIuXG4gICAgICovXG4gICAgX3BlbmRpbmdTdWJzY3JpYmVyczogU3Vic2NyaWJlcjxuZXZlcj5bXSB8IG51bGwgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIE9ic2VydmFibGUgc3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB0aGUgZGlyZWN0aXZlIGluaXRpYWxpemVzLiBJZiBhbHJlYWR5IGluaXRpYWxpemVkLCB0aGVcbiAgICAgKiBzdWJzY3JpYmVyIGlzIHN0b3JlZCB0byBiZSBub3RpZmllZCBvbmNlIF9tYXJrSW5pdGlhbGl6ZWQgaXMgY2FsbGVkLlxuICAgICAqIEBkb2NzLXByaXZhdGVcbiAgICAgKi9cbiAgICBpbml0aWFsaXplZCA9IG5ldyBPYnNlcnZhYmxlPG5ldmVyPihzdWJzY3JpYmVyID0+IHtcbiAgICAgICAgLy8gSWYgaW5pdGlhbGl6ZWQsIGltbWVkaWF0ZWx5IG5vdGlmeSB0aGUgc3Vic2NyaWJlci4gT3RoZXJ3aXNlIHN0b3JlIHRoZSBzdWJzY3JpYmVyIHRvIG5vdGlmeVxuICAgICAgICAvLyB3aGVuIF9tYXJrSW5pdGlhbGl6ZWQgaXMgY2FsbGVkLlxuICAgICAgICBpZiAodGhpcy5faXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5U3Vic2NyaWJlcihzdWJzY3JpYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdTdWJzY3JpYmVycyEucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogTWFya3MgdGhlIHN0YXRlIGFzIGluaXRpYWxpemVkIGFuZCBub3RpZmllcyBwZW5kaW5nIHN1YnNjcmliZXJzLiBTaG91bGQgYmUgY2FsbGVkIGF0IHRoZSBlbmRcbiAgICAgKiBvZiBuZ09uSW5pdC5cbiAgICAgKiBAZG9jcy1wcml2YXRlXG4gICAgICovXG4gICAgX21hcmtJbml0aWFsaXplZCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdUaGlzIGRpcmVjdGl2ZSBoYXMgYWxyZWFkeSBiZWVuIG1hcmtlZCBhcyBpbml0aWFsaXplZCBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgdHdpY2UuJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc0luaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9wZW5kaW5nU3Vic2NyaWJlcnMhLmZvckVhY2godGhpcy5fbm90aWZ5U3Vic2NyaWJlcik7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdTdWJzY3JpYmVycyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqIEVtaXRzIGFuZCBjb21wbGV0ZXMgdGhlIHN1YnNjcmliZXIgc3RyZWFtIChzaG91bGQgb25seSBlbWl0IG9uY2UpLiAqL1xuICAgIF9ub3RpZnlTdWJzY3JpYmVyKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8bmV2ZXI+KTogdm9pZCB7XG4gICAgICAgIHN1YnNjcmliZXIubmV4dCgpO1xuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19