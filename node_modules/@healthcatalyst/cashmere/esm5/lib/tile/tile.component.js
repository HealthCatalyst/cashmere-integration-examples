/**
 * @fileoverview added by tsickle
 * Generated from: lib/tile/tile.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, ViewEncapsulation } from '@angular/core';
import { parseBooleanAttribute } from '../util';
/**
 * Container element to help segment content visually against a gray background.
 * The tile will expand to the height and width of the content it contains.
 */
var TileComponent = /** @class */ (function () {
    function TileComponent() {
        this._hostClass = true;
        this._tight = false;
    }
    Object.defineProperty(TileComponent.prototype, "tight", {
        /** If true, compress the default padding in the tile. Defaults to false  */
        get: /**
         * If true, compress the default padding in the tile. Defaults to false
         * @return {?}
         */
        function () {
            return this._tight;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tight = parseBooleanAttribute(value);
        },
        enumerable: true,
        configurable: true
    });
    TileComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-tile',
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    TileComponent.ctorParameters = function () { return []; };
    TileComponent.propDecorators = {
        _hostClass: [{ type: HostBinding, args: ['class.hc-tile',] }],
        _tight: [{ type: HostBinding, args: ['class.hc-tile-tight',] }],
        tight: [{ type: Input }]
    };
    return TileComponent;
}());
export { TileComponent };
if (false) {
    /** @type {?} */
    TileComponent.prototype._hostClass;
    /** @type {?} */
    TileComponent.prototype._tight;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvdGlsZS90aWxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxTQUFTLENBQUM7Ozs7O0FBSTlDO0lBcUJJO1FBZEEsZUFBVSxHQUFHLElBQUksQ0FBQztRQUdsQixXQUFNLEdBQUcsS0FBSyxDQUFDO0lBV0EsQ0FBQztJQVJoQixzQkFDSSxnQ0FBSztRQUZULDRFQUE0RTs7Ozs7UUFDNUU7WUFFSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkIsQ0FBQzs7Ozs7UUFDRCxVQUFVLEtBQUs7WUFDWCxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLENBQUM7OztPQUhBOztnQkFoQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxTQUFTO29CQUNuQixRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtpQkFDeEM7Ozs7OzZCQUVJLFdBQVcsU0FBQyxlQUFlO3lCQUczQixXQUFXLFNBQUMscUJBQXFCO3dCQUlqQyxLQUFLOztJQVNWLG9CQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0FqQlksYUFBYTs7O0lBQ3RCLG1DQUNrQjs7SUFFbEIsK0JBQ2UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBWaWV3RW5jYXBzdWxhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3BhcnNlQm9vbGVhbkF0dHJpYnV0ZX0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKiBDb250YWluZXIgZWxlbWVudCB0byBoZWxwIHNlZ21lbnQgY29udGVudCB2aXN1YWxseSBhZ2FpbnN0IGEgZ3JheSBiYWNrZ3JvdW5kLlxuICogVGhlIHRpbGUgd2lsbCBleHBhbmQgdG8gdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgdGhlIGNvbnRlbnQgaXQgY29udGFpbnMuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2hjLXRpbGUnLFxuICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBUaWxlQ29tcG9uZW50IHtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmhjLXRpbGUnKVxuICAgIF9ob3N0Q2xhc3MgPSB0cnVlO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5oYy10aWxlLXRpZ2h0JylcbiAgICBfdGlnaHQgPSBmYWxzZTtcblxuICAgIC8qKiBJZiB0cnVlLCBjb21wcmVzcyB0aGUgZGVmYXVsdCBwYWRkaW5nIGluIHRoZSB0aWxlLiBEZWZhdWx0cyB0byBmYWxzZSAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCB0aWdodCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpZ2h0O1xuICAgIH1cbiAgICBzZXQgdGlnaHQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdGlnaHQgPSBwYXJzZUJvb2xlYW5BdHRyaWJ1dGUodmFsdWUpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge31cbn1cbiJdfQ==