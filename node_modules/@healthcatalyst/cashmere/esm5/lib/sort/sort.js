/**
 * @fileoverview added by tsickle
 * Generated from: lib/sort/sort.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/* tslint:disable:no-output-rename no-input-rename directive-class-suffix */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive, EventEmitter, Input, isDevMode, Output } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { getSortDuplicateSortableIdError, getSortHeaderMissingIdError, getSortInvalidDirectionError } from './sort-errors';
import { Subject } from 'rxjs';
import { Initializable } from '../shared/initializable';
/**
 * Interface for a directive that holds sorting state consumed by `HcSortHeaderComponent`.
 * @record
 */
export function HcSortable() { }
if (false) {
    /**
     * The id of the column being sorted.
     * @type {?}
     */
    HcSortable.prototype.id;
    /**
     * Starting sort direction.
     * @type {?}
     */
    HcSortable.prototype.start;
    /**
     * Whether to disable clearing the sorting state.
     * @type {?}
     */
    HcSortable.prototype.disableClear;
}
/**
 * The current sort state.
 * @record
 */
export function Sort() { }
if (false) {
    /**
     * The id of the column being sorted.
     * @type {?}
     */
    Sort.prototype.active;
    /**
     * The sort direction.
     * @type {?}
     */
    Sort.prototype.direction;
}
/**
 * Container for HcSortables to manage the sort state and provide default sort parameters.
 */
var HcSort = /** @class */ (function (_super) {
    tslib_1.__extends(HcSort, _super);
    function HcSort() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Collection of all registered sortables that this directive manages.
         */
        _this.sortables = new Map();
        /**
         * Used to notify any child components listening to state changes.
         */
        _this._stateChanges = new Subject();
        /**
         * The direction to set when an HcSortable is initially sorted.
         * May be overriden by the HcSortable's sort start.
         */
        _this.start = 'asc';
        _this._direction = '';
        _this._disabled = false;
        /**
         * Event emitted when the user changes either the active sort or sort direction.
         */
        _this.sortChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(HcSort.prototype, "direction", {
        /** The sort direction of the currently active HcSortable. */
        get: /**
         * The sort direction of the currently active HcSortable.
         * @return {?}
         */
        function () {
            return this._direction;
        },
        set: /**
         * @param {?} direction
         * @return {?}
         */
        function (direction) {
            if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {
                throw getSortInvalidDirectionError(direction);
            }
            this._direction = direction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HcSort.prototype, "disableClear", {
        /**
         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.
         * May be overriden by the HcSortable's disable clear input.
         */
        get: /**
         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.
         * May be overriden by the HcSortable's disable clear input.
         * @return {?}
         */
        function () {
            return this._disableClear;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._disableClear = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HcSort.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Register function to be used by the contained HcSortables. Adds the HcSortable to the
     * collection of HcSortables.
     */
    /**
     * Register function to be used by the contained HcSortables. Adds the HcSortable to the
     * collection of HcSortables.
     * @param {?} sortable
     * @return {?}
     */
    HcSort.prototype.register = /**
     * Register function to be used by the contained HcSortables. Adds the HcSortable to the
     * collection of HcSortables.
     * @param {?} sortable
     * @return {?}
     */
    function (sortable) {
        if (!sortable.id) {
            throw getSortHeaderMissingIdError();
        }
        if (this.sortables.has(sortable.id)) {
            throw getSortDuplicateSortableIdError(sortable.id);
        }
        this.sortables.set(sortable.id, sortable);
    };
    /**
     * Unregister function to be used by the contained HcSortables. Removes the HcSortable from the
     * collection of contained HcSortables.
     */
    /**
     * Unregister function to be used by the contained HcSortables. Removes the HcSortable from the
     * collection of contained HcSortables.
     * @param {?} sortable
     * @return {?}
     */
    HcSort.prototype.deregister = /**
     * Unregister function to be used by the contained HcSortables. Removes the HcSortable from the
     * collection of contained HcSortables.
     * @param {?} sortable
     * @return {?}
     */
    function (sortable) {
        this.sortables.delete(sortable.id);
    };
    /** Sets the active sort id and determines the new sort direction. */
    /**
     * Sets the active sort id and determines the new sort direction.
     * @param {?} sortable
     * @return {?}
     */
    HcSort.prototype.sort = /**
     * Sets the active sort id and determines the new sort direction.
     * @param {?} sortable
     * @return {?}
     */
    function (sortable) {
        if (this.active !== sortable.id) {
            this.active = sortable.id;
            this.direction = sortable.start ? sortable.start : this.start;
        }
        else {
            this.direction = this.getNextSortDirection(sortable);
        }
        this.sortChange.emit({ active: this.active, direction: this.direction });
    };
    /** Returns the next sort direction of the active sortable, checking for potential overrides. */
    /**
     * Returns the next sort direction of the active sortable, checking for potential overrides.
     * @param {?} sortable
     * @return {?}
     */
    HcSort.prototype.getNextSortDirection = /**
     * Returns the next sort direction of the active sortable, checking for potential overrides.
     * @param {?} sortable
     * @return {?}
     */
    function (sortable) {
        if (!sortable) {
            return '';
        }
        // Get the sort direction cycle with the potential sortable overrides.
        /** @type {?} */
        var disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;
        /** @type {?} */
        var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);
        // Get and return the next direction in the cycle
        /** @type {?} */
        var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;
        if (nextDirectionIndex >= sortDirectionCycle.length) {
            nextDirectionIndex = 0;
        }
        return sortDirectionCycle[nextDirectionIndex];
    };
    /**
     * @return {?}
     */
    HcSort.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._markInitialized();
    };
    /**
     * @return {?}
     */
    HcSort.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this._stateChanges.next();
    };
    /**
     * @return {?}
     */
    HcSort.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._stateChanges.complete();
    };
    HcSort.decorators = [
        { type: Directive, args: [{
                    selector: '[hcSort]',
                    exportAs: 'hcSort'
                },] }
    ];
    HcSort.propDecorators = {
        active: [{ type: Input, args: ['hcSortActive',] }],
        start: [{ type: Input, args: ['hcSortStart',] }],
        direction: [{ type: Input, args: ['hcSortDirection',] }],
        disableClear: [{ type: Input, args: ['hcSortDisableClear',] }],
        disabled: [{ type: Input, args: ['hcSortDisabled',] }],
        sortChange: [{ type: Output, args: ['hcSortChange',] }]
    };
    return HcSort;
}(Initializable));
export { HcSort };
if (false) {
    /**
     * Collection of all registered sortables that this directive manages.
     * @type {?}
     */
    HcSort.prototype.sortables;
    /**
     * Used to notify any child components listening to state changes.
     * @type {?}
     */
    HcSort.prototype._stateChanges;
    /**
     * The id of the most recently sorted HcSortable.
     * @type {?}
     */
    HcSort.prototype.active;
    /**
     * The direction to set when an HcSortable is initially sorted.
     * May be overriden by the HcSortable's sort start.
     * @type {?}
     */
    HcSort.prototype.start;
    /**
     * @type {?}
     * @private
     */
    HcSort.prototype._direction;
    /**
     * @type {?}
     * @private
     */
    HcSort.prototype._disableClear;
    /**
     * @type {?}
     * @private
     */
    HcSort.prototype._disabled;
    /**
     * Event emitted when the user changes either the active sort or sort direction.
     * @type {?}
     */
    HcSort.prototype.sortChange;
}
/**
 * Returns the sort direction cycle to use given the provided parameters of order and clear.
 * @param {?} start
 * @param {?} disableClear
 * @return {?}
 */
function getSortDirectionCycle(start, disableClear) {
    /** @type {?} */
    var sortOrder = ['asc', 'desc'];
    if (start === 'desc') {
        sortOrder.reverse();
    }
    if (!disableClear) {
        sortOrder.push('');
    }
    return sortOrder;
}
//# sourceMappingURL=data:application/json;base64,