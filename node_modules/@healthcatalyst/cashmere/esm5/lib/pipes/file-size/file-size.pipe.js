/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/file-size/file-size.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
// Convert bytes into largest possible unit.
// Credit to https://gist.github.com/JonCatmull/ecdf9441aaa37336d9ae2c7f9cb7289a
var FileSizePipe = /** @class */ (function () {
    function FileSizePipe() {
        this.units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
    }
    /**
     * @param {?} bytes
     * @param {?=} precision
     * @return {?}
     */
    FileSizePipe.prototype.transform = /**
     * @param {?} bytes
     * @param {?=} precision
     * @return {?}
     */
    function (bytes, precision) {
        if (precision === void 0) { precision = 2; }
        /** @type {?} */
        var originalInput = bytes;
        if (typeof bytes === 'string') {
            bytes = +bytes;
        }
        if (typeof bytes !== 'number' || isNaN(bytes) || !isFinite(bytes) || bytes < 0 || Math.floor(bytes) !== bytes) {
            return "" + originalInput;
        }
        if (typeof precision !== 'number' ||
            isNaN(precision) ||
            !isFinite(precision) ||
            precision < 0 ||
            Math.floor(precision) !== precision) {
            precision = 2;
        }
        if (precision > 100) {
            precision = 100;
        }
        /** @type {?} */
        var unit = 0;
        while (bytes >= 1024) {
            bytes /= 1024;
            unit++;
            if (unit === 5) {
                // PB, largest size for pipe
                break;
            }
        }
        /** @type {?} */
        var rounded = bytes.toFixed(precision);
        // if the value after truncating is a whole number, don't display a decimal
        if (Math.floor(+rounded) === +rounded) {
            rounded = (+rounded).toString();
        }
        return rounded + ' ' + this.units[unit];
    };
    FileSizePipe.decorators = [
        { type: Pipe, args: [{ name: 'fileSize', pure: true },] }
    ];
    return FileSizePipe;
}());
export { FileSizePipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileSizePipe.prototype.units;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zaXplLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvZmlsZS1zaXplL2ZpbGUtc2l6ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7OztBQUlsRDtJQUFBO1FBRVksVUFBSyxHQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQTZDdEUsQ0FBQzs7Ozs7O0lBM0NVLGdDQUFTOzs7OztJQUFoQixVQUFpQixLQUFhLEVBQUUsU0FBcUI7UUFBckIsMEJBQUEsRUFBQSxhQUFxQjs7WUFDM0MsYUFBYSxHQUFHLEtBQUs7UUFDM0IsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDM0IsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDM0csT0FBTyxLQUFHLGFBQWUsQ0FBQztTQUM3QjtRQUVELElBQ0ksT0FBTyxTQUFTLEtBQUssUUFBUTtZQUM3QixLQUFLLENBQUMsU0FBUyxDQUFDO1lBQ2hCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUNwQixTQUFTLEdBQUcsQ0FBQztZQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssU0FBUyxFQUNyQztZQUNFLFNBQVMsR0FBRyxDQUFDLENBQUM7U0FDakI7UUFDRCxJQUFJLFNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDakIsU0FBUyxHQUFHLEdBQUcsQ0FBQztTQUNuQjs7WUFFRyxJQUFJLEdBQVcsQ0FBQztRQUVwQixPQUFPLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDbEIsS0FBSyxJQUFJLElBQUksQ0FBQztZQUNkLElBQUksRUFBRSxDQUFDO1lBRVAsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO2dCQUNaLDRCQUE0QjtnQkFDNUIsTUFBTTthQUNUO1NBQ0o7O1lBRUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRXRDLDJFQUEyRTtRQUMzRSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNuQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ25DO1FBRUQsT0FBTyxPQUFPLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7Z0JBOUNKLElBQUksU0FBQyxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQzs7SUErQ3BDLG1CQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0E5Q1ksWUFBWTs7Ozs7O0lBQ3JCLDZCQUFrRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIENvbnZlcnQgYnl0ZXMgaW50byBsYXJnZXN0IHBvc3NpYmxlIHVuaXQuXG4vLyBDcmVkaXQgdG8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm9uQ2F0bXVsbC9lY2RmOTQ0MWFhYTM3MzM2ZDlhZTJjN2Y5Y2I3Mjg5YVxuQFBpcGUoe25hbWU6ICdmaWxlU2l6ZScsIHB1cmU6IHRydWV9KVxuZXhwb3J0IGNsYXNzIEZpbGVTaXplUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHByaXZhdGUgdW5pdHM6IHN0cmluZ1tdID0gWydieXRlcycsICdLQicsICdNQicsICdHQicsICdUQicsICdQQiddO1xuXG4gICAgcHVibGljIHRyYW5zZm9ybShieXRlczogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlciA9IDIpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBvcmlnaW5hbElucHV0ID0gYnl0ZXM7XG4gICAgICAgIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBieXRlcyA9ICtieXRlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGJ5dGVzICE9PSAnbnVtYmVyJyB8fCBpc05hTihieXRlcykgfHwgIWlzRmluaXRlKGJ5dGVzKSB8fCBieXRlcyA8IDAgfHwgTWF0aC5mbG9vcihieXRlcykgIT09IGJ5dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7b3JpZ2luYWxJbnB1dH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIHByZWNpc2lvbiAhPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgIGlzTmFOKHByZWNpc2lvbikgfHxcbiAgICAgICAgICAgICFpc0Zpbml0ZShwcmVjaXNpb24pIHx8XG4gICAgICAgICAgICBwcmVjaXNpb24gPCAwIHx8XG4gICAgICAgICAgICBNYXRoLmZsb29yKHByZWNpc2lvbikgIT09IHByZWNpc2lvblxuICAgICAgICApIHtcbiAgICAgICAgICAgIHByZWNpc2lvbiA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWNpc2lvbiA+IDEwMCkge1xuICAgICAgICAgICAgcHJlY2lzaW9uID0gMTAwO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHVuaXQ6IG51bWJlciA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGJ5dGVzID49IDEwMjQpIHtcbiAgICAgICAgICAgIGJ5dGVzIC89IDEwMjQ7XG4gICAgICAgICAgICB1bml0Kys7XG5cbiAgICAgICAgICAgIGlmICh1bml0ID09PSA1KSB7XG4gICAgICAgICAgICAgICAgLy8gUEIsIGxhcmdlc3Qgc2l6ZSBmb3IgcGlwZVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJvdW5kZWQgPSBieXRlcy50b0ZpeGVkKHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gaWYgdGhlIHZhbHVlIGFmdGVyIHRydW5jYXRpbmcgaXMgYSB3aG9sZSBudW1iZXIsIGRvbid0IGRpc3BsYXkgYSBkZWNpbWFsXG4gICAgICAgIGlmIChNYXRoLmZsb29yKCtyb3VuZGVkKSA9PT0gK3JvdW5kZWQpIHtcbiAgICAgICAgICAgIHJvdW5kZWQgPSAoK3JvdW5kZWQpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcm91bmRlZCArICcgJyArIHRoaXMudW5pdHNbdW5pdF07XG4gICAgfVxufVxuIl19