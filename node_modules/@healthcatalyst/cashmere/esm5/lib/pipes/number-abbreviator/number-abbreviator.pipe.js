/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/number-abbreviator/number-abbreviator.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from "@angular/core";
/**
 * Creates an abbreviated number for display. 1,234,234 => 1.23M
 */
var NumberAbbreviatorPipe = /** @class */ (function () {
    function NumberAbbreviatorPipe() {
    }
    /**
     * @param value the value to be abbreviated
     * @param decimalPoints how many decimal points to round to
     * @param threshold represents the number at which we should start abbreviating;
     * if the threshold is 1 million, we'll leave number less than 1 million as is (aside from adding commas or decimal points)
     */
    /**
     * @param {?} value the value to be abbreviated
     * @param {?=} decimalPoints how many decimal points to round to
     * @param {?=} threshold represents the number at which we should start abbreviating;
     * if the threshold is 1 million, we'll leave number less than 1 million as is (aside from adding commas or decimal points)
     * @return {?}
     */
    NumberAbbreviatorPipe.prototype.transform = /**
     * @param {?} value the value to be abbreviated
     * @param {?=} decimalPoints how many decimal points to round to
     * @param {?=} threshold represents the number at which we should start abbreviating;
     * if the threshold is 1 million, we'll leave number less than 1 million as is (aside from adding commas or decimal points)
     * @return {?}
     */
    function (value, decimalPoints, threshold) {
        var e_1, _a;
        if (decimalPoints === void 0) { decimalPoints = 2; }
        if (threshold === void 0) { threshold = 1000000; }
        if (value === null) {
            return value;
        }
        // use defaults if given funky parameters
        if (decimalPoints < 0 || !Number.isInteger(decimalPoints)) {
            decimalPoints = 2;
        }
        if (threshold < 1000 || !Number.isInteger(threshold)) {
            threshold = 1000;
        }
        /** @type {?} */
        var abs = Math.abs(value);
        /** @type {?} */
        var key = "";
        /** @type {?} */
        var roundedStringVal = "";
        /** @type {?} */
        var isNegative = value < 0;
        if (abs >= threshold) {
            try {
                // Abbreviate, adding unit if greater than specified limit
                for (var _b = tslib_1.__values(NumberAbbreviatorPipe.powers), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var power = _c.value;
                    /** @type {?} */
                    var reduced = abs / power.value;
                    reduced = this.roundValue(reduced, decimalPoints);
                    if (reduced >= 1) {
                        roundedStringVal = reduced.toString();
                        key = power.key;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            // Just round decimals and add commas if less than specified limit
            roundedStringVal = this.roundValue(abs, decimalPoints).toLocaleString();
        }
        return (isNegative ? "-" : "") + roundedStringVal + key;
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} decimalPoints
     * @return {?}
     */
    NumberAbbreviatorPipe.prototype.roundValue = /**
     * @private
     * @param {?} value
     * @param {?=} decimalPoints
     * @return {?}
     */
    function (value, decimalPoints) {
        if (decimalPoints === void 0) { decimalPoints = 2; }
        /** @type {?} */
        var rounder = Math.pow(10, decimalPoints);
        return Math.round(value * rounder) / rounder;
    };
    NumberAbbreviatorPipe.powers = [
        { key: "Q", value: Math.pow(10, 15) },
        { key: "T", value: Math.pow(10, 12) },
        { key: "B", value: Math.pow(10, 9) },
        { key: "M", value: Math.pow(10, 6) },
        { key: "K", value: 1000 }
    ];
    NumberAbbreviatorPipe.decorators = [
        { type: Pipe, args: [{ name: "abbreviateNumber" },] }
    ];
    return NumberAbbreviatorPipe;
}());
export { NumberAbbreviatorPipe };
if (false) {
    /** @type {?} */
    NumberAbbreviatorPipe.powers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLWFiYnJldmlhdG9yLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvbnVtYmVyLWFiYnJldmlhdG9yL251bWJlci1hYmJyZXZpYXRvci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOzs7O0FBR3BEO0lBQUE7SUFvREEsQ0FBQztJQTFDRzs7Ozs7T0FLRzs7Ozs7Ozs7SUFDSSx5Q0FBUzs7Ozs7OztJQUFoQixVQUFpQixLQUFhLEVBQUUsYUFBeUIsRUFBRSxTQUEyQjs7UUFBdEQsOEJBQUEsRUFBQSxpQkFBeUI7UUFBRSwwQkFBQSxFQUFBLG1CQUEyQjtRQUNsRixJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFBRSxPQUFPLEtBQUssQ0FBQztTQUFFO1FBRXJDLHlDQUF5QztRQUN6QyxJQUFJLGFBQWEsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQUUsYUFBYSxHQUFHLENBQUMsQ0FBQztTQUFFO1FBQ2pGLElBQUksU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQUU7O1lBRXJFLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQzs7WUFDdkIsR0FBRyxHQUFHLEVBQUU7O1lBQ1IsZ0JBQWdCLEdBQUcsRUFBRTs7WUFDbkIsVUFBVSxHQUFHLEtBQUssR0FBRyxDQUFDO1FBRTVCLElBQUksR0FBRyxJQUFJLFNBQVMsRUFBRTs7Z0JBQ2xCLDBEQUEwRDtnQkFDMUQsS0FBb0IsSUFBQSxLQUFBLGlCQUFBLHFCQUFxQixDQUFDLE1BQU0sQ0FBQSxnQkFBQSw0QkFBRTtvQkFBN0MsSUFBTSxLQUFLLFdBQUE7O3dCQUNSLE9BQU8sR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUs7b0JBQy9CLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztvQkFFbEQsSUFBSSxPQUFPLElBQUksQ0FBQyxFQUFFO3dCQUNkLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQzt3QkFDdEMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7d0JBQ2hCLE1BQU07cUJBQ1Q7aUJBQ0o7Ozs7Ozs7OztTQUNKO2FBQU07WUFDSCxrRUFBa0U7WUFDbEUsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDM0U7UUFFRCxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztJQUM1RCxDQUFDOzs7Ozs7O0lBRU8sMENBQVU7Ozs7OztJQUFsQixVQUFtQixLQUFhLEVBQUUsYUFBeUI7UUFBekIsOEJBQUEsRUFBQSxpQkFBeUI7O1lBQ2pELE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUM7UUFDM0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDakQsQ0FBQztJQWpEYSw0QkFBTSxHQUFHO1FBQ25CLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDckMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUNyQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQ3BDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDcEMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7S0FDNUIsQ0FBQzs7Z0JBUkwsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFOztJQW9EbEMsNEJBQUM7Q0FBQSxBQXBERCxJQW9EQztTQW5EWSxxQkFBcUI7OztJQUM5Qiw2QkFNRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG4vKiogQ3JlYXRlcyBhbiBhYmJyZXZpYXRlZCBudW1iZXIgZm9yIGRpc3BsYXkuIDEsMjM0LDIzNCA9PiAxLjIzTSAqL1xuQFBpcGUoeyBuYW1lOiBcImFiYnJldmlhdGVOdW1iZXJcIiB9KVxuZXhwb3J0IGNsYXNzIE51bWJlckFiYnJldmlhdG9yUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHB1YmxpYyBzdGF0aWMgcG93ZXJzID0gW1xuICAgICAgICB7IGtleTogXCJRXCIsIHZhbHVlOiBNYXRoLnBvdygxMCwgMTUpIH0sXG4gICAgICAgIHsga2V5OiBcIlRcIiwgdmFsdWU6IE1hdGgucG93KDEwLCAxMikgfSxcbiAgICAgICAgeyBrZXk6IFwiQlwiLCB2YWx1ZTogTWF0aC5wb3coMTAsIDkpIH0sXG4gICAgICAgIHsga2V5OiBcIk1cIiwgdmFsdWU6IE1hdGgucG93KDEwLCA2KSB9LFxuICAgICAgICB7IGtleTogXCJLXCIsIHZhbHVlOiAxMDAwIH1cbiAgICBdO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBiZSBhYmJyZXZpYXRlZFxuICAgICAqIEBwYXJhbSBkZWNpbWFsUG9pbnRzIGhvdyBtYW55IGRlY2ltYWwgcG9pbnRzIHRvIHJvdW5kIHRvXG4gICAgICogQHBhcmFtIHRocmVzaG9sZCByZXByZXNlbnRzIHRoZSBudW1iZXIgYXQgd2hpY2ggd2Ugc2hvdWxkIHN0YXJ0IGFiYnJldmlhdGluZztcbiAgICAgKiBpZiB0aGUgdGhyZXNob2xkIGlzIDEgbWlsbGlvbiwgd2UnbGwgbGVhdmUgbnVtYmVyIGxlc3MgdGhhbiAxIG1pbGxpb24gYXMgaXMgKGFzaWRlIGZyb20gYWRkaW5nIGNvbW1hcyBvciBkZWNpbWFsIHBvaW50cylcbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNmb3JtKHZhbHVlOiBudW1iZXIsIGRlY2ltYWxQb2ludHM6IG51bWJlciA9IDIsIHRocmVzaG9sZDogbnVtYmVyID0gMTAwMDAwMCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgeyByZXR1cm4gdmFsdWU7IH1cblxuICAgICAgICAvLyB1c2UgZGVmYXVsdHMgaWYgZ2l2ZW4gZnVua3kgcGFyYW1ldGVyc1xuICAgICAgICBpZiAoZGVjaW1hbFBvaW50cyA8IDAgfHwgIU51bWJlci5pc0ludGVnZXIoZGVjaW1hbFBvaW50cykpIHsgZGVjaW1hbFBvaW50cyA9IDI7IH1cbiAgICAgICAgaWYgKHRocmVzaG9sZCA8IDEwMDAgfHwgIU51bWJlci5pc0ludGVnZXIodGhyZXNob2xkKSkgeyB0aHJlc2hvbGQgPSAxMDAwOyB9XG5cbiAgICAgICAgY29uc3QgYWJzID0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgICBsZXQga2V5ID0gXCJcIjtcbiAgICAgICAgbGV0IHJvdW5kZWRTdHJpbmdWYWwgPSBcIlwiO1xuICAgICAgICBjb25zdCBpc05lZ2F0aXZlID0gdmFsdWUgPCAwO1xuXG4gICAgICAgIGlmIChhYnMgPj0gdGhyZXNob2xkKSB7XG4gICAgICAgICAgICAvLyBBYmJyZXZpYXRlLCBhZGRpbmcgdW5pdCBpZiBncmVhdGVyIHRoYW4gc3BlY2lmaWVkIGxpbWl0XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBvd2VyIG9mIE51bWJlckFiYnJldmlhdG9yUGlwZS5wb3dlcnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVkdWNlZCA9IGFicyAvIHBvd2VyLnZhbHVlO1xuICAgICAgICAgICAgICAgIHJlZHVjZWQgPSB0aGlzLnJvdW5kVmFsdWUocmVkdWNlZCwgZGVjaW1hbFBvaW50cyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVkdWNlZCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdW5kZWRTdHJpbmdWYWwgPSByZWR1Y2VkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IHBvd2VyLmtleTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSnVzdCByb3VuZCBkZWNpbWFscyBhbmQgYWRkIGNvbW1hcyBpZiBsZXNzIHRoYW4gc3BlY2lmaWVkIGxpbWl0XG4gICAgICAgICAgICByb3VuZGVkU3RyaW5nVmFsID0gdGhpcy5yb3VuZFZhbHVlKGFicywgZGVjaW1hbFBvaW50cykudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoaXNOZWdhdGl2ZSA/IFwiLVwiIDogXCJcIikgKyByb3VuZGVkU3RyaW5nVmFsICsga2V5O1xuICAgIH1cblxuICAgIHByaXZhdGUgcm91bmRWYWx1ZSh2YWx1ZTogbnVtYmVyLCBkZWNpbWFsUG9pbnRzOiBudW1iZXIgPSAyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3Qgcm91bmRlciA9IE1hdGgucG93KDEwLCBkZWNpbWFsUG9pbnRzKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiByb3VuZGVyKSAvIHJvdW5kZXI7XG4gICAgfVxufSJdfQ==