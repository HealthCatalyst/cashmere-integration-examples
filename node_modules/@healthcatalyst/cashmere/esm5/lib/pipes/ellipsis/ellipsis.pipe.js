/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/ellipsis/ellipsis.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
var EllipsisPipe = /** @class */ (function () {
    function EllipsisPipe() {
    }
    /**
     * @param {?} value
     * @param {?} length
     * @param {?=} mode
     * @return {?}
     */
    EllipsisPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} length
     * @param {?=} mode
     * @return {?}
     */
    function (value, length, mode) {
        if (mode === void 0) { mode = 'characters'; }
        if (typeof value !== 'string' || typeof length !== 'number' || length < 0 || isNaN(length) || Math.floor(length) !== length) {
            return value;
        }
        /** @type {?} */
        var truncated = mode === 'words' ? this.firstNWords(value, length) : this.firstNCharacters(value, length);
        if (truncated === value) {
            return value;
        }
        return truncated + EllipsisPipe.ELLIPSIS;
    };
    /**
     * @private
     * @param {?} value
     * @param {?} n
     * @return {?}
     */
    EllipsisPipe.prototype.firstNWords = /**
     * @private
     * @param {?} value
     * @param {?} n
     * @return {?}
     */
    function (value, n) {
        /** @type {?} */
        var words = value.split(/\s+/g);
        if (words.length <= n) {
            return value;
        }
        /** @type {?} */
        var pattern = new RegExp('^' + words.slice(0, n).join('\\s+'));
        return (/** @type {?} */ (pattern.exec(value)))[0];
    };
    /**
     * @private
     * @param {?} value
     * @param {?} n
     * @return {?}
     */
    EllipsisPipe.prototype.firstNCharacters = /**
     * @private
     * @param {?} value
     * @param {?} n
     * @return {?}
     */
    function (value, n) {
        return value.length > n ? value.substring(0, n) : value;
    };
    EllipsisPipe.ELLIPSIS = 'â€¦';
    EllipsisPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'ellipsis',
                    pure: true
                },] }
    ];
    return EllipsisPipe;
}());
export { EllipsisPipe };
if (false) {
    /** @type {?} */
    EllipsisPipe.ELLIPSIS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxsaXBzaXMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy9lbGxpcHNpcy9lbGxpcHNpcy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFJbEQ7SUFBQTtJQWtDQSxDQUFDOzs7Ozs7O0lBM0JHLGdDQUFTOzs7Ozs7SUFBVCxVQUFVLEtBQWEsRUFBRSxNQUFjLEVBQUUsSUFBaUM7UUFBakMscUJBQUEsRUFBQSxtQkFBaUM7UUFDdEUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssTUFBTSxFQUFFO1lBQ3pILE9BQU8sS0FBSyxDQUFDO1NBQ2hCOztZQUVLLFNBQVMsR0FBRyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7UUFFM0csSUFBSSxTQUFTLEtBQUssS0FBSyxFQUFFO1lBQ3JCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxTQUFTLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUM3QyxDQUFDOzs7Ozs7O0lBRU8sa0NBQVc7Ozs7OztJQUFuQixVQUFvQixLQUFhLEVBQUUsQ0FBUzs7WUFDbEMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ2pDLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDbkIsT0FBTyxLQUFLLENBQUM7U0FDaEI7O1lBRUssT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEUsT0FBTyxtQkFBQSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7OztJQUVPLHVDQUFnQjs7Ozs7O0lBQXhCLFVBQXlCLEtBQWEsRUFBRSxDQUFTO1FBQzdDLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDNUQsQ0FBQztJQTVCZSxxQkFBUSxHQUFHLEdBQUcsQ0FBQzs7Z0JBTGxDLElBQUksU0FBQztvQkFDRixJQUFJLEVBQUUsVUFBVTtvQkFDaEIsSUFBSSxFQUFFLElBQUk7aUJBQ2I7O0lBK0JELG1CQUFDO0NBQUEsQUFsQ0QsSUFrQ0M7U0E5QlksWUFBWTs7O0lBQ3JCLHNCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIEVsbGlwc2lzTW9kZSA9ICdjaGFyYWN0ZXJzJyB8ICd3b3Jkcyc7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnZWxsaXBzaXMnLFxuICAgIHB1cmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgRWxsaXBzaXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgc3RhdGljIHJlYWRvbmx5IEVMTElQU0lTID0gJ+KApic7XG5cbiAgICB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZywgbGVuZ3RoOiBudW1iZXIsIG1vZGU6IEVsbGlwc2lzTW9kZSA9ICdjaGFyYWN0ZXJzJyk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInIHx8IGxlbmd0aCA8IDAgfHwgaXNOYU4obGVuZ3RoKSB8fCBNYXRoLmZsb29yKGxlbmd0aCkgIT09IGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJ1bmNhdGVkID0gbW9kZSA9PT0gJ3dvcmRzJyA/IHRoaXMuZmlyc3ROV29yZHModmFsdWUsIGxlbmd0aCkgOiB0aGlzLmZpcnN0TkNoYXJhY3RlcnModmFsdWUsIGxlbmd0aCk7XG5cbiAgICAgICAgaWYgKHRydW5jYXRlZCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVuY2F0ZWQgKyBFbGxpcHNpc1BpcGUuRUxMSVBTSVM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaXJzdE5Xb3Jkcyh2YWx1ZTogc3RyaW5nLCBuOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB3b3JkcyA9IHZhbHVlLnNwbGl0KC9cXHMrL2cpO1xuICAgICAgICBpZiAod29yZHMubGVuZ3RoIDw9IG4pIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSBuZXcgUmVnRXhwKCdeJyArIHdvcmRzLnNsaWNlKDAsIG4pLmpvaW4oJ1xcXFxzKycpKTtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4uZXhlYyh2YWx1ZSkhWzBdO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmlyc3ROQ2hhcmFjdGVycyh2YWx1ZTogc3RyaW5nLCBuOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID4gbiA/IHZhbHVlLnN1YnN0cmluZygwLCBuKSA6IHZhbHVlO1xuICAgIH1cbn1cbiJdfQ==