/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon/icon.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Attribute, Component, ElementRef, HostBinding, Input, ViewEncapsulation } from '@angular/core';
/**
 * Object used to pass values that will be used in an IconComponent
 * @record
 */
export function HcIcon() { }
if (false) {
    /**
     * Font set icon is a part of
     * @type {?}
     */
    HcIcon.prototype.fontSet;
    /**
     * Name of icon within a font set
     * @type {?}
     */
    HcIcon.prototype.fontIcon;
    /**
     * Optional height in pixels of the icon; defaults to 37
     * @type {?|undefined}
     */
    HcIcon.prototype.fontSize;
}
/**
 * Makes using a font icon easier.
 */
var IconComponent = /** @class */ (function () {
    function IconComponent(elementRef, ariaHidden) {
        this.elementRef = elementRef;
        this._fontIcon = '';
        this._fontSet = '';
        this._previousFontIcon = '';
        this._previousFontSet = '';
        this._hostClass = true;
        // icon should be hidden for accessibility
        if (!ariaHidden) {
            elementRef.nativeElement.setAttribute('aria-hidden', 'true');
        }
    }
    Object.defineProperty(IconComponent.prototype, "fontIcon", {
        /** Name of icon within a font set. */
        get: /**
         * Name of icon within a font set.
         * @return {?}
         */
        function () {
            return this._fontIcon;
        },
        set: /**
         * @param {?} icon
         * @return {?}
         */
        function (icon) {
            this._fontIcon = this._cleanupFontValue(icon);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "fontSet", {
        /** Font set icon is a part of. */
        get: /**
         * Font set icon is a part of.
         * @return {?}
         */
        function () {
            return this._fontSet;
        },
        set: /**
         * @param {?} fontSet
         * @return {?}
         */
        function (fontSet) {
            this._fontSet = this._cleanupFontValue(fontSet);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    IconComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._updateFontIcon();
    };
    /**
     * @private
     * @return {?}
     */
    IconComponent.prototype._updateFontIcon = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.elementRef.nativeElement;
        if (this._previousFontIcon !== this._fontIcon) {
            if (this._previousFontIcon) {
                element.classList.remove(this._previousFontIcon);
            }
            if (this._fontIcon) {
                element.classList.add(this._fontIcon);
                this._previousFontIcon = this._fontIcon;
            }
        }
        if (this._previousFontSet !== this._fontSet) {
            if (this._previousFontSet) {
                element.classList.remove(this._previousFontSet);
            }
            if (this._fontSet) {
                element.classList.add(this._fontSet);
                this._previousFontSet = this._fontSet;
            }
        }
    };
    // make sure that there are no spaces and that if they sent multiple space separated values grab the first
    // make sure that there are no spaces and that if they sent multiple space separated values grab the first
    /**
     * @private
     * @param {?} fontValue
     * @return {?}
     */
    IconComponent.prototype._cleanupFontValue = 
    // make sure that there are no spaces and that if they sent multiple space separated values grab the first
    /**
     * @private
     * @param {?} fontValue
     * @return {?}
     */
    function (fontValue) {
        return (fontValue || '').trim().split(' ')[0];
    };
    IconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-icon',
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None,
                    styles: [".hc-icon-sm,[icon-sm]{font-size:14px!important;height:14px!important;width:14px!important}.hc-icon-md,[icon-md]{font-size:20px!important;height:20px!important;width:20px!important}.hc-icon-lg,[icon-lg]{font-size:36px!important;height:36px!important;width:36px!important}.hc-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;font-size:20px;height:20px;text-align:center;width:20px}"]
                }] }
    ];
    /** @nocollapse */
    IconComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] }
    ]; };
    IconComponent.propDecorators = {
        _hostClass: [{ type: HostBinding, args: ['class.hc-icon',] }],
        fontIcon: [{ type: Input }],
        fontSet: [{ type: Input }]
    };
    return IconComponent;
}());
export { IconComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype._fontIcon;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype._fontSet;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype._previousFontIcon;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype._previousFontSet;
    /** @type {?} */
    IconComponent.prototype._hostClass;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvaWNvbi9pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUE0QixpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFHaEksNEJBT0M7Ozs7OztJQUxHLHlCQUFnQjs7Ozs7SUFFaEIsMEJBQWlCOzs7OztJQUVqQiwwQkFBa0I7Ozs7O0FBSXRCO0lBb0NJLHVCQUFvQixVQUFzQixFQUE0QixVQUFrQjtRQUFwRSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBN0JsQyxjQUFTLEdBQVcsRUFBRSxDQUFDO1FBQ3ZCLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFFdEIsc0JBQWlCLEdBQVcsRUFBRSxDQUFDO1FBQy9CLHFCQUFnQixHQUFXLEVBQUUsQ0FBQztRQUd0QyxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBdUJkLDBDQUEwQztRQUMxQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2IsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ2hFO0lBQ0wsQ0FBQztJQXhCRCxzQkFDSSxtQ0FBUTtRQUZaLHNDQUFzQzs7Ozs7UUFDdEM7WUFFSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDMUIsQ0FBQzs7Ozs7UUFFRCxVQUFhLElBQVk7WUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEQsQ0FBQzs7O09BSkE7SUFPRCxzQkFDSSxrQ0FBTztRQUZYLGtDQUFrQzs7Ozs7UUFDbEM7WUFFSSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDekIsQ0FBQzs7Ozs7UUFFRCxVQUFZLE9BQWU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEQsQ0FBQzs7O09BSkE7Ozs7O0lBYUQsbUNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVPLHVDQUFlOzs7O0lBQXZCOztZQUNVLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWE7UUFDN0MsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUMzQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtnQkFDeEIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDcEQ7WUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2hCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDM0M7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLGdCQUFnQixLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDekMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3ZCLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ25EO1lBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNmLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDckMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDekM7U0FDSjtJQUNMLENBQUM7SUFFRCwwR0FBMEc7Ozs7Ozs7SUFDbEcseUNBQWlCOzs7Ozs7O0lBQXpCLFVBQTBCLFNBQWlCO1FBQ3ZDLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7O2dCQXpFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLFNBQVM7b0JBQ25CLFFBQVEsRUFBRSwyQkFBMkI7b0JBRXJDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0JBbEI2QixVQUFVOzZDQWlEUyxTQUFTLFNBQUMsYUFBYTs7OzZCQXZCbkUsV0FBVyxTQUFDLGVBQWU7MkJBSTNCLEtBQUs7MEJBVUwsS0FBSzs7SUErQ1Ysb0JBQUM7Q0FBQSxBQTFFRCxJQTBFQztTQXBFWSxhQUFhOzs7Ozs7SUFDdEIsa0NBQStCOzs7OztJQUMvQixpQ0FBOEI7Ozs7O0lBRTlCLDBDQUF1Qzs7Ozs7SUFDdkMseUNBQXNDOztJQUV0QyxtQ0FDa0I7Ozs7O0lBc0JOLG1DQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXR0cmlidXRlLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBWaWV3RW5jYXBzdWxhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBPYmplY3QgdXNlZCB0byBwYXNzIHZhbHVlcyB0aGF0IHdpbGwgYmUgdXNlZCBpbiBhbiBJY29uQ29tcG9uZW50ICovXG5leHBvcnQgaW50ZXJmYWNlIEhjSWNvbiB7XG4gICAgLyoqIEZvbnQgc2V0IGljb24gaXMgYSBwYXJ0IG9mICovXG4gICAgZm9udFNldDogc3RyaW5nO1xuICAgIC8qKiBOYW1lIG9mIGljb24gd2l0aGluIGEgZm9udCBzZXQgKi9cbiAgICBmb250SWNvbjogc3RyaW5nO1xuICAgIC8qKiBPcHRpb25hbCBoZWlnaHQgaW4gcGl4ZWxzIG9mIHRoZSBpY29uOyBkZWZhdWx0cyB0byAzNyAqL1xuICAgIGZvbnRTaXplPzogbnVtYmVyO1xufVxuXG4vKiogTWFrZXMgdXNpbmcgYSBmb250IGljb24gZWFzaWVyLiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdoYy1pY29uJyxcbiAgICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICAgIHN0eWxlVXJsczogWycuL2ljb24uY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIEljb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgX2ZvbnRJY29uOiBzdHJpbmcgPSAnJztcbiAgICBwcml2YXRlIF9mb250U2V0OiBzdHJpbmcgPSAnJztcblxuICAgIHByaXZhdGUgX3ByZXZpb3VzRm9udEljb246IHN0cmluZyA9ICcnO1xuICAgIHByaXZhdGUgX3ByZXZpb3VzRm9udFNldDogc3RyaW5nID0gJyc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmhjLWljb24nKVxuICAgIF9ob3N0Q2xhc3MgPSB0cnVlO1xuXG4gICAgLyoqIE5hbWUgb2YgaWNvbiB3aXRoaW4gYSBmb250IHNldC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBmb250SWNvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9udEljb247XG4gICAgfVxuXG4gICAgc2V0IGZvbnRJY29uKGljb246IHN0cmluZykge1xuICAgICAgICB0aGlzLl9mb250SWNvbiA9IHRoaXMuX2NsZWFudXBGb250VmFsdWUoaWNvbik7XG4gICAgfVxuXG4gICAgLyoqIEZvbnQgc2V0IGljb24gaXMgYSBwYXJ0IG9mLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGZvbnRTZXQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRTZXQ7XG4gICAgfVxuXG4gICAgc2V0IGZvbnRTZXQoZm9udFNldDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2ZvbnRTZXQgPSB0aGlzLl9jbGVhbnVwRm9udFZhbHVlKGZvbnRTZXQpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgQEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSBhcmlhSGlkZGVuOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gaWNvbiBzaG91bGQgYmUgaGlkZGVuIGZvciBhY2Nlc3NpYmlsaXR5XG4gICAgICAgIGlmICghYXJpYUhpZGRlbikge1xuICAgICAgICAgICAgZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgICAgICB0aGlzLl91cGRhdGVGb250SWNvbigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZUZvbnRJY29uKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLl9wcmV2aW91c0ZvbnRJY29uICE9PSB0aGlzLl9mb250SWNvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByZXZpb3VzRm9udEljb24pIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fcHJldmlvdXNGb250SWNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fZm9udEljb24pIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZm9udEljb24pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzRm9udEljb24gPSB0aGlzLl9mb250SWNvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9wcmV2aW91c0ZvbnRTZXQgIT09IHRoaXMuX2ZvbnRTZXQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2aW91c0ZvbnRTZXQpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fcHJldmlvdXNGb250U2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9mb250U2V0KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2ZvbnRTZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzRm9udFNldCA9IHRoaXMuX2ZvbnRTZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGVyZSBhcmUgbm8gc3BhY2VzIGFuZCB0aGF0IGlmIHRoZXkgc2VudCBtdWx0aXBsZSBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzIGdyYWIgdGhlIGZpcnN0XG4gICAgcHJpdmF0ZSBfY2xlYW51cEZvbnRWYWx1ZShmb250VmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAoZm9udFZhbHVlIHx8ICcnKS50cmltKCkuc3BsaXQoJyAnKVswXTtcbiAgICB9XG59XG4iXX0=