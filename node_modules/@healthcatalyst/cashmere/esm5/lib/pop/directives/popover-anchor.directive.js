/**
 * @fileoverview added by tsickle
 * Generated from: lib/pop/directives/popover-anchor.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, ViewContainerRef, HostListener, HostBinding } from '@angular/core';
import { Subject, merge } from 'rxjs';
import { tap, takeUntil } from 'rxjs/operators';
import { HcPopComponent } from '../popover.component';
import { getInvalidPopoverError, getInvalidTriggerError } from '../popover.errors';
import { HcPopoverAnchoringService } from '../popover-anchoring.service';
import { VALID_TRIGGER } from '../types';
import { PopoverNotification, NotificationAction } from '../notification.service';
import { HcPopoverAccessibilityService, KEY_CODE } from '../popover-accessibility.service';
var HcPopoverAnchorDirective = /** @class */ (function () {
    function HcPopoverAnchorDirective(_elementRef, _viewContainerRef, _anchoring, _accessibility) {
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._anchoring = _anchoring;
        this._accessibility = _accessibility;
        this._trigger = 'click';
        this._hasSubmenu = false;
        /**
         * Emits when the popover is opened.
         */
        this.popoverOpened = new EventEmitter();
        /**
         * Emits when the popover is closed.
         */
        this.popoverClosed = new EventEmitter();
        /**
         * Emits when the directive is destroyed.
         */
        this._onDestroy = new Subject();
    }
    Object.defineProperty(HcPopoverAnchorDirective.prototype, "attachedPopover", {
        /** Reference to the popover instance. */
        get: /**
         * Reference to the popover instance.
         * @return {?}
         */
        function () {
            return this._attachedPopover;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._validateAttachedPopover(value);
            this._attachedPopover = value;
            // Anchor the popover to the element ref
            this._anchoring.anchor(this.attachedPopover, this._viewContainerRef, this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HcPopoverAnchorDirective.prototype, "trigger", {
        /** Trigger event to toggle the popover. *Defaults to `"click"`.*
         * Accepts `click`, `mousedown`, `hover`, `rightclick`, or `none`.
         * Note: if "hover" is selected, the backdrop for the popover will be disabled. */
        get: /**
         * Trigger event to toggle the popover. *Defaults to `"click"`.*
         * Accepts `click`, `mousedown`, `hover`, `rightclick`, or `none`.
         * Note: if "hover" is selected, the backdrop for the popover will be disabled.
         * @return {?}
         */
        function () {
            return this._trigger;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._validateTrigger(val);
            if (this._trigger !== val) {
                this._trigger = val;
            }
            this._dispatchConfigNotification(new PopoverNotification(NotificationAction.UPDATE_CONFIG));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HcPopoverAnchorDirective.prototype, "context", {
        /** Object or value that can be passed into the popover to customize its content */
        get: /**
         * Object or value that can be passed into the popover to customize its content
         * @return {?}
         */
        function () {
            return this._anchoring._context;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._anchoring._context = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Re-emit open and close events
        /** @type {?} */
        var opened$ = this._anchoring.popoverOpened.pipe(tap((/**
         * @return {?}
         */
        function () { return _this.popoverOpened.emit(); })));
        /** @type {?} */
        var closed$ = this._anchoring.popoverClosed.pipe(tap((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this.popoverClosed.emit(value); })));
        merge(opened$, closed$)
            .pipe(takeUntil(this._onDestroy))
            .subscribe();
    };
    /**
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._setupKeyboardEvents();
    };
    /**
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._onDestroy.next();
        this._onDestroy.complete();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._showOrHideOnClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this._hasSubmenu && event) {
            // Prevent the popover component from auto closing on click if a submenu was selected
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.trigger !== 'click') {
            return;
        }
        this._attachedPopover._offsetPos[0] = this._attachedPopover.horizontalAlign === 'mouse' ? $event.offsetX : 0;
        this._attachedPopover._offsetPos[1] = this._attachedPopover.verticalAlign === 'mouse' ? $event.offsetY : 0;
        this.togglePopover();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._showOrHideOnMouseOver = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.trigger !== 'mousedown') {
            return;
        }
        this._attachedPopover._offsetPos[0] = this._attachedPopover.horizontalAlign === 'mouse' ? $event.offsetX : 0;
        this._attachedPopover._offsetPos[1] = this._attachedPopover.verticalAlign === 'mouse' ? $event.offsetY : 0;
        this.togglePopover();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._showOrHideRightClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.trigger !== 'rightclick') {
            return true;
        }
        else {
            this._attachedPopover._offsetPos[0] = this._attachedPopover.horizontalAlign === 'mouse' ? $event.offsetX : 0;
            this._attachedPopover._offsetPos[1] = this._attachedPopover.verticalAlign === 'mouse' ? $event.offsetY : 0;
            this.togglePopover();
            return false;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._showOnHover = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.trigger !== 'hover') {
            return;
        }
        this._attachedPopover._offsetPos[0] = this._attachedPopover.horizontalAlign === 'mouse' ? $event.offsetX : 0;
        this._attachedPopover._offsetPos[1] = this._attachedPopover.verticalAlign === 'mouse' ? $event.offsetY : 0;
        this.openPopover();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._hideOnLeave = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.trigger !== 'hover') {
            return;
        }
        this.closePopover();
    };
    /** Handle keyboard navigation of a hcMenu using the arrow or tab keys */
    /**
     * Handle keyboard navigation of a hcMenu using the arrow or tab keys
     * @param {?} event
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._keyEvent = /**
     * Handle keyboard navigation of a hcMenu using the arrow or tab keys
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.attachedPopover.isOpen() && this.attachedPopover._menuItems.length > 0 && !this.attachedPopover._subMenuOpen) {
            if (event.keyCode === KEY_CODE.UP_ARROW || (event.keyCode === KEY_CODE.TAB && event.shiftKey)) {
                event.stopPropagation();
                event.preventDefault();
                this.attachedPopover._keyFocus(false);
            }
            else if (event.keyCode === KEY_CODE.DOWN_ARROW || (event.keyCode === KEY_CODE.TAB && !event.shiftKey)) {
                event.stopPropagation();
                event.preventDefault();
                this.attachedPopover._keyFocus(true);
            }
            else if (this.attachedPopover.parent && this.attachedPopover.parent.isOpen() && event.keyCode === KEY_CODE.LEFT_ARROW) {
                event.stopPropagation();
                event.preventDefault();
                this.closePopover();
            }
        }
        if (this._hasSubmenu && this._elementRef.nativeElement === document.activeElement && event.keyCode === KEY_CODE.RIGHT_ARROW) {
            event.stopPropagation();
            event.preventDefault();
            this.openPopover();
            this.attachedPopover._keyFocus(true);
        }
    };
    /** Gets whether the popover is presently open. */
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype.isPopoverOpen = /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    function () {
        return this._anchoring.isPopoverOpen();
    };
    /** Toggles the popover between the open and closed states. */
    /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype.togglePopover = /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    function () {
        this._anchoring.togglePopover();
    };
    /** Opens the popover. */
    /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype.openPopover = /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        this._anchoring.openPopover(options);
    };
    /** Closes the popover. */
    /**
     * Closes the popover.
     * @param {?=} value
     * @param {?=} neighborSubMenusAreOpen
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype.closePopover = /**
     * Closes the popover.
     * @param {?=} value
     * @param {?=} neighborSubMenusAreOpen
     * @return {?}
     */
    function (value, neighborSubMenusAreOpen) {
        if (neighborSubMenusAreOpen === void 0) { neighborSubMenusAreOpen = false; }
        this._anchoring.closePopover(value, neighborSubMenusAreOpen);
    };
    /** Realign the popover to the anchor. */
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype.realignPopover = /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    function () {
        this._anchoring.realignPopoverToAnchor();
    };
    /** Get a reference to the anchor element. */
    /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype.getElement = /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    function () {
        return this._elementRef;
    };
    /** Throws an error if the popover instance is not provided. */
    /**
     * Throws an error if the popover instance is not provided.
     * @private
     * @param {?} popover
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._validateAttachedPopover = /**
     * Throws an error if the popover instance is not provided.
     * @private
     * @param {?} popover
     * @return {?}
     */
    function (popover) {
        if (!popover || !(popover instanceof HcPopComponent)) {
            throw getInvalidPopoverError();
        }
    };
    /** Throws an error if the trigger is not a valid HcPopoverTrigger. */
    /**
     * Throws an error if the trigger is not a valid HcPopoverTrigger.
     * @private
     * @param {?} trig
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._validateTrigger = /**
     * Throws an error if the trigger is not a valid HcPopoverTrigger.
     * @private
     * @param {?} trig
     * @return {?}
     */
    function (trig) {
        if (VALID_TRIGGER.indexOf(trig) === -1) {
            throw getInvalidTriggerError(trig);
        }
    };
    /** Dispatch a notification to the notification service, if possible. */
    /**
     * Dispatch a notification to the notification service, if possible.
     * @private
     * @param {?} notification
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._dispatchConfigNotification = /**
     * Dispatch a notification to the notification service, if possible.
     * @private
     * @param {?} notification
     * @return {?}
     */
    function (notification) {
        if (this._notifications) {
            this._notifications.dispatch(notification);
        }
    };
    /**
     * @private
     * @return {?}
     */
    HcPopoverAnchorDirective.prototype._setupKeyboardEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var notifier = {
            isOpen: false,
            nativeElement: this._elementRef.nativeElement,
            hasSubmenu: (/**
             * @return {?}
             */
            function () { return _this._hasSubmenu; }),
            onKeyDown: (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this._keyEvent(event); })
        };
        this.popoverClosed.asObservable().subscribe((/**
         * @return {?}
         */
        function () { return (notifier.isOpen = false); }));
        this.popoverOpened.asObservable().subscribe((/**
         * @return {?}
         */
        function () { return (notifier.isOpen = true); }));
        this._accessibility.registerNotifier(notifier);
    };
    HcPopoverAnchorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[hcPop]',
                    exportAs: 'hcPopAnchor',
                    providers: [HcPopoverAnchoringService]
                },] }
    ];
    /** @nocollapse */
    HcPopoverAnchorDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: HcPopoverAnchoringService },
        { type: HcPopoverAccessibilityService }
    ]; };
    HcPopoverAnchorDirective.propDecorators = {
        attachedPopover: [{ type: Input, args: ['hcPop',] }],
        trigger: [{ type: Input }],
        context: [{ type: Input }],
        _hasSubmenu: [{ type: HostBinding, args: ['class.hc-menu-item-submenu',] }],
        popoverOpened: [{ type: Output }],
        popoverClosed: [{ type: Output }],
        _showOrHideOnClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        _showOrHideOnMouseOver: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
        _showOrHideRightClick: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],
        _showOnHover: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
        _hideOnLeave: [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['touchcancel', ['$event'],] }, { type: HostListener, args: ['mouseleave', ['$event'],] }]
    };
    return HcPopoverAnchorDirective;
}());
export { HcPopoverAnchorDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._attachedPopover;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._trigger;
    /** @type {?} */
    HcPopoverAnchorDirective.prototype._hasSubmenu;
    /**
     * Emits when the popover is opened.
     * @type {?}
     */
    HcPopoverAnchorDirective.prototype.popoverOpened;
    /**
     * Emits when the popover is closed.
     * @type {?}
     */
    HcPopoverAnchorDirective.prototype.popoverClosed;
    /**
     * Instance of notification service. Will be undefined until attached to a popover.
     * @type {?}
     */
    HcPopoverAnchorDirective.prototype._notifications;
    /**
     * Emits when the directive is destroyed.
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._onDestroy;
    /** @type {?} */
    HcPopoverAnchorDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._viewContainerRef;
    /** @type {?} */
    HcPopoverAnchorDirective.prototype._anchoring;
    /**
     * @type {?}
     * @private
     */
    HcPopoverAnchorDirective.prototype._accessibility;
}
//# sourceMappingURL=data:application/json;base64,