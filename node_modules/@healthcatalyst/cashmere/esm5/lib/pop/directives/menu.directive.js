/**
 * @fileoverview added by tsickle
 * Generated from: lib/pop/directives/menu.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, ContentChildren, QueryList } from '@angular/core';
import { HcPopoverAnchorDirective } from './popover-anchor.directive';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * The `hcMenu` directive provides a standard way of displaying a series of selectable elements in a popover.
 */
var MenuDirective = /** @class */ (function () {
    function MenuDirective() {
        this._hostClass = true;
        this.unsubscribe$ = new Subject();
    }
    /**
     * @return {?}
     */
    MenuDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._subMenus.forEach((/**
         * @param {?} anchor
         * @return {?}
         */
        function (anchor) {
            anchor._hasSubmenu = true;
            // Subscribe to submenu open events so we can close any other submenus currently open
            anchor.popoverOpened.pipe(takeUntil(_this.unsubscribe$)).subscribe((/**
             * @return {?}
             */
            function () {
                _this._subMenus.forEach((/**
                 * @param {?} sub
                 * @return {?}
                 */
                function (sub) {
                    if (sub !== anchor && sub.attachedPopover.isOpen()) {
                        sub.attachedPopover._parentCloseBlock = true;
                        sub.attachedPopover._restoreFocusOverride = false;
                        sub.closePopover({}, true);
                        sub.attachedPopover._restoreFocusOverride = true;
                        /** @type {?} */
                        var closeSub_1 = sub.attachedPopover.afterClose.subscribe((/**
                         * @return {?}
                         */
                        function () {
                            sub.attachedPopover._parentCloseBlock = false;
                            closeSub_1.unsubscribe();
                        }));
                    }
                }));
            }));
        }));
    };
    /**
     * @return {?}
     */
    MenuDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    MenuDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[hcMenu]'
                },] }
    ];
    MenuDirective.propDecorators = {
        _hostClass: [{ type: HostBinding, args: ['class.hc-menu-panel',] }],
        _subMenus: [{ type: ContentChildren, args: [HcPopoverAnchorDirective,] }]
    };
    return MenuDirective;
}());
export { MenuDirective };
if (false) {
    /** @type {?} */
    MenuDirective.prototype._hostClass;
    /** @type {?} */
    MenuDirective.prototype._subMenus;
    /**
     * @type {?}
     * @private
     */
    MenuDirective.prototype.unsubscribe$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcG9wL2RpcmVjdGl2ZXMvbWVudS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUE4QixNQUFNLGVBQWUsQ0FBQztBQUM5RyxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUMsT0FBTyxFQUFlLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUd6QztJQUFBO1FBS0ksZUFBVSxHQUFHLElBQUksQ0FBQztRQUtWLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQTJCL0MsQ0FBQzs7OztJQXpCRywwQ0FBa0I7OztJQUFsQjtRQUFBLGlCQW1CQztRQWxCRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLE1BQWdDO1lBQ3BELE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1lBQzFCLHFGQUFxRjtZQUNyRixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUzs7O1lBQUM7Z0JBQzlELEtBQUksQ0FBQyxTQUFTLENBQUMsT0FBTzs7OztnQkFBQyxVQUFDLEdBQTZCO29CQUNqRCxJQUFJLEdBQUcsS0FBSyxNQUFNLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsRUFBRTt3QkFDaEQsR0FBRyxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7d0JBQzdDLEdBQUcsQ0FBQyxlQUFlLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO3dCQUNsRCxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQzt3QkFDM0IsR0FBRyxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7OzRCQUM3QyxVQUFRLEdBQWlCLEdBQUcsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFNBQVM7Ozt3QkFBQzs0QkFDbEUsR0FBRyxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7NEJBQzlDLFVBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQzt3QkFDM0IsQ0FBQyxFQUFDO3FCQUNMO2dCQUNMLENBQUMsRUFBQyxDQUFDO1lBQ1AsQ0FBQyxFQUFDLENBQUM7UUFDUCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxtQ0FBVzs7O0lBQVg7UUFDSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakMsQ0FBQzs7Z0JBcENKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsVUFBVTtpQkFDdkI7Ozs2QkFFSSxXQUFXLFNBQUMscUJBQXFCOzRCQUdqQyxlQUFlLFNBQUMsd0JBQXdCOztJQThCN0Msb0JBQUM7Q0FBQSxBQXJDRCxJQXFDQztTQWxDWSxhQUFhOzs7SUFDdEIsbUNBQ2tCOztJQUVsQixrQ0FDK0M7Ozs7O0lBRS9DLHFDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0hjUG9wb3ZlckFuY2hvckRpcmVjdGl2ZX0gZnJvbSAnLi9wb3BvdmVyLWFuY2hvci5kaXJlY3RpdmUnO1xuaW1wb3J0IHtTdWJqZWN0LCBTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqIFRoZSBgaGNNZW51YCBkaXJlY3RpdmUgcHJvdmlkZXMgYSBzdGFuZGFyZCB3YXkgb2YgZGlzcGxheWluZyBhIHNlcmllcyBvZiBzZWxlY3RhYmxlIGVsZW1lbnRzIGluIGEgcG9wb3Zlci4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2hjTWVudV0nXG59KVxuZXhwb3J0IGNsYXNzIE1lbnVEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaGMtbWVudS1wYW5lbCcpXG4gICAgX2hvc3RDbGFzcyA9IHRydWU7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKEhjUG9wb3ZlckFuY2hvckRpcmVjdGl2ZSlcbiAgICBfc3ViTWVudXM6IFF1ZXJ5TGlzdDxIY1BvcG92ZXJBbmNob3JEaXJlY3RpdmU+O1xuXG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICB0aGlzLl9zdWJNZW51cy5mb3JFYWNoKChhbmNob3I6IEhjUG9wb3ZlckFuY2hvckRpcmVjdGl2ZSkgPT4ge1xuICAgICAgICAgICAgYW5jaG9yLl9oYXNTdWJtZW51ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIFN1YnNjcmliZSB0byBzdWJtZW51IG9wZW4gZXZlbnRzIHNvIHdlIGNhbiBjbG9zZSBhbnkgb3RoZXIgc3VibWVudXMgY3VycmVudGx5IG9wZW5cbiAgICAgICAgICAgIGFuY2hvci5wb3BvdmVyT3BlbmVkLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJNZW51cy5mb3JFYWNoKChzdWI6IEhjUG9wb3ZlckFuY2hvckRpcmVjdGl2ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViICE9PSBhbmNob3IgJiYgc3ViLmF0dGFjaGVkUG9wb3Zlci5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLmF0dGFjaGVkUG9wb3Zlci5fcGFyZW50Q2xvc2VCbG9jayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIuYXR0YWNoZWRQb3BvdmVyLl9yZXN0b3JlRm9jdXNPdmVycmlkZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLmNsb3NlUG9wb3Zlcih7fSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIuYXR0YWNoZWRQb3BvdmVyLl9yZXN0b3JlRm9jdXNPdmVycmlkZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2xvc2VTdWI6IFN1YnNjcmlwdGlvbiA9IHN1Yi5hdHRhY2hlZFBvcG92ZXIuYWZ0ZXJDbG9zZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5hdHRhY2hlZFBvcG92ZXIuX3BhcmVudENsb3NlQmxvY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZVN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xuICAgIH1cbn1cbiJdfQ==