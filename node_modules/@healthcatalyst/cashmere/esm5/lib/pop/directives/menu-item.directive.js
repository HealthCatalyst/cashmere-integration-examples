/**
 * @fileoverview added by tsickle
 * Generated from: lib/pop/directives/menu-item.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, ElementRef, HostListener } from '@angular/core';
/**
 * Use `hcMenuItem` for a selectable item in an hcMenu.
 */
var MenuItemDirective = /** @class */ (function () {
    function MenuItemDirective(ref) {
        this.ref = ref;
        this._hostClass = true;
    }
    // Menu Item uses focus for hover highlighting to sync with keyboard navigation of the menu
    // Menu Item uses focus for hover highlighting to sync with keyboard navigation of the menu
    /**
     * @return {?}
     */
    MenuItemDirective.prototype.focus = 
    // Menu Item uses focus for hover highlighting to sync with keyboard navigation of the menu
    /**
     * @return {?}
     */
    function () {
        this.ref.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    MenuItemDirective.prototype.blur = /**
     * @return {?}
     */
    function () {
        this.ref.nativeElement.blur();
    };
    MenuItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[hcMenuItem], [hcButtonItem]'
                },] }
    ];
    /** @nocollapse */
    MenuItemDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MenuItemDirective.propDecorators = {
        _hostClass: [{ type: HostBinding, args: ['class.hc-menu-item',] }],
        focus: [{ type: HostListener, args: ['mouseenter',] }],
        blur: [{ type: HostListener, args: ['touchend',] }, { type: HostListener, args: ['touchcancel',] }, { type: HostListener, args: ['mouseleave',] }]
    };
    return MenuItemDirective;
}());
export { MenuItemDirective };
if (false) {
    /** @type {?} */
    MenuItemDirective.prototype._hostClass;
    /** @type {?} */
    MenuItemDirective.prototype.ref;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1pdGVtLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9wb3AvZGlyZWN0aXZlcy9tZW51LWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQzs7OztBQUcvRTtJQW9CSSwyQkFBbUIsR0FBZTtRQUFmLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFmbEMsZUFBVSxHQUFHLElBQUksQ0FBQztJQWVtQixDQUFDO0lBYnRDLDJGQUEyRjs7Ozs7SUFFM0YsaUNBQUs7Ozs7O0lBREw7UUFFSSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7O0lBS0QsZ0NBQUk7OztJQUhKO1FBSUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7Z0JBbEJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsOEJBQThCO2lCQUMzQzs7OztnQkFMK0IsVUFBVTs7OzZCQU9yQyxXQUFXLFNBQUMsb0JBQW9CO3dCQUloQyxZQUFZLFNBQUMsWUFBWTt1QkFLekIsWUFBWSxTQUFDLFVBQVUsY0FDdkIsWUFBWSxTQUFDLGFBQWEsY0FDMUIsWUFBWSxTQUFDLFlBQVk7O0lBTTlCLHdCQUFDO0NBQUEsQUFyQkQsSUFxQkM7U0FsQlksaUJBQWlCOzs7SUFDMUIsdUNBQ2tCOztJQWVOLGdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqIFVzZSBgaGNNZW51SXRlbWAgZm9yIGEgc2VsZWN0YWJsZSBpdGVtIGluIGFuIGhjTWVudS4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2hjTWVudUl0ZW1dLCBbaGNCdXR0b25JdGVtXSdcbn0pXG5leHBvcnQgY2xhc3MgTWVudUl0ZW1EaXJlY3RpdmUge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaGMtbWVudS1pdGVtJylcbiAgICBfaG9zdENsYXNzID0gdHJ1ZTtcblxuICAgIC8vIE1lbnUgSXRlbSB1c2VzIGZvY3VzIGZvciBob3ZlciBoaWdobGlnaHRpbmcgdG8gc3luYyB3aXRoIGtleWJvYXJkIG5hdmlnYXRpb24gb2YgdGhlIG1lbnVcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJylcbiAgICBmb2N1cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3RvdWNoZW5kJylcbiAgICBASG9zdExpc3RlbmVyKCd0b3VjaGNhbmNlbCcpXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScpXG4gICAgYmx1cigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHVibGljIHJlZjogRWxlbWVudFJlZikge31cbn1cbiJdfQ==