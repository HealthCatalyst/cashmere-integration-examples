/**
 * @fileoverview added by tsickle
 * Generated from: lib/checkbox/checkbox-required.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/* tslint:disable:directive-selector */
import { Directive, forwardRef, HostBinding } from '@angular/core';
import { CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';
/** @type {?} */
export var HC_CHECKBOX_REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return HcCheckboxRequiredValidatorDirective; })),
    multi: true
};
/**
 * \@docs-private
 */
var HcCheckboxRequiredValidatorDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HcCheckboxRequiredValidatorDirective, _super);
    function HcCheckboxRequiredValidatorDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(HcCheckboxRequiredValidatorDirective.prototype, "isRequired", {
        get: /**
         * @return {?}
         */
        function () {
            return this.required ? '' : null;
        },
        enumerable: true,
        configurable: true
    });
    HcCheckboxRequiredValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: "hc-checkbox[required][formControlName],\n             hc-checkbox[required][formControl],hc-checkbox[required][ngModel]",
                    providers: [HC_CHECKBOX_REQUIRED_VALIDATOR]
                },] }
    ];
    HcCheckboxRequiredValidatorDirective.propDecorators = {
        isRequired: [{ type: HostBinding, args: ['attr.required',] }]
    };
    return HcCheckboxRequiredValidatorDirective;
}(CheckboxRequiredValidator));
export { HcCheckboxRequiredValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtcmVxdWlyZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL2NoZWNrYm94L2NoZWNrYm94LXJlcXVpcmVkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyx5QkFBeUIsRUFBRSxhQUFhLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFeEUsTUFBTSxLQUFPLDhCQUE4QixHQUFhO0lBQ3BELE9BQU8sRUFBRSxhQUFhO0lBQ3RCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxjQUFNLE9BQUEsb0NBQW9DLEVBQXBDLENBQW9DLEVBQUM7SUFDbkUsS0FBSyxFQUFFLElBQUk7Q0FDZDs7OztBQUdEO0lBSzBELGdFQUF5QjtJQUxuRjs7SUFVQSxDQUFDO0lBSkcsc0JBQ0ksNERBQVU7Ozs7UUFEZDtZQUVJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDckMsQ0FBQzs7O09BQUE7O2dCQVRKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUseUhBQ2lFO29CQUMzRSxTQUFTLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztpQkFDOUM7Ozs2QkFFSSxXQUFXLFNBQUMsZUFBZTs7SUFJaEMsMkNBQUM7Q0FBQSxBQVZELENBSzBELHlCQUF5QixHQUtsRjtTQUxZLG9DQUFvQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuXG5pbXBvcnQge0RpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgSG9zdEJpbmRpbmcsIFByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q2hlY2tib3hSZXF1aXJlZFZhbGlkYXRvciwgTkdfVkFMSURBVE9SU30gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5leHBvcnQgY29uc3QgSENfQ0hFQ0tCT1hfUkVRVUlSRURfVkFMSURBVE9SOiBQcm92aWRlciA9IHtcbiAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEhjQ2hlY2tib3hSZXF1aXJlZFZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgbXVsdGk6IHRydWVcbn07XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogYGhjLWNoZWNrYm94W3JlcXVpcmVkXVtmb3JtQ29udHJvbE5hbWVdLFxuICAgICAgICAgICAgIGhjLWNoZWNrYm94W3JlcXVpcmVkXVtmb3JtQ29udHJvbF0saGMtY2hlY2tib3hbcmVxdWlyZWRdW25nTW9kZWxdYCxcbiAgICBwcm92aWRlcnM6IFtIQ19DSEVDS0JPWF9SRVFVSVJFRF9WQUxJREFUT1JdXG59KVxuZXhwb3J0IGNsYXNzIEhjQ2hlY2tib3hSZXF1aXJlZFZhbGlkYXRvckRpcmVjdGl2ZSBleHRlbmRzIENoZWNrYm94UmVxdWlyZWRWYWxpZGF0b3Ige1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5yZXF1aXJlZCcpXG4gICAgZ2V0IGlzUmVxdWlyZWQoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVpcmVkID8gJycgOiBudWxsO1xuICAgIH1cbn1cbiJdfQ==