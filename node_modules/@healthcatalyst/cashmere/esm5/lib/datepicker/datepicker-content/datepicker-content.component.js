/**
 * @fileoverview added by tsickle
 * Generated from: lib/datepicker/datepicker-content/datepicker-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild } from '@angular/core';
import { HcDatepickerAnimations } from '../datepicker-animations';
import { CalendarComponent } from '../calendar/calendar.component';
/**
 * Component used as the content for the datepicker popup. We use this instead of using
 * hcCalendar directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the popup that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 * \@docs-private
 */
var DatepickerContentComponent = /** @class */ (function () {
    function DatepickerContentComponent() {
    }
    /**
     * @return {?}
     */
    DatepickerContentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._calendar.focusActiveCell();
    };
    /** Close the datepicker automatically on selection only if in date mode */
    /**
     * Close the datepicker automatically on selection only if in date mode
     * @return {?}
     */
    DatepickerContentComponent.prototype.autoClose = /**
     * Close the datepicker automatically on selection only if in date mode
     * @return {?}
     */
    function () {
        if (this.datepicker.mode === 'date') {
            this.datepicker.close();
        }
    };
    DatepickerContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-datepicker-content',
                    template: "<hc-calendar cdkTrapFocus\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [mode]=\"datepicker.mode\"\n    [hourCycle]=\"datepicker.hourCycle\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker._minDate\"\n    [maxDate]=\"datepicker._maxDate\"\n    [dateFilter]=\"datepicker._dateFilter\"\n    [headerComponent]=\"datepicker.calendarHeaderComponent\"\n    [selected]=\"datepicker._selected\"\n    [dateClass]=\"datepicker.dateClass\"\n    [@fadeInCalendar]=\"'enter'\"\n    (selectedChange)=\"datepicker.select($event)\"\n    (yearSelected)=\"datepicker._selectYear($event)\"\n    (monthSelected)=\"datepicker._selectMonth($event)\"\n    (_userSelection)=\"autoClose()\">\n</hc-calendar>\n",
                    // tslint:disable-next-line:no-host-metadata-property
                    host: {
                        class: 'hc-datepicker-content',
                        '[@transformPanel]': '"enter"'
                    },
                    animations: [HcDatepickerAnimations.transformPanel, HcDatepickerAnimations.fadeInCalendar],
                    exportAs: 'hcDatepickerContent',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    DatepickerContentComponent.propDecorators = {
        _calendar: [{ type: ViewChild, args: [CalendarComponent, { static: false },] }]
    };
    return DatepickerContentComponent;
}());
export { DatepickerContentComponent };
if (false) {
    /**
     * Reference to the internal calendar component.
     * @type {?}
     */
    DatepickerContentComponent.prototype._calendar;
    /**
     * Reference to the datepicker that created the overlay.
     * @type {?}
     */
    DatepickerContentComponent.prototype.datepicker;
    /**
     * Whether the datepicker is above or below the input.
     * @type {?}
     */
    DatepickerContentComponent.prototype._isAbove;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9kYXRlcGlja2VyL2RhdGVwaWNrZXItY29udGVudC9kYXRlcGlja2VyLWNvbnRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSx1QkFBdUIsRUFBaUIsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzlHLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7OztBQVVqRTtJQUFBO0lBa0NBLENBQUM7Ozs7SUFWRyxvREFBZTs7O0lBQWY7UUFDSSxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCwyRUFBMkU7Ozs7O0lBQzNFLDhDQUFTOzs7O0lBQVQ7UUFDSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtZQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzNCO0lBQ0wsQ0FBQzs7Z0JBakNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxneEJBQWtEOztvQkFFbEQsSUFBSSxFQUFFO3dCQUNGLEtBQUssRUFBRSx1QkFBdUI7d0JBQzlCLG1CQUFtQixFQUFFLFNBQVM7cUJBQ2pDO29CQUNELFVBQVUsRUFBRSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxjQUFjLENBQUM7b0JBQzFGLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDbEQ7Ozs0QkFHSSxTQUFTLFNBQUMsaUJBQWlCLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDOztJQW1CakQsaUNBQUM7Q0FBQSxBQWxDRCxJQWtDQztTQXJCWSwwQkFBMEI7Ozs7OztJQUVuQywrQ0FDNkI7Ozs7O0lBRzdCLGdEQUFnQzs7Ozs7SUFHaEMsOENBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQWZ0ZXJWaWV3SW5pdCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SGNEYXRlcGlja2VyQW5pbWF0aW9uc30gZnJvbSAnLi4vZGF0ZXBpY2tlci1hbmltYXRpb25zJztcbmltcG9ydCB7Q2FsZW5kYXJDb21wb25lbnR9IGZyb20gJy4uL2NhbGVuZGFyL2NhbGVuZGFyLmNvbXBvbmVudCc7XG5pbXBvcnQge0RhdGVwaWNrZXJDb21wb25lbnR9IGZyb20gJy4uL2RhdGVwaWNrZXIuY29tcG9uZW50JztcblxuLyoqXG4gKiBDb21wb25lbnQgdXNlZCBhcyB0aGUgY29udGVudCBmb3IgdGhlIGRhdGVwaWNrZXIgcG9wdXAuIFdlIHVzZSB0aGlzIGluc3RlYWQgb2YgdXNpbmdcbiAqIGhjQ2FsZW5kYXIgZGlyZWN0bHkgYXMgdGhlIGNvbnRlbnQgc28gd2UgY2FuIGNvbnRyb2wgdGhlIGluaXRpYWwgZm9jdXMuIFRoaXMgYWxzbyBnaXZlcyB1cyBhXG4gKiBwbGFjZSB0byBwdXQgYWRkaXRpb25hbCBmZWF0dXJlcyBvZiB0aGUgcG9wdXAgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIGNhbGVuZGFyIGl0c2VsZiBpbiB0aGVcbiAqIGZ1dHVyZS4gKGUuZy4gY29uZmlybWF0aW9uIGJ1dHRvbnMpLlxuICogQGRvY3MtcHJpdmF0ZVxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2hjLWRhdGVwaWNrZXItY29udGVudCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RhdGVwaWNrZXItY29udGVudC5jb21wb25lbnQuaHRtbCcsXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWhvc3QtbWV0YWRhdGEtcHJvcGVydHlcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAnaGMtZGF0ZXBpY2tlci1jb250ZW50JyxcbiAgICAgICAgJ1tAdHJhbnNmb3JtUGFuZWxdJzogJ1wiZW50ZXJcIidcbiAgICB9LFxuICAgIGFuaW1hdGlvbnM6IFtIY0RhdGVwaWNrZXJBbmltYXRpb25zLnRyYW5zZm9ybVBhbmVsLCBIY0RhdGVwaWNrZXJBbmltYXRpb25zLmZhZGVJbkNhbGVuZGFyXSxcbiAgICBleHBvcnRBczogJ2hjRGF0ZXBpY2tlckNvbnRlbnQnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgRGF0ZXBpY2tlckNvbnRlbnRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICAvKiogUmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBjYWxlbmRhciBjb21wb25lbnQuICovXG4gICAgQFZpZXdDaGlsZChDYWxlbmRhckNvbXBvbmVudCwge3N0YXRpYzogZmFsc2V9KVxuICAgIF9jYWxlbmRhcjogQ2FsZW5kYXJDb21wb25lbnQ7XG5cbiAgICAvKiogUmVmZXJlbmNlIHRvIHRoZSBkYXRlcGlja2VyIHRoYXQgY3JlYXRlZCB0aGUgb3ZlcmxheS4gKi9cbiAgICBkYXRlcGlja2VyOiBEYXRlcGlja2VyQ29tcG9uZW50O1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIGRhdGVwaWNrZXIgaXMgYWJvdmUgb3IgYmVsb3cgdGhlIGlucHV0LiAqL1xuICAgIF9pc0Fib3ZlOiBib29sZWFuO1xuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLl9jYWxlbmRhci5mb2N1c0FjdGl2ZUNlbGwoKTtcbiAgICB9XG5cbiAgICAvKiogQ2xvc2UgdGhlIGRhdGVwaWNrZXIgYXV0b21hdGljYWxseSBvbiBzZWxlY3Rpb24gb25seSBpZiBpbiBkYXRlIG1vZGUgKi9cbiAgICBhdXRvQ2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGVwaWNrZXIubW9kZSA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGVwaWNrZXIuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==