/**
 * @fileoverview added by tsickle
 * Generated from: lib/datepicker/calendar/calendar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, Inject, Optional, ChangeDetectorRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { HcDatepickerIntl } from '../datepicker-intl';
import { ComponentPortal } from '@angular/cdk/portal';
import { createMissingDateImplError } from '../datetime/datepicker-errors';
import { HC_DATE_FORMATS } from '../datetime/date-formats';
import { DateAdapter } from '../datetime/date-adapter';
import { Subject } from 'rxjs';
import { yearsPerPage, MultiYearViewComponent } from '../multi-year-view/multi-year-view.component';
import { MonthViewComponent } from '../month-view/month-view.component';
import { YearViewComponent } from '../year-view/year-view.component';
import { FormControl } from '@angular/forms';
/**
 * Default header for hcCalendar
 */
var CalendarHeaderComponent = /** @class */ (function () {
    function CalendarHeaderComponent(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {
        this._intl = _intl;
        this.calendar = calendar;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this.calendar.stateChanges.subscribe((/**
         * @return {?}
         */
        function () { return changeDetectorRef.markForCheck(); }));
    }
    Object.defineProperty(CalendarHeaderComponent.prototype, "monthButtonText", {
        /** The label for the currently visible month */
        get: /**
         * The label for the currently visible month
         * @return {?}
         */
        function () {
            return this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.calendar.activeDate)];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarHeaderComponent.prototype, "periodButtonText", {
        /** The label for the current calendar view. */
        get: /**
         * The label for the current calendar view.
         * @return {?}
         */
        function () {
            return this._dateAdapter.getYearName(this.calendar.activeDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarHeaderComponent.prototype, "periodButtonLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this.calendar.currentView === 'month' ? this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarHeaderComponent.prototype, "_todayButtonLabel", {
        /** The label for the jump to today button */
        get: /**
         * The label for the jump to today button
         * @return {?}
         */
        function () {
            return this._intl.switchToTodayLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarHeaderComponent.prototype, "monthButtonLabel", {
        /** The label for the currently displayed month */
        get: /**
         * The label for the currently displayed month
         * @return {?}
         */
        function () {
            return this._intl.currentMonthLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarHeaderComponent.prototype, "prevButtonLabel", {
        /** The label for the the previous button. */
        get: /**
         * The label for the the previous button.
         * @return {?}
         */
        function () {
            return {
                month: this._intl.prevMonthLabel,
                year: this._intl.prevYearLabel,
                'multi-year': this._intl.prevMultiYearLabel
            }[this.calendar.currentView];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarHeaderComponent.prototype, "nextButtonLabel", {
        /** The label for the the next button. */
        get: /**
         * The label for the the next button.
         * @return {?}
         */
        function () {
            return {
                month: this._intl.nextMonthLabel,
                year: this._intl.nextYearLabel,
                'multi-year': this._intl.nextMultiYearLabel
            }[this.calendar.currentView];
        },
        enumerable: true,
        configurable: true
    });
    /** Handles user clicks on the period label. */
    /**
     * Handles user clicks on the period label.
     * @return {?}
     */
    CalendarHeaderComponent.prototype.currentPeriodClicked = /**
     * Handles user clicks on the period label.
     * @return {?}
     */
    function () {
        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';
    };
    /** Handles user clicks on the previous button. */
    /**
     * Handles user clicks on the previous button.
     * @return {?}
     */
    CalendarHeaderComponent.prototype.previousClicked = /**
     * Handles user clicks on the previous button.
     * @return {?}
     */
    function () {
        this.calendar.activeDate =
            this.calendar.currentView === 'month'
                ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)
                : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage);
    };
    /** Handles user clicks on the next button. */
    /**
     * Handles user clicks on the next button.
     * @return {?}
     */
    CalendarHeaderComponent.prototype.nextClicked = /**
     * Handles user clicks on the next button.
     * @return {?}
     */
    function () {
        this.calendar.activeDate =
            this.calendar.currentView === 'month'
                ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)
                : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === 'year' ? 1 : yearsPerPage);
    };
    /** Handles clicks on the jump to today button */
    /**
     * Handles clicks on the jump to today button
     * @return {?}
     */
    CalendarHeaderComponent.prototype._todayClicked = /**
     * Handles clicks on the jump to today button
     * @return {?}
     */
    function () {
        this.calendar.activeDate = this._dateAdapter.today();
    };
    /** Whether the previous period button is enabled. */
    /**
     * Whether the previous period button is enabled.
     * @return {?}
     */
    CalendarHeaderComponent.prototype.previousEnabled = /**
     * Whether the previous period button is enabled.
     * @return {?}
     */
    function () {
        if (!this.calendar.minDate) {
            return true;
        }
        return !this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate);
    };
    /** Whether the next period button is enabled. */
    /**
     * Whether the next period button is enabled.
     * @return {?}
     */
    CalendarHeaderComponent.prototype.nextEnabled = /**
     * Whether the next period button is enabled.
     * @return {?}
     */
    function () {
        return !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);
    };
    /**
     * @return {?}
     */
    CalendarHeaderComponent.prototype._todayEnabled = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var minDate;
        /** @type {?} */
        var maxDate;
        /** @type {?} */
        var today = new Date(this._dateAdapter.today().toDateString());
        /** Normalize the compare dates to all be on the first day of the month because we are only concerned
         * about whether today falls outside of the month than min or max is in */
        today.setDate(1);
        if (this.calendar.minDate) {
            minDate = new Date(this.calendar.minDate.toDateString());
            minDate.setDate(1);
        }
        if (this.calendar.maxDate) {
            maxDate = new Date(this.calendar.maxDate.toDateString());
            maxDate.setDate(1);
        }
        return ((!minDate || this._dateAdapter.compareDate(minDate, today) < 1) &&
            (!maxDate || this._dateAdapter.compareDate(maxDate, today) > -1));
    };
    /** Whether the two dates represent the same view in the current view mode (month or year). */
    /**
     * Whether the two dates represent the same view in the current view mode (month or year).
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    CalendarHeaderComponent.prototype._isSameView = /**
     * Whether the two dates represent the same view in the current view mode (month or year).
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        if (this.calendar.currentView === 'month') {
            return (this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2) &&
                this._dateAdapter.getMonth(date1) === this._dateAdapter.getMonth(date2));
        }
        if (this.calendar.currentView === 'year') {
            return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);
        }
        // Otherwise we are in 'multi-year' view.
        return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) === Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);
    };
    CalendarHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-calendar-header',
                    template: "<div *ngIf=\"calendar.mode!=='time'\" class=\"hc-calendar-header\">\n    <div class=\"hc-calendar-controls\">\n        <button\n            hc-button\n            buttonStyle=\"link\"\n            type=\"button\"\n            class=\"hc-calendar-today-button hc-calendar-control-button\"\n            (click)=\"_todayClicked()\"\n            [disabled]=\"!_todayEnabled()\"\n            [attr.aria-label]=\"_todayButtonLabel\"\n            [title]=\"_todayButtonLabel\"\n        >\n            Today\n        </button>\n\n        <span>\n            <button\n                hc-button\n                buttonStyle=\"link\"\n                type=\"button\"\n                class=\"hc-calendar-previous-button hc-calendar-control-button\"\n                [disabled]=\"!previousEnabled()\"\n                (click)=\"previousClicked()\"\n                [attr.aria-label]=\"prevButtonLabel\"\n                [title]=\"prevButtonLabel\"\n            ></button>\n            <span class=\"hc-calendar-month-label\">\n                {{ monthButtonText }}\n            </span>\n            <button\n                hc-button\n                buttonStyle=\"link\"\n                type=\"button\"\n                class=\"hc-calendar-next-button hc-calendar-control-button\"\n                [disabled]=\"!nextEnabled()\"\n                (click)=\"nextClicked()\"\n                [attr.aria-label]=\"nextButtonLabel\"\n                [title]=\"nextButtonLabel\"\n            ></button>\n        </span>\n\n        <ng-content></ng-content>\n\n        <button\n            hc-button\n            buttonStyle=\"link\"\n            type=\"button\"\n            class=\"hc-calendar-period-button hc-calendar-control-button\"\n            (click)=\"currentPeriodClicked()\"\n            [attr.aria-label]=\"periodButtonLabel\"\n            [title]=\"periodButtonLabel\"\n        >\n            {{ periodButtonText }}\n            <div class=\"hc-calendar-dropdown-caret\" [class.hc-calendar-dropdown-caret-invert]=\"calendar.currentView != 'month'\"></div>\n        </button>\n    </div>\n</div>\n",
                    exportAs: 'hcCalendarHeader',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    CalendarHeaderComponent.ctorParameters = function () { return [
        { type: HcDatepickerIntl },
        { type: CalendarComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return CalendarComponent; })),] }] },
        { type: DateAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HC_DATE_FORMATS,] }] },
        { type: ChangeDetectorRef }
    ]; };
    return CalendarHeaderComponent;
}());
export { CalendarHeaderComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CalendarHeaderComponent.prototype._intl;
    /** @type {?} */
    CalendarHeaderComponent.prototype.calendar;
    /**
     * @type {?}
     * @private
     */
    CalendarHeaderComponent.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    CalendarHeaderComponent.prototype._dateFormats;
}
/**
 * A calendar that is used as part of the datepicker.
 * \@docs-private
 */
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {
        var _this = this;
        this._intl = _intl;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * Stores the current am/pm value
         */
        this._period = new FormControl('am');
        /**
         * Used for scheduling that focus should be moved to the active cell on the next tick.
         * We need to schedule it, rather than do it immediately, because we have to wait
         * for Angular to re-evaluate the view children.
         */
        this._moveFocusOnNextTick = false;
        /**
         * Whether the calendar should be started in month or year view.
         */
        this.startView = 'month';
        /**
         * Whether the calendar should show calendar, time-picker, or both
         */
        this.mode = 'date';
        this._hourCycle = 12;
        /**
         * Emits when the currently selected date changes.
         */
        this.selectedChange = new EventEmitter();
        /**
         * Emits the year chosen in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new EventEmitter();
        /**
         * Emits the month chosen in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new EventEmitter();
        /**
         * Emits when any date is selected.
         */
        this._userSelection = new EventEmitter();
        /**
         * Emits whenever there is a state change that the header may need to respond to.
         */
        this.stateChanges = new Subject();
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('HC_DATE_FORMATS');
        }
        this._intlChanges = _intl.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _changeDetectorRef.markForCheck();
            _this.stateChanges.next();
        }));
    }
    Object.defineProperty(CalendarComponent.prototype, "startAt", {
        /** A date representing the period (month or year) to start the calendar in. */
        get: /**
         * A date representing the period (month or year) to start the calendar in.
         * @return {?}
         */
        function () {
            return this._startAt;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "hourCycle", {
        /** Whether the time picker should display a 12-hour or 24-clock. Accepts 12 or 24. Defaults to 12. */
        get: /**
         * Whether the time picker should display a 12-hour or 24-clock. Accepts 12 or 24. Defaults to 12.
         * @return {?}
         */
        function () {
            return this._hourCycle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (+value === 12 || +value === 24) {
                this._hourCycle = +value;
            }
            else if (value) {
                throw Error('Unsupported hourCycle value: ' + value + '. Accepted values are 12 or 24.');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "selected", {
        /** The currently selected date. */
        get: /**
         * The currently selected date.
         * @return {?}
         */
        function () {
            return this._selected;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            if (this._selected) {
                this._period.setValue(this._selected.getHours() > 11 ? 'pm' : 'am');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "minDate", {
        /** The minimum selectable date. */
        get: /**
         * The minimum selectable date.
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "maxDate", {
        /** The maximum selectable date. */
        get: /**
         * The maximum selectable date.
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "activeDate", {
        /**
         * The current active date. This determines which time period is shown and which date is
         * highlighted when using keyboard navigation.
         */
        get: /**
         * The current active date. This determines which time period is shown and which date is
         * highlighted when using keyboard navigation.
         * @return {?}
         */
        function () {
            return this._clampedActiveDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "currentView", {
        /** Whether the calendar is in month view. */
        get: /**
         * Whether the calendar is in month view.
         * @return {?}
         */
        function () {
            return this._currentView;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._currentView = value;
            this._moveFocusOnNextTick = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "minutes", {
        /** A string containing the value of minutes for the current date */
        get: /**
         * A string containing the value of minutes for the current date
         * @return {?}
         */
        function () {
            if (this.selected) {
                /** @type {?} */
                var minVal = this.selected.getMinutes();
                return minVal < 10 ? '0' + minVal : minVal.toString();
            }
            else {
                return this.selected;
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && !isNaN(+value)) {
                /** @type {?} */
                var tempDate = this.selected ? new Date(this.selected.getTime()) : new Date();
                tempDate.setMinutes(+value);
                this.selectedChange.emit(tempDate);
                this._userSelected();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "hours", {
        /** A string containing the hour for the current date */
        get: /**
         * A string containing the hour for the current date
         * @return {?}
         */
        function () {
            if (this.selected) {
                /** @type {?} */
                var hourVal = this.selected.getHours();
                if (this._hourCycle === 12) {
                    if (hourVal > 11) {
                        return hourVal === 12 ? hourVal.toString() : (hourVal - 12).toString();
                    }
                    else {
                        return hourVal === 0 ? '12' : hourVal.toString();
                    }
                }
                else {
                    return hourVal.toString();
                }
            }
            else {
                return this.selected;
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && !isNaN(+value)) {
                /** @type {?} */
                var hourVal = +value;
                if (this._hourCycle === 12) {
                    if (this._period.value === 'pm' && hourVal !== 12) {
                        hourVal += 12;
                    }
                    else if (this._period.value === 'am' && hourVal === 12) {
                        hourVal = 0;
                    }
                }
                /** @type {?} */
                var tempDate = this.selected ? new Date(this.selected.getTime()) : new Date();
                tempDate.setHours(hourVal);
                this.selectedChange.emit(tempDate);
                this._userSelected();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CalendarComponent.prototype._periodChange = /**
     * @return {?}
     */
    function () {
        if (this.selected) {
            /** @type {?} */
            var tempDate = new Date(this.selected.getTime());
            /** @type {?} */
            var curHours = tempDate.getHours();
            if (this._period.value === 'pm') {
                tempDate.setHours(curHours + 12);
            }
            else {
                tempDate.setHours(curHours - 12);
            }
            this.selectedChange.emit(tempDate);
            this._userSelected();
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || CalendarHeaderComponent);
        this.activeDate = this.startAt || this._dateAdapter.today();
        // Assign to the private property since we don't want to move focus on init.
        this._currentView = this.startView;
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this._moveFocusOnNextTick) {
            this._moveFocusOnNextTick = false;
            this.focusActiveCell();
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._intlChanges.unsubscribe();
        this.stateChanges.complete();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CalendarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var change = changes.minDate || changes.maxDate || changes.dateFilter;
        if (change && !change.firstChange) {
            /** @type {?} */
            var view = this._getCurrentViewComponent();
            if (view) {
                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are
                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.
                this._changeDetectorRef.detectChanges();
                view._init();
            }
        }
        this.stateChanges.next();
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.focusActiveCell = /**
     * @return {?}
     */
    function () {
        if (this.mode !== 'time') {
            this._getCurrentViewComponent()._focusActiveCell();
        }
    };
    /** Updates today's date after an update of the active date */
    /**
     * Updates today's date after an update of the active date
     * @return {?}
     */
    CalendarComponent.prototype.updateTodaysDate = /**
     * Updates today's date after an update of the active date
     * @return {?}
     */
    function () {
        /** @type {?} */
        var view = this.currentView === 'month' ? this.monthView : this.currentView === 'year' ? this.yearView : this.multiYearView;
        view.ngAfterContentInit();
    };
    /** Handles date selection in the month view. */
    /**
     * Handles date selection in the month view.
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype._dateSelected = /**
     * Handles date selection in the month view.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (!this._dateAdapter.sameDate(date, this.selected)) {
            this.selectedChange.emit(date);
        }
    };
    /** Handles year selection in the multiyear view. */
    /**
     * Handles year selection in the multiyear view.
     * @param {?} normalizedYear
     * @return {?}
     */
    CalendarComponent.prototype._yearSelectedInMultiYearView = /**
     * Handles year selection in the multiyear view.
     * @param {?} normalizedYear
     * @return {?}
     */
    function (normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    };
    /** Handles month selection in the year view. */
    /**
     * Handles month selection in the year view.
     * @param {?} normalizedMonth
     * @return {?}
     */
    CalendarComponent.prototype._monthSelectedInYearView = /**
     * Handles month selection in the year view.
     * @param {?} normalizedMonth
     * @return {?}
     */
    function (normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype._userSelected = /**
     * @return {?}
     */
    function () {
        this._userSelection.emit();
    };
    /** Handles year/month selection in the multi-year/year views. */
    /**
     * Handles year/month selection in the multi-year/year views.
     * @param {?} date
     * @param {?} view
     * @return {?}
     */
    CalendarComponent.prototype._goToDateInView = /**
     * Handles year/month selection in the multi-year/year views.
     * @param {?} date
     * @param {?} view
     * @return {?}
     */
    function (date, view) {
        this.activeDate = date;
        this.currentView = view;
    };
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    CalendarComponent.prototype._getValidDateOrNull = /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    function (obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    };
    /** Returns the component instance that corresponds to the current calendar view. */
    /**
     * Returns the component instance that corresponds to the current calendar view.
     * @private
     * @return {?}
     */
    CalendarComponent.prototype._getCurrentViewComponent = /**
     * Returns the component instance that corresponds to the current calendar view.
     * @private
     * @return {?}
     */
    function () {
        return this.monthView || this.yearView || this.multiYearView;
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype._hoursUp = /**
     * @return {?}
     */
    function () {
        if (!this.hours) {
            this.hours = this._hourCycle > 12 ? '0' : '1';
        }
        else {
            /** @type {?} */
            var curHour = +this.hours;
            curHour++;
            /** @type {?} */
            var tempCycle = this._hourCycle > 12 ? 23 : 12;
            if (curHour > tempCycle) {
                curHour = tempCycle;
            }
            this.hours = curHour.toString();
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype._hoursDown = /**
     * @return {?}
     */
    function () {
        if (!this.hours) {
            this.hours = this._hourCycle > 12 ? '23' : '12';
        }
        else {
            /** @type {?} */
            var curHour = +this.hours;
            curHour--;
            /** @type {?} */
            var tempCycle = this._hourCycle > 12 ? 0 : 1;
            if (curHour < tempCycle) {
                curHour = tempCycle;
            }
            this.hours = curHour.toString();
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype._minutesUp = /**
     * @return {?}
     */
    function () {
        if (!this.minutes) {
            this.minutes = '00';
        }
        else {
            /** @type {?} */
            var curMin = +this.minutes;
            curMin++;
            if (curMin > 59) {
                curMin = 59;
            }
            this.minutes = curMin.toString();
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype._minutesDown = /**
     * @return {?}
     */
    function () {
        if (!this.minutes) {
            this.minutes = '59';
        }
        else {
            /** @type {?} */
            var curMin = +this.minutes;
            curMin--;
            if (curMin < 1) {
                curMin = 1;
            }
            this.minutes = curMin.toString();
        }
    };
    CalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-calendar',
                    template: "<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\"></ng-template>\n\n<ng-container *ngIf=\"mode !== 'time'\">\n    <div class=\"hc-calendar-content\" [ngSwitch]=\"currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n        <hc-month-view\n            *ngSwitchCase=\"'month'\"\n            [(activeDate)]=\"activeDate\"\n            [selected]=\"selected\"\n            [dateFilter]=\"dateFilter\"\n            [maxDate]=\"maxDate\"\n            [minDate]=\"minDate\"\n            [dateClass]=\"dateClass\"\n            (selectedChange)=\"_dateSelected($event)\"\n            (_userSelection)=\"_userSelected()\"\n        ></hc-month-view>\n\n        <hc-year-view\n            *ngSwitchCase=\"'year'\"\n            [(activeDate)]=\"activeDate\"\n            [selected]=\"selected\"\n            [dateFilter]=\"dateFilter\"\n            [maxDate]=\"maxDate\"\n            [minDate]=\"minDate\"\n            (monthSelected)=\"_monthSelectedInYearView($event)\"\n            (selectedChange)=\"_goToDateInView($event, 'month')\"\n        ></hc-year-view>\n\n        <hc-multi-year-view\n            *ngSwitchCase=\"'multi-year'\"\n            [(activeDate)]=\"activeDate\"\n            [selected]=\"selected\"\n            [dateFilter]=\"dateFilter\"\n            [maxDate]=\"maxDate\"\n            [minDate]=\"minDate\"\n            (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n            (selectedChange)=\"_goToDateInView($event, 'year')\"\n        ></hc-multi-year-view>\n    </div>\n</ng-container>\n\n<div *ngIf=\"mode !== 'date'\" class=\"hc-calendar-time-picker\">\n    <hc-icon class=\"hc-calendar-time-picker-icon\" fontSet=\"fa\" fontIcon=\"fa-clock-o\"></hc-icon>\n\n    <hc-form-field inline=\"true\" class=\"hc-calendar-time-picker-field\">\n        <input\n            hcInput\n            class=\"hc-calendar-time-picker-input\"\n            placeholder=\"hh\"\n            [(ngModel)]=\"hours\"\n            (keydown.arrowup)=\"_hoursUp()\"\n            (keydown.arrowdown)=\"_hoursDown()\"\n        />\n        <span hcSuffix class=\"hc-calendar-time-controls\">\n            <button hc-button buttonStyle=\"minimal\" size=\"sm\" (click)=\"_hoursUp()\" class=\"hc-calendar-time-controls-button\">\n                <hc-icon fontSet=\"fa\" fontIcon=\"fa-caret-up\" hcIconSm class=\"hc-calendar-controls-icon\"></hc-icon>\n            </button>\n            <button hc-button buttonStyle=\"minimal\" size=\"sm\" (click)=\"_hoursDown()\" class=\"hc-calendar-time-controls-button\">\n                <hc-icon fontSet=\"fa\" fontIcon=\"fa-caret-down\" hcIconSm class=\"hc-calendar-controls-icon\"></hc-icon>\n            </button>\n        </span>\n    </hc-form-field>\n\n    <hc-form-field inline=\"true\" class=\"hc-calendar-time-picker-field\">\n        <input\n            hcInput\n            class=\"hc-calendar-time-picker-input\"\n            placeholder=\"mm\"\n            [(ngModel)]=\"minutes\"\n            (keydown.arrowup)=\"_minutesUp()\"\n            (keydown.arrowdown)=\"_minutesDown()\"\n        />\n        <span hcSuffix class=\"hc-calendar-time-controls\">\n            <button hc-button buttonStyle=\"minimal\" size=\"sm\" (click)=\"_minutesUp()\" class=\"hc-calendar-time-controls-button\">\n                <hc-icon fontSet=\"fa\" fontIcon=\"fa-caret-up\" hcIconSm class=\"hc-calendar-controls-icon\"></hc-icon>\n            </button>\n            <button hc-button buttonStyle=\"minimal\" size=\"sm\" (click)=\"_minutesDown()\" class=\"hc-calendar-time-controls-button\">\n                <hc-icon fontSet=\"fa\" fontIcon=\"fa-caret-down\" hcIconSm class=\"hc-calendar-controls-icon\"></hc-icon>\n            </button>\n        </span>\n    </hc-form-field>\n\n    <hc-form-field inline=\"true\" *ngIf=\"_hourCycle === 12\" class=\"hc-calendar-time-picker-field\">\n        <hc-select class=\"hc-calendar-time-picker-select\" [formControl]=\"_period\" (change)=\"_periodChange()\">\n            <option value=\"am\">AM</option>\n            <option value=\"pm\">PM</option>\n        </hc-select>\n    </hc-form-field>\n</div>\n",
                    // tslint:disable-next-line:no-host-metadata-property
                    host: {
                        class: 'hc-calendar'
                    },
                    exportAs: 'hcCalendar',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["@charset \"UTF-8\";body,html{font-family:\"Open Sans\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;color:#333}h1{font-size:2.57143rem;font-weight:300;line-height:1.2;color:#333;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}h2{font-size:1.57143rem;font-weight:600;line-height:1.5;color:#333}h3{font-size:1.28571rem;font-weight:600;line-height:1.5;color:#333}h4{font-size:1rem;font-weight:600;line-height:1.5;color:#333}p{font-size:1.14286rem;font-weight:400;line-height:1.5;color:#333}code{color:#a94c9d;font-family:Consolas,Menlo,'Ubuntu Mono',monospace;background-color:#f1f1f1;border-radius:3px;padding:3px 7px;font-size:1rem;font-weight:400;line-height:1.4}pre{border:1px solid #a1a1a1;padding:20px;margin:16px auto;border-radius:5px;display:block;background-color:#f1f1f1;font-weight:400}pre>span{font-size:1rem;line-height:1.4;padding:10px 0;background-color:#f1f1f1}pre>code{overflow-x:auto;display:block;font-size:1rem;padding:10px;line-height:1.4;background-color:#f1f1f1;color:#333;border:unset;border-radius:unset}a{text-decoration:none;color:#00aeff}a:hover{color:#33beff}a:active{color:#008bcc}.hc-font-xsm{font-size:.85714rem}.hc-font-sm{font-size:1rem}.hc-font-md{font-size:1.14286rem}.hc-font-lg{font-size:1.28571rem}.hc-font-xlg{font-size:1.57143rem}.hc-font-light{font-weight:300}.hc-font-reg{font-weight:400}.hc-font-bold,strong{font-weight:600}.hc-font-xbold{font-weight:700}.hc-text-titlecase{text-transform:capitalize}.hc-text-uppercase{text-transform:uppercase}.hc-text-lowercase{text-transform:lowercase}.hc-text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.hc-font-em,em{color:#6d6e70;font-style:italic}article ul{list-style-type:none;display:table}article>ul>li{display:table;padding-left:20px}article ul>li:before{content:'\u2022  ';display:table-cell;padding-right:10px}article ol li ol li ol li:first-child,article ol li ol li:first-child,article ol>li:first-child,article ul li ul li ul li:first-child,article ul li ul li:first-child,article ul>li:first-child{margin-top:6px!important}article ol li ol li ol li:last-child,article ol li ol li:last-child,article ol>li:last-child,article ul li ul li ul li:last-child,article ul li ul li:last-child,article ul>li:last-child{margin-bottom:6px!important}article ol>li{padding-left:6px;margin-left:40px!important}article ul li ul li{display:table;margin-left:0}article ul li ul li:before{content:'\u2013  ';display:table-cell;padding-right:15px}article ol>li>ol>li{list-style-type:lower-alpha;padding-left:6px;margin-left:18px!important}article ul li ul li ul li:before{content:'- ';display:table-cell;padding-right:15px}article ol li ol li ol li{list-style-type:lower-roman;padding-left:10px;margin-left:12px!important}article table tbody>tr>td{vertical-align:top}article table ul li{font-size:14px;margin-left:15px!important;display:table}article table ol li{font-size:14px;margin-left:30px!important;padding-right:10px;padding-left:6px!important}article table ul li ul li{font-size:14px;padding-right:6px;margin-left:0!important;display:table}article table ul li ul li:before{padding-right:12px}article table ul li ul li ul li{font-size:14px;display:table}article table ul li ul li ul li:before{padding-right:10px}article ol li ol li ol li:first-child,article ol li ol li:first-child,article ol>li:first-child,article table ol li ol li ol>li:first-child,article table ol li ol>li:first-child,article table ol>li:first-child,article table ul li ul li ul>li:first-child,article table ul li ul>li:first-child,article table ul>li:first-child,article ul li ul li ul li:first-child,article ul li ul li:first-child,article ul>li:first-child{padding-top:6px}article ol li ol li ol li:last-child,article ol li ol li:last-child,article ol>li:last-child,article table ol li ol li ol>li:last-child,article table ol li ol>li:last-child,article table ol>li:last-child,article table ul li ul li ul>li:last-child,article table ul li ul>li:last-child,article table ul>li:last-child,article ul li ul li ul li:last-child,article ul li ul li:last-child,article ul>li:last-child{padding-bottom:6px}.hc-calendar-header{padding:0 8px}.hc-calendar-content{outline:0;padding:0 8px 8px}.hc-calendar-controls{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;margin:0 calc(33% / 7 - 16px) 5%}.hc-calendar-control-button.hc-calendar-period-button,.hc-calendar-control-button.hc-calendar-today-button{font-size:14px;min-width:inherit;padding:10px}.hc-calendar-control-button.hc-calendar-next-button,.hc-calendar-control-button.hc-calendar-previous-button{color:#00aeff;height:40px;min-width:inherit;padding:0;position:relative;top:-2px;width:40px}.hc-calendar-control-button.hc-calendar-next-button::after,.hc-calendar-control-button.hc-calendar-previous-button::after{border:0 solid currentColor;border-top-width:2px;bottom:0;content:'';left:0;margin:15.5px;position:absolute;right:0;top:0}[dir=rtl] .hc-calendar-control-button.hc-calendar-next-button,[dir=rtl] .hc-calendar-control-button.hc-calendar-previous-button{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.hc-calendar-dropdown-caret{border-left:5px solid transparent;border-right:5px solid transparent;border-top-style:solid;border-top-width:5px;display:inline-block;height:0;margin:0 0 0 5px;vertical-align:middle;width:0}[dir=rtl] .hc-calendar-dropdown-caret{margin:0 5px 0 0}.hc-calendar-dropdown-caret.hc-calendar-dropdown-caret-invert{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.hc-calendar-previous-button::after{border-left-width:2px!important;-webkit-transform:translateX(2px) rotate(-45deg);transform:translateX(2px) rotate(-45deg)}.hc-calendar-next-button::after{border-right-width:2px!important;-webkit-transform:translateX(-2px) rotate(45deg);transform:translateX(-2px) rotate(45deg)}.hc-calendar-month-label{-webkit-box-align:center;align-items:center;color:#00aeff;display:-webkit-inline-box;display:inline-flex;font-size:1.07143rem;font-weight:600;height:35px;-webkit-box-pack:center;justify-content:center;line-height:15px;min-width:35px;vertical-align:baseline}.hc-calendar-table{border-collapse:collapse;border-spacing:0;width:100%}.hc-calendar-table-header{color:#00aeff}.hc-calendar-table-header th{font-size:.64286rem;color:#6d6e70;padding:0 0 8px;text-align:center}.hc-calendar-table-header-divider{height:2px;position:relative}.hc-calendar-table-header-divider::after{background:#e0e0e0;content:'';height:2px;left:0;position:absolute;right:0;top:0}.hc-calendar-time-picker{-webkit-box-align:center;align-items:center;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;margin-top:10px}.hc-calendar-time-picker-field{margin:0 3px}.hc-calendar-time-picker-input{width:25px}.hc-calendar-time-controls{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.hc-calendar-time-controls-button{height:16px!important;line-height:16px!important;padding:0!important;width:16px!important}.hc-calendar-controls-icon{line-height:1!important}.hc-calendar-time-picker-select{width:70px}.hc-calendar-time-picker-icon{color:#708090;font-size:25px;height:25px;margin-right:10px;width:25px}"]
                }] }
    ];
    /** @nocollapse */
    CalendarComponent.ctorParameters = function () { return [
        { type: HcDatepickerIntl },
        { type: DateAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HC_DATE_FORMATS,] }] },
        { type: ChangeDetectorRef }
    ]; };
    CalendarComponent.propDecorators = {
        headerComponent: [{ type: Input }],
        startAt: [{ type: Input }],
        startView: [{ type: Input }],
        mode: [{ type: Input }],
        hourCycle: [{ type: Input }],
        selected: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        dateFilter: [{ type: Input }],
        dateClass: [{ type: Input }],
        selectedChange: [{ type: Output }],
        yearSelected: [{ type: Output }],
        monthSelected: [{ type: Output }],
        _userSelection: [{ type: Output }],
        monthView: [{ type: ViewChild, args: [MonthViewComponent, { static: false },] }],
        yearView: [{ type: ViewChild, args: [YearViewComponent, { static: false },] }],
        multiYearView: [{ type: ViewChild, args: [MultiYearViewComponent, { static: false },] }]
    };
    return CalendarComponent;
}());
export { CalendarComponent };
if (false) {
    /**
     * An input indicating the type of the header component, if set.
     * @type {?}
     */
    CalendarComponent.prototype.headerComponent;
    /**
     * A portal containing the header component type for this calendar.
     * @type {?}
     */
    CalendarComponent.prototype._calendarHeaderPortal;
    /**
     * Stores the current am/pm value
     * @type {?}
     */
    CalendarComponent.prototype._period;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._intlChanges;
    /**
     * Used for scheduling that focus should be moved to the active cell on the next tick.
     * We need to schedule it, rather than do it immediately, because we have to wait
     * for Angular to re-evaluate the view children.
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._moveFocusOnNextTick;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._startAt;
    /**
     * Whether the calendar should be started in month or year view.
     * @type {?}
     */
    CalendarComponent.prototype.startView;
    /**
     * Whether the calendar should show calendar, time-picker, or both
     * @type {?}
     */
    CalendarComponent.prototype.mode;
    /** @type {?} */
    CalendarComponent.prototype._hourCycle;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._maxDate;
    /**
     * Function used to filter which dates are selectable.
     * @type {?}
     */
    CalendarComponent.prototype.dateFilter;
    /**
     * Function that can be used to add custom CSS classes to dates.
     * @type {?}
     */
    CalendarComponent.prototype.dateClass;
    /**
     * Emits when the currently selected date changes.
     * @type {?}
     */
    CalendarComponent.prototype.selectedChange;
    /**
     * Emits the year chosen in multiyear view.
     * This doesn't imply a change on the selected date.
     * @type {?}
     */
    CalendarComponent.prototype.yearSelected;
    /**
     * Emits the month chosen in year view.
     * This doesn't imply a change on the selected date.
     * @type {?}
     */
    CalendarComponent.prototype.monthSelected;
    /**
     * Emits when any date is selected.
     * @type {?}
     */
    CalendarComponent.prototype._userSelection;
    /**
     * Reference to the current month view component.
     * @type {?}
     */
    CalendarComponent.prototype.monthView;
    /**
     * Reference to the current year view component.
     * @type {?}
     */
    CalendarComponent.prototype.yearView;
    /**
     * Reference to the current multi-year view component.
     * @type {?}
     */
    CalendarComponent.prototype.multiYearView;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._clampedActiveDate;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._currentView;
    /**
     * Emits whenever there is a state change that the header may need to respond to.
     * @type {?}
     */
    CalendarComponent.prototype.stateChanges;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._dateFormats;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,