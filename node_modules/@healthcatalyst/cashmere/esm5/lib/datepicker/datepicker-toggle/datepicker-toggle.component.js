/**
 * @fileoverview added by tsickle
 * Generated from: lib/datepicker/datepicker-toggle/datepicker-toggle.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, Directive, ContentChild, Attribute } from '@angular/core';
import { merge, Subscription, of as observableOf } from 'rxjs';
import { coerceBooleanProperty } from '../utils/boolean-property';
import { HcDatepickerIntl } from '../datepicker-intl';
import { DatepickerComponent } from '../datepicker.component';
import { ButtonComponent } from '../../button/button.component';
/**
 * Can be used to override the icon of a `hcDatepickerToggle`.
 */
var DatepickerToggleIconDirective = /** @class */ (function () {
    function DatepickerToggleIconDirective() {
    }
    DatepickerToggleIconDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[hcDatepickerToggleIcon]'
                },] }
    ];
    return DatepickerToggleIconDirective;
}());
export { DatepickerToggleIconDirective };
var DatepickerToggleComponent = /** @class */ (function () {
    function DatepickerToggleComponent(_intl, _changeDetectorRef, defaultTabIndex) {
        this._intl = _intl;
        this._changeDetectorRef = _changeDetectorRef;
        this._stateChanges = Subscription.EMPTY;
        /** @type {?} */
        var parsedTabIndex = Number(defaultTabIndex);
        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
    }
    Object.defineProperty(DatepickerToggleComponent.prototype, "disabled", {
        /** Whether the toggle button is disabled. */
        get: /**
         * Whether the toggle button is disabled.
         * @return {?}
         */
        function () {
            return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    DatepickerToggleComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.datepicker) {
            this._watchStateChanges();
        }
    };
    /**
     * @return {?}
     */
    DatepickerToggleComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._stateChanges.unsubscribe();
    };
    /**
     * @return {?}
     */
    DatepickerToggleComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._watchStateChanges();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatepickerToggleComponent.prototype._open = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.datepicker && !this.disabled) {
            this.datepicker.open();
            event.stopPropagation();
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatepickerToggleComponent.prototype._watchStateChanges = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();
        /** @type {?} */
        var inputDisabled = this.datepicker && this.datepicker._datepickerInput ? this.datepicker._datepickerInput._disabledChange : observableOf();
        /** @type {?} */
        var datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : observableOf();
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe((/**
         * @return {?}
         */
        function () {
            return _this._changeDetectorRef.markForCheck();
        }));
    };
    DatepickerToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-datepicker-toggle',
                    template: "<button\n    hc-icon-button\n    #button\n    class=\"hc-calendar-toggle\"\n    type=\"button\"\n    aria-haspopup=\"true\"\n    [attr.aria-label]=\"_intl.openCalendarLabel\"\n    [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n    [disabled]=\"disabled\"\n    (click)=\"_open($event)\"\n>\n    <ng-content select=\"[hcDatepickerToggleIcon]\"></ng-content>\n    <hc-icon hcSuffix fontSet=\"fa\" [fontIcon]=\"datepicker.mode === 'time' ? 'fa-clock-o' : 'fa-calendar'\" *ngIf=\"!_customIcon\"></hc-icon>\n</button>\n",
                    // tslint:disable-next-line:no-host-metadata-property
                    host: {
                        class: 'hc-datepicker-toggle',
                        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the
                        // consumer may have provided, while still being able to receive focus.
                        '[attr.tabindex]': '-1',
                        '[class.hc-datepicker-toggle-active]': 'datepicker && datepicker.opened',
                        '(focus)': '_button.focus()'
                    },
                    exportAs: 'hcDatepickerToggle',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["@charset \"UTF-8\";body,html{font-family:\"Open Sans\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;color:#333}h1{font-size:2.57143rem;font-weight:300;line-height:1.2;color:#333;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}h2{font-size:1.57143rem;font-weight:600;line-height:1.5;color:#333}h3{font-size:1.28571rem;font-weight:600;line-height:1.5;color:#333}h4{font-size:1rem;font-weight:600;line-height:1.5;color:#333}p{font-size:1.14286rem;font-weight:400;line-height:1.5;color:#333}code{color:#a94c9d;font-family:Consolas,Menlo,'Ubuntu Mono',monospace;background-color:#f1f1f1;border-radius:3px;padding:3px 7px;font-size:1rem;font-weight:400;line-height:1.4}pre{border:1px solid #a1a1a1;padding:20px;margin:16px auto;border-radius:5px;display:block;background-color:#f1f1f1;font-weight:400}pre>span{font-size:1rem;line-height:1.4;padding:10px 0;background-color:#f1f1f1}pre>code{overflow-x:auto;display:block;font-size:1rem;padding:10px;line-height:1.4;background-color:#f1f1f1;color:#333;border:unset;border-radius:unset}a{text-decoration:none;color:#00aeff}a:hover{color:#33beff}a:active{color:#008bcc}.hc-font-xsm{font-size:.85714rem}.hc-font-sm{font-size:1rem}.hc-font-md{font-size:1.14286rem}.hc-font-lg{font-size:1.28571rem}.hc-font-xlg{font-size:1.57143rem}.hc-font-light{font-weight:300}.hc-font-reg{font-weight:400}.hc-font-bold,strong{font-weight:600}.hc-font-xbold{font-weight:700}.hc-text-titlecase{text-transform:capitalize}.hc-text-uppercase{text-transform:uppercase}.hc-text-lowercase{text-transform:lowercase}.hc-text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.hc-font-em,em{color:#6d6e70;font-style:italic}article ul{list-style-type:none;display:table}article>ul>li{display:table;padding-left:20px}article ul>li:before{content:'\u2022  ';display:table-cell;padding-right:10px}article ol li ol li ol li:first-child,article ol li ol li:first-child,article ol>li:first-child,article ul li ul li ul li:first-child,article ul li ul li:first-child,article ul>li:first-child{margin-top:6px!important}article ol li ol li ol li:last-child,article ol li ol li:last-child,article ol>li:last-child,article ul li ul li ul li:last-child,article ul li ul li:last-child,article ul>li:last-child{margin-bottom:6px!important}article ol>li{padding-left:6px;margin-left:40px!important}article ul li ul li{display:table;margin-left:0}article ul li ul li:before{content:'\u2013  ';display:table-cell;padding-right:15px}article ol>li>ol>li{list-style-type:lower-alpha;padding-left:6px;margin-left:18px!important}article ul li ul li ul li:before{content:'- ';display:table-cell;padding-right:15px}article ol li ol li ol li{list-style-type:lower-roman;padding-left:10px;margin-left:12px!important}article table tbody>tr>td{vertical-align:top}article table ul li{font-size:14px;margin-left:15px!important;display:table}article table ol li{font-size:14px;margin-left:30px!important;padding-right:10px;padding-left:6px!important}article table ul li ul li{font-size:14px;padding-right:6px;margin-left:0!important;display:table}article table ul li ul li:before{padding-right:12px}article table ul li ul li ul li{font-size:14px;display:table}article table ul li ul li ul li:before{padding-right:10px}article ol li ol li ol li:first-child,article ol li ol li:first-child,article ol>li:first-child,article table ol li ol li ol>li:first-child,article table ol li ol>li:first-child,article table ol>li:first-child,article table ul li ul li ul>li:first-child,article table ul li ul>li:first-child,article table ul>li:first-child,article ul li ul li ul li:first-child,article ul li ul li:first-child,article ul>li:first-child{padding-top:6px}article ol li ol li ol li:last-child,article ol li ol li:last-child,article ol>li:last-child,article table ol li ol li ol>li:last-child,article table ol li ol>li:last-child,article table ol>li:last-child,article table ul li ul li ul>li:last-child,article table ul li ul>li:last-child,article table ul>li:last-child,article ul li ul li ul li:last-child,article ul li ul li:last-child,article ul>li:last-child{padding-bottom:6px}.hc-calendar-toggle{background:0 0;border:none;box-sizing:border-box;color:#00aeff;cursor:pointer;display:inline-block;height:32px;line-height:1.5;margin:0;outline:0;overflow:visible;padding:0;position:relative;text-align:center;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:baseline;-webkit-tap-highlight-color:transparent;white-space:nowrap;width:32px}"]
                }] }
    ];
    /** @nocollapse */
    DatepickerToggleComponent.ctorParameters = function () { return [
        { type: HcDatepickerIntl },
        { type: ChangeDetectorRef },
        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }
    ]; };
    DatepickerToggleComponent.propDecorators = {
        datepicker: [{ type: Input, args: ['for',] }],
        tabIndex: [{ type: Input }],
        disabled: [{ type: Input }],
        _customIcon: [{ type: ContentChild, args: [DatepickerToggleIconDirective, { static: false },] }],
        _button: [{ type: ViewChild, args: ['button', { static: false },] }]
    };
    return DatepickerToggleComponent;
}());
export { DatepickerToggleComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatepickerToggleComponent.prototype._stateChanges;
    /**
     * Datepicker instance that the button will toggle.
     * @type {?}
     */
    DatepickerToggleComponent.prototype.datepicker;
    /**
     * Tabindex for the toggle.
     * @type {?}
     */
    DatepickerToggleComponent.prototype.tabIndex;
    /**
     * @type {?}
     * @private
     */
    DatepickerToggleComponent.prototype._disabled;
    /**
     * Custom icon set by the consumer.
     * @type {?}
     */
    DatepickerToggleComponent.prototype._customIcon;
    /**
     * Underlying button element.
     * @type {?}
     */
    DatepickerToggleComponent.prototype._button;
    /** @type {?} */
    DatepickerToggleComponent.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    DatepickerToggleComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,