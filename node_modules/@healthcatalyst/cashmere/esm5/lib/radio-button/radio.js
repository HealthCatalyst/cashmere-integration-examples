/**
 * @fileoverview added by tsickle
 * Generated from: lib/radio-button/radio.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, EventEmitter, forwardRef, HostBinding, Input, Optional, Output, QueryList, Self, ElementRef } from '@angular/core';
import { parseBooleanAttribute } from '../util';
import { HcFormControlComponent } from '../form-field/hc-form-control.component';
import { NgForm, FormGroupDirective, NgControl } from '@angular/forms';
/** @type {?} */
var nextUniqueId = 0;
/**
 * Groups single radio buttons together into a set for which only one can be selected
 */
var RadioGroupDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RadioGroupDirective, _super);
    function RadioGroupDirective(_cdRef, _parentForm, _parentFormGroup, _ngControl) {
        var _this = _super.call(this) || this;
        _this._cdRef = _cdRef;
        _this._ngControl = _ngControl;
        _this._verticalClass = true;
        _this._horizontalClass = false;
        /**
         * Event emitted when the value of a radio button changes inside the group.
         */
        _this.change = new EventEmitter();
        _this._value = null;
        _this._uniqueName = "hc-radio-group-" + nextUniqueId++;
        _this._name = _this._uniqueName;
        _this._inline = false;
        _this._tight = false;
        _this._initialized = false; // if value of radio group has been set to initial value
        // if value of radio group has been set to initial value
        _this._selected = null; // the currently selected radio
        _this._componentId = _this._name;
        _this._onChangeFn = (/**
         * @return {?}
         */
        function () { });
        _this._onTouchFn = (/**
         * @return {?}
         */
        function () { });
        _this._form = _parentForm || _parentFormGroup;
        if (_this._ngControl != null) {
            _this._ngControl.valueAccessor = _this;
        }
        return _this;
    }
    Object.defineProperty(RadioGroupDirective.prototype, "name", {
        /** Name of radio group. Auto-generated name will be used if no name is set */
        get: /**
         * Name of radio group. Auto-generated name will be used if no name is set
         * @return {?}
         */
        function () {
            return this._name;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value ? value : this._uniqueName;
            this._updateRadioButtonNames();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroupDirective.prototype, "id", {
        /** Unique id for the radio group. If none is supplied, defaults to name. */
        get: /**
         * Unique id for the radio group. If none is supplied, defaults to name.
         * @return {?}
         */
        function () {
            return this._componentId || this._name;
        },
        set: /**
         * @param {?} idVal
         * @return {?}
         */
        function (idVal) {
            this._componentId = idVal ? idVal : this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroupDirective.prototype, "value", {
        /** Value of radio buttons */
        get: /**
         * Value of radio buttons
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._value !== newValue) {
                this._value = newValue;
                this._updateSelectedRadio();
                this._checkSelectedRadio();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroupDirective.prototype, "disabled", {
        /** Boolean value that enables/disables the radio group */
        get: /**
         * Boolean value that enables/disables the radio group
         * @return {?}
         */
        function () {
            if (this._ngControl && this._ngControl.disabled) {
                return this._ngControl.disabled;
            }
            return this._isDisabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isDisabled = parseBooleanAttribute(value);
            this._markRadiosForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroupDirective.prototype, "required", {
        /** Boolean value of whether the radio group is required on a form */
        get: /**
         * Boolean value of whether the radio group is required on a form
         * @return {?}
         */
        function () {
            return this._isRequired;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isRequired = parseBooleanAttribute(value);
            this._markRadiosForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroupDirective.prototype, "selected", {
        /** Gets and sets the currently selected value of the radio button group */
        get: /**
         * Gets and sets the currently selected value of the radio button group
         * @return {?}
         */
        function () {
            return this._selected;
        },
        set: /**
         * @param {?} button
         * @return {?}
         */
        function (button) {
            this._selected = button;
            this.value = button ? button.value : null;
            this._checkSelectedRadio();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroupDirective.prototype, "inline", {
        /** Sets the layout orientation of the radio button group; defaults to false */
        get: /**
         * Sets the layout orientation of the radio button group; defaults to false
         * @return {?}
         */
        function () {
            return this._inline;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._inline = parseBooleanAttribute(value);
            this._verticalClass = !this._inline;
            this._horizontalClass = this._inline;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroupDirective.prototype, "tight", {
        /** If true, condense the default margin and reduce the font size on all contained radios. *Defaults to `false`.*  */
        get: /**
         * If true, condense the default margin and reduce the font size on all contained radios. *Defaults to `false`.*
         * @return {?}
         */
        function () {
            return this._tight;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._tight = parseBooleanAttribute(value);
            if (this._initialized) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this._markRadiosForCheck(); }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RadioGroupDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._initialized = true;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RadioGroupDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this._cdRef.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioGroupDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeFn = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioGroupDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouchFn = fn;
    };
    /**
     * @return {?}
     */
    RadioGroupDirective.prototype._touch = /**
     * @return {?}
     */
    function () {
        if (this._onTouchFn) {
            this._onTouchFn();
        }
    };
    /**
     * @return {?}
     */
    RadioGroupDirective.prototype._emitChangeEvent = /**
     * @return {?}
     */
    function () {
        if (this._initialized) {
            this.change.emit(new RadioButtonChangeEvent(this._selected, this.value));
        }
    };
    /**
     * @private
     * @return {?}
     */
    RadioGroupDirective.prototype._markRadiosForCheck = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.radios) {
            this.radios.forEach((/**
             * @param {?} radio
             * @return {?}
             */
            function (radio) { return radio._markForCheck(); }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    RadioGroupDirective.prototype._updateSelectedRadio = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var isAlreadySelected = this._selected !== null && this._selected.value === this._value;
        if (this.radios && !isAlreadySelected) {
            this._selected = null;
            this.radios.forEach((/**
             * @param {?} radio
             * @return {?}
             */
            function (radio) {
                radio.checked = _this.value === radio.value;
                if (radio.checked) {
                    _this._selected = radio;
                }
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    RadioGroupDirective.prototype._checkSelectedRadio = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._selected && !this._selected.checked) {
            this._selected.checked = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    RadioGroupDirective.prototype._updateRadioButtonNames = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.radios) {
            this.radios.forEach((/**
             * @param {?} radio
             * @return {?}
             */
            function (radio) {
                radio.name = _this.name;
            }));
        }
    };
    /**
     * @return {?}
     */
    RadioGroupDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        // This needs to be checked every cycle because we can't subscribe to form submissions
        if (this._ngControl) {
            this._updateErrorState();
        }
    };
    /**
     * @private
     * @return {?}
     */
    RadioGroupDirective.prototype._updateErrorState = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oldState = this._errorState;
        // TODO: this could be abstracted out as an @Input() if we need this to be configurable
        /** @type {?} */
        var newState = !!(this._ngControl &&
            this._ngControl.invalid &&
            (this._ngControl.touched || (this._form && this._form.submitted)));
        if (oldState !== newState) {
            this._errorState = newState;
        }
    };
    RadioGroupDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable:directive-selector
                    selector: 'hc-radio-group',
                    providers: [{ provide: HcFormControlComponent, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return RadioGroupDirective; })), multi: true }],
                    exportAs: 'hcRadioGroup'
                },] }
    ];
    /** @nocollapse */
    RadioGroupDirective.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    RadioGroupDirective.propDecorators = {
        _verticalClass: [{ type: HostBinding, args: ['class.hc-radio-group-vertical',] }],
        _horizontalClass: [{ type: HostBinding, args: ['class.hc-radio-group-horizontal',] }],
        change: [{ type: Output }],
        radios: [{ type: ContentChildren, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return RadioButtonComponent; })),
                    { descendants: true },] }],
        name: [{ type: Input }],
        id: [{ type: Input }],
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        required: [{ type: Input }],
        inline: [{ type: Input }],
        tight: [{ type: Input }]
    };
    return RadioGroupDirective;
}(HcFormControlComponent));
export { RadioGroupDirective };
if (false) {
    /** @type {?} */
    RadioGroupDirective.prototype._verticalClass;
    /** @type {?} */
    RadioGroupDirective.prototype._horizontalClass;
    /**
     * Event emitted when the value of a radio button changes inside the group.
     * @type {?}
     */
    RadioGroupDirective.prototype.change;
    /**
     * A list of all the radio buttons included in the group
     * @type {?}
     */
    RadioGroupDirective.prototype.radios;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._value;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._uniqueName;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._name;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._inline;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._tight;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._initialized;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._form;
    /** @type {?} */
    RadioGroupDirective.prototype._componentId;
    /** @type {?} */
    RadioGroupDirective.prototype._onChangeFn;
    /** @type {?} */
    RadioGroupDirective.prototype._onTouchFn;
    /**
     * @type {?}
     * @private
     */
    RadioGroupDirective.prototype._cdRef;
    /** @type {?} */
    RadioGroupDirective.prototype._ngControl;
}
/**
 * Event type that is emitted when a radio button or radio button group changes
 */
var /**
 * Event type that is emitted when a radio button or radio button group changes
 */
RadioButtonChangeEvent = /** @class */ (function () {
    /**
     * @param source the radio button that fired the event
     * @param value the value of that radio button
     */
    function RadioButtonChangeEvent(source, value) {
        this.source = source;
        this.value = value;
    }
    return RadioButtonChangeEvent;
}());
/**
 * Event type that is emitted when a radio button or radio button group changes
 */
export { RadioButtonChangeEvent };
if (false) {
    /** @type {?} */
    RadioButtonChangeEvent.prototype.source;
    /** @type {?} */
    RadioButtonChangeEvent.prototype.value;
}
/**
 * Radio buttons allow the user to choose only one of a predefined set of mutually exclusive options.
 */
var RadioButtonComponent = /** @class */ (function () {
    function RadioButtonComponent(radioGroup, cdRef, _elementRef) {
        this.cdRef = cdRef;
        this._elementRef = _elementRef;
        this._uniqueId = "hc-radio-button-" + nextUniqueId++;
        /**
         * Element id for the radio button. Auto-generated id will be used if none is set
         */
        this.id = this._uniqueId;
        /**
         * Event emitted when the value of the radio button changes
         */
        this.change = new EventEmitter();
        this._checked = false;
        this._value = null;
        this._required = false;
        this._disabled = false;
        this._tight = false;
        this.radioGroup = radioGroup;
    }
    Object.defineProperty(RadioButtonComponent.prototype, "value", {
        /** Value of radio buttons */
        get: /**
         * Value of radio buttons
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._value !== value) {
                this._value = value;
                if (this.radioGroup !== null && !this.checked) {
                    this.checked = this.radioGroup.value === value;
                }
                else if (this.radioGroup !== null && this.checked) {
                    this.radioGroup.selected = this;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButtonComponent.prototype, "_getHostId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButtonComponent.prototype, "required", {
        /** Boolean value of whether the radio button is required */
        get: /**
         * Boolean value of whether the radio button is required
         * @return {?}
         */
        function () {
            return this._required || (this.radioGroup != null && this.radioGroup.required);
        },
        set: /**
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = parseBooleanAttribute(required);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButtonComponent.prototype, "disabled", {
        /** Boolean value that enables/disables the radio button */
        get: /**
         * Boolean value that enables/disables the radio button
         * @return {?}
         */
        function () {
            return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);
        },
        set: /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this._disabled = parseBooleanAttribute(isDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButtonComponent.prototype, "checked", {
        /** Boolean that returns whether the radio button is selected */
        get: /**
         * Boolean that returns whether the radio button is selected
         * @return {?}
         */
        function () {
            return this._checked;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newCheckedState = parseBooleanAttribute(value);
            if (this._checked !== newCheckedState) {
                this._checked = newCheckedState;
                if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {
                    this.radioGroup.selected = this;
                }
                else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {
                    this.radioGroup.selected = null;
                }
                this.cdRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButtonComponent.prototype, "_inlineGroup", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.radioGroup !== null) {
                return this.radioGroup.inline;
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButtonComponent.prototype, "tight", {
        /** If true, condense the default margin, reduce the font size, and decrease the circle size.
         * Inherits value from parent radio group if part of one. *Defaults to `false`.*  */
        get: /**
         * If true, condense the default margin, reduce the font size, and decrease the circle size.
         * Inherits value from parent radio group if part of one. *Defaults to `false`.*
         * @return {?}
         */
        function () {
            if (this.radioGroup !== null) {
                return this.radioGroup.tight;
            }
            else {
                return this._tight;
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tight = parseBooleanAttribute(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButtonComponent.prototype, "_inputId", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.id || this._uniqueId) + "-input";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.radioGroup !== null) {
            this.checked = this.radioGroup.value === this._value;
            this.name = this.radioGroup.name;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RadioButtonComponent.prototype._onInputClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RadioButtonComponent.prototype._onInputChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        /** @type {?} */
        var valueChanged = this.radioGroup && this.value !== this.radioGroup.value;
        this._emitChangeEvent();
        if (this.radioGroup !== null) {
            this.radioGroup._onChangeFn(this.value);
            this.radioGroup._touch();
            if (valueChanged) {
                this.radioGroup._emitChangeEvent();
                this.radioGroup.value = this.value;
            }
        }
        else {
            this.checked = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    RadioButtonComponent.prototype._emitChangeEvent = /**
     * @private
     * @return {?}
     */
    function () {
        this.change.emit(new RadioButtonChangeEvent(this, this.value));
    };
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype._markForCheck = /**
     * @return {?}
     */
    function () {
        this.cdRef.markForCheck();
    };
    RadioButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-radio-button',
                    template: "<label class=\"hc-radio-container\"\n    [class.disabled]=\"disabled\"\n    [class.hc-radio-inline]=\"_inlineGroup\"\n    [class.hc-radio-tight]=\"tight\" >\n    <input class=\"hc-radio-input\"\n           [class.disabled]=\"disabled\"\n           type=\"radio\"\n           [id]=\"_inputId\"\n           [attr.value]=\"value\"\n           [attr.name]=\"name\"\n           [disabled]=\"disabled\"\n           [required]=\"required\"\n           [checked]=\"checked\"\n           (change)=\"_onInputChange($event)\"\n           (click)=\"_onInputClick($event)\"/>\n    <span class=\"hc-radio-overlay\" [class.disabled]=\"disabled\"></span>\n    <div class=\"hc-radio-content\">\n        <ng-content></ng-content>\n    </div>\n</label>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".hc-radio-container{cursor:pointer;display:block;line-height:1.5;margin:4px 0;padding-left:35px;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.hc-radio-container.disabled{color:#ccc;cursor:not-allowed}.hc-radio-container.hc-radio-inline{padding-left:32px;margin-right:25px}.hc-radio-container.hc-radio-tight{margin:1px 15px 1px 0;padding-left:25px}.hc-radio-tight .hc-radio-overlay{height:18px;width:18px;top:1px}.hc-radio-tight .hc-radio-overlay:after{left:3px;top:3px}.hc-radio-tight .hc-radio-content{font-size:.92857rem}.hc-radio-overlay{background-color:#fff;border:2px solid #ccc;border-radius:50%;height:22px;left:0;position:absolute;top:0;width:22px}.hc-radio-overlay:after{background:#fff;border-radius:50%;content:'';display:none;height:8px;left:5px;position:absolute;top:5px;width:8px}.hc-radio-overlay.disabled{background-color:#e0e0e0;border-color:#ccc;cursor:not-allowed}.hc-radio-overlay.disabled:after{background:#e0e0e0}.hc-radio-container:hover .hc-radio-overlay{border-color:#00aeff}.hc-radio-container:hover .hc-radio-overlay.disabled{background-color:#e0e0e0;border-color:#ccc;cursor:not-allowed}.hc-radio-container:hover .hc-radio-overlay.disabled:after{background:#e0e0e0}.hc-radio-input:checked~.hc-radio-overlay{background-color:#00aeff;border-color:#00aeff}.hc-radio-input:checked~.hc-radio-overlay:after{display:block}.hc-radio-input:checked~.hc-radio-overlay.disabled{background-color:#e0e0e0;border-color:#ccc}.hc-radio-input{cursor:pointer;opacity:0;position:absolute}.hc-radio-input.disabled{cursor:not-allowed}.hc-radio-input:focus+.hc-radio-overlay{outline:#99caff solid 2px;outline-offset:-1px}.hc-radio-input:active+.hc-radio-overlay{outline:0}"]
                }] }
    ];
    /** @nocollapse */
    RadioButtonComponent.ctorParameters = function () { return [
        { type: RadioGroupDirective, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    RadioButtonComponent.propDecorators = {
        id: [{ type: Input }],
        name: [{ type: Input }],
        change: [{ type: Output }],
        value: [{ type: Input }],
        _getHostId: [{ type: HostBinding, args: ['attr.id',] }],
        required: [{ type: Input }],
        disabled: [{ type: Input }],
        checked: [{ type: Input }],
        tight: [{ type: Input }]
    };
    return RadioButtonComponent;
}());
export { RadioButtonComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._uniqueId;
    /**
     * Element id for the radio button. Auto-generated id will be used if none is set
     * @type {?}
     */
    RadioButtonComponent.prototype.id;
    /**
     * Name of radio button
     * @type {?}
     */
    RadioButtonComponent.prototype.name;
    /**
     * Event emitted when the value of the radio button changes
     * @type {?}
     */
    RadioButtonComponent.prototype.change;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._checked;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype._tight;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.radioGroup;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.cdRef;
    /** @type {?} */
    RadioButtonComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,