/**
 * @fileoverview added by tsickle
 * Generated from: lib/drawer/drawer-container.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChildren, ElementRef, HostBinding, NgZone, QueryList, Renderer2, ViewEncapsulation } from '@angular/core';
import { Drawer } from './drawer.component';
import { debounceTime, filter, startWith, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
/**
 * @param {?} align
 * @return {?}
 */
function throwDrawerContainerError(align) {
    throw new Error("A drawer was already declared for 'align=\"" + align + "\"'");
}
/**
 * Parent component that houses one or two `<hc-drawer>` that applies content styling
 */
var DrawerContainer = /** @class */ (function () {
    function DrawerContainer(_elementRef, _renderer, _ngZone, _changeDetector) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._ngZone = _ngZone;
        this._changeDetector = _changeDetector;
        this._contentMargins = { left: 0, right: 0 };
        this._doCheckSubject = new Subject();
        this._destroyed = new Subject();
        this._hostClass = true;
    }
    // If drawer size changes through some async action this will cause it to resize the margins
    // If drawer size changes through some async action this will cause it to resize the margins
    /**
     * @return {?}
     */
    DrawerContainer.prototype.ngDoCheck = 
    // If drawer size changes through some async action this will cause it to resize the margins
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Run outside of angular's scope because debounceTime will cause infinite loop
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return _this._doCheckSubject.next(); }));
    };
    /**
     * @return {?}
     */
    DrawerContainer.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // debounceTime allows the component to render before the margins are calculated
        this._doCheckSubject
            .pipe(debounceTime(10), // arbitrarily small value is used to quickly render the component so incorrect margins aren't shown
        takeUntil(this._destroyed))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this._calculateContentMargins(); }));
        // startWith used to cause first iteration
        this._drawers.changes.pipe(startWith(null)).subscribe((/**
         * @return {?}
         */
        function () {
            _this._validateDrawers();
            _this._drawers.forEach((/**
             * @param {?} drawer
             * @return {?}
             */
            function (drawer) {
                drawer._animationStarted
                    .pipe(takeUntil(_this._drawers.changes), filter((/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return event.fromState !== event.toState; })))
                    .subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this._calculateContentMargins();
                }));
                drawer._openChange.pipe(takeUntil(_this._drawers.changes)).subscribe((/**
                 * @param {?} isOpen
                 * @return {?}
                 */
                function (isOpen) {
                    if (isOpen) {
                        _this._setContainerClass(true);
                    }
                    else {
                        _this._setContainerClass(false);
                    }
                }));
            }));
            if (!_this._drawers.length || _this._isDrawerOpen(_this._leftDrawer) || _this._isDrawerOpen(_this._rightDrawer)) {
                _this._calculateContentMargins();
            }
        }));
    };
    /**
     * @private
     * @param {?} drawer
     * @return {?}
     */
    DrawerContainer.prototype._isDrawerOpen = /**
     * @private
     * @param {?} drawer
     * @return {?}
     */
    function (drawer) {
        return drawer != null && drawer.opened;
    };
    /** Open all drawers */
    /**
     * Open all drawers
     * @return {?}
     */
    DrawerContainer.prototype.open = /**
     * Open all drawers
     * @return {?}
     */
    function () {
        return Promise.all([this._leftDrawer, this._rightDrawer].map((/**
         * @param {?} drawer
         * @return {?}
         */
        function (drawer) { return drawer && drawer.toggleOpen(); })));
    };
    /** Close all drawers */
    /**
     * Close all drawers
     * @return {?}
     */
    DrawerContainer.prototype.close = /**
     * Close all drawers
     * @return {?}
     */
    function () {
        return Promise.all([this._leftDrawer, this._rightDrawer].map((/**
         * @param {?} drawer
         * @return {?}
         */
        function (drawer) { return drawer && drawer.toggleClose(); })));
    };
    /**
     * @private
     * @return {?}
     */
    DrawerContainer.prototype._calculateContentMargins = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var left = 0;
        /** @type {?} */
        var right = 0;
        if (this._leftDrawer && this._leftDrawer.opened) {
            if (this._leftDrawer.mode === 'side') {
                left += this._leftDrawer._width;
            }
            else if (this._leftDrawer.mode === 'push') {
                left += this._leftDrawer._width;
                right -= this._leftDrawer._width;
            }
        }
        if (this._rightDrawer && this._rightDrawer.opened) {
            if (this._rightDrawer.mode === 'side') {
                right += this._rightDrawer._width;
            }
            else if (this._rightDrawer.mode === 'push') {
                right += this._rightDrawer._width;
                left -= this._rightDrawer._width;
            }
        }
        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {
            this._contentMargins = { left: left, right: right };
            this._ngZone.run((/**
             * @return {?}
             */
            function () { return _this._changeDetector.markForCheck(); }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    DrawerContainer.prototype._validateDrawers = /**
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this._drawers.toArray()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var drawer = _c.value;
                if (drawer.align === 'right') {
                    if (this._rightDrawer != null) {
                        throwDrawerContainerError('right');
                    }
                    this._rightDrawer = drawer;
                }
                else {
                    if (this._leftDrawer != null) {
                        throwDrawerContainerError('left');
                    }
                    this._leftDrawer = drawer;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @private
     * @param {?} isOpen
     * @return {?}
     */
    DrawerContainer.prototype._setContainerClass = /**
     * @private
     * @param {?} isOpen
     * @return {?}
     */
    function (isOpen) {
        if (isOpen) {
            this._renderer.addClass(this._elementRef.nativeElement, 'hc-drawer-opened');
        }
        else {
            this._renderer.removeClass(this._elementRef.nativeElement, 'hc-drawer-opened');
        }
    };
    /**
     * @return {?}
     */
    DrawerContainer.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroyed.next();
        this._destroyed.complete();
        this._doCheckSubject.complete();
    };
    DrawerContainer.decorators = [
        { type: Component, args: [{
                    selector: 'hc-drawer-container',
                    template: "<ng-content select=\"hc-drawer,hc-menu-drawer\"></ng-content>\n\n<div class=\"hc-drawer-content\"\n     [style.margin-left.px]=\"_contentMargins.left\"\n     [style.margin-right.px]=\"_contentMargins.right\">\n    <ng-content></ng-content>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".hc-drawer,.hc-menu-drawer{bottom:0;box-sizing:border-box;display:block;height:100%;outline:0;overflow-y:auto;position:absolute;top:0;z-index:3}.hc-drawer.hc-drawer-opened:not(.drawer-side),.hc-drawer.hc-drawer-opening:not(.drawer-side),.hc-menu-drawer.hc-drawer-opened:not(.drawer-side),.hc-menu-drawer.hc-drawer-opening:not(.drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.hc-drawer-right{right:0}.hc-drawer-container{position:relative;z-index:1;box-sizing:border-box;display:block;overflow:hidden}.hc-drawer-content{position:relative;z-index:1;display:block;height:100%;left:0;overflow:auto;padding:10px 20px;right:0;-webkit-transition-duration:.4s;transition-duration:.4s;-webkit-transition-property:margin-left,margin-right,-webkit-transform;transition-property:transform,margin-left,margin-right,-webkit-transform;-webkit-transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-timing-function:cubic-bezier(.25,.8,.25,1)}"]
                }] }
    ];
    /** @nocollapse */
    DrawerContainer.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: ChangeDetectorRef }
    ]; };
    DrawerContainer.propDecorators = {
        _drawers: [{ type: ContentChildren, args: [Drawer,] }],
        _hostClass: [{ type: HostBinding, args: ['class.hc-drawer-container',] }]
    };
    return DrawerContainer;
}());
export { DrawerContainer };
if (false) {
    /** @type {?} */
    DrawerContainer.prototype._drawers;
    /**
     * @type {?}
     * @private
     */
    DrawerContainer.prototype._leftDrawer;
    /**
     * @type {?}
     * @private
     */
    DrawerContainer.prototype._rightDrawer;
    /** @type {?} */
    DrawerContainer.prototype._contentMargins;
    /**
     * @type {?}
     * @private
     */
    DrawerContainer.prototype._doCheckSubject;
    /**
     * @type {?}
     * @private
     */
    DrawerContainer.prototype._destroyed;
    /** @type {?} */
    DrawerContainer.prototype._hostClass;
    /**
     * @type {?}
     * @private
     */
    DrawerContainer.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    DrawerContainer.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    DrawerContainer.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    DrawerContainer.prototype._changeDetector;
}
//# sourceMappingURL=data:application/json;base64,