/**
 * @fileoverview added by tsickle
 * Generated from: lib/drawer/drawer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewEncapsulation } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { parseBooleanAttribute } from '../util';
import { filter, map } from 'rxjs/operators';
import { Observable } from 'rxjs';
/**
 * Result of opening or closing the drawer
 */
var /**
 * Result of opening or closing the drawer
 */
DrawerPromiseResult = /** @class */ (function () {
    function DrawerPromiseResult(type) {
        this.type = type;
    }
    return DrawerPromiseResult;
}());
/**
 * Result of opening or closing the drawer
 */
export { DrawerPromiseResult };
if (false) {
    /** @type {?} */
    DrawerPromiseResult.prototype.type;
}
/** @type {?} */
var supportedModes = ['over', 'push', 'side'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateModeInput(inputStr) {
    if (supportedModes.indexOf(inputStr) < 0) {
        throw Error('Unsupported drawer mode value: ' + inputStr);
    }
}
/** @type {?} */
var supportedAligns = ['left', 'right'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateAlignInput(inputStr) {
    if (supportedAligns.indexOf(inputStr) < 0) {
        throw Error('Unsupported drawer alignment value: ' + inputStr);
    }
}
/** @type {?} */
var openStateAnimation = '400ms cubic-bezier(0.25, 0.8, 0.25, 1)';
/**
 * Drawer that can be opened or closed on the drawer container
 */
var Drawer = /** @class */ (function () {
    function Drawer(elementRef) {
        this.elementRef = elementRef;
        this._openChange = new EventEmitter();
        this._mode = 'push';
        this._align = 'left';
        /**
         * Tabindex of the element
         */
        this.tabindex = -1;
        this._drawerClass = true;
        this._animationStarted = new EventEmitter();
        this._animationDisabled = true;
        this._drawerOpened = false;
        this._resolveAnimationPromise = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(Drawer.prototype, "mode", {
        /** Mode of the drawer: `over`, `push` or `side` */
        get: /**
         * Mode of the drawer: `over`, `push` or `side`
         * @return {?}
         */
        function () {
            return this._mode;
        },
        set: /**
         * @param {?} modeType
         * @return {?}
         */
        function (modeType) {
            validateModeInput(modeType);
            this._mode = modeType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "align", {
        /** Side the drawer is attached to: `left` or `right` */
        get: /**
         * Side the drawer is attached to: `left` or `right`
         * @return {?}
         */
        function () {
            return this._align;
        },
        set: /**
         * @param {?} alignType
         * @return {?}
         */
        function (alignType) {
            validateAlignInput(alignType);
            this._align = alignType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "openStart", {
        /** Event emitted when drawer has started to open */
        get: /**
         * Event emitted when drawer has started to open
         * @return {?}
         */
        function () {
            return this._animationStarted.pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event.fromState === 'void' && event.toState === 'open'; })), map((/**
             * @return {?}
             */
            function () { })));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "closeStart", {
        /** Event emitted when drawer has started to close */
        get: /**
         * Event emitted when drawer has started to close
         * @return {?}
         */
        function () {
            return this._animationStarted.pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event.fromState === 'open' && event.toState === 'void'; })), map((/**
             * @return {?}
             */
            function () { })));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "_openStream", {
        /** Event emitted when drawer has opened */
        get: /**
         * Event emitted when drawer has opened
         * @return {?}
         */
        function () {
            return this._openChange.pipe(filter((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value; })), map((/**
             * @return {?}
             */
            function () { })));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "_closeStream", {
        /** Event emitted when drawer has closed */
        get: /**
         * Event emitted when drawer has closed
         * @return {?}
         */
        function () {
            return this._openChange.pipe(filter((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return !value; })), map((/**
             * @return {?}
             */
            function () { })));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "opened", {
        /** Whether the drawer is opened. */
        get: /**
         * Whether the drawer is opened.
         * @return {?}
         */
        function () {
            return this._drawerOpened;
        },
        set: /**
         * @param {?} opened
         * @return {?}
         */
        function (opened) {
            this.toggle(parseBooleanAttribute(opened));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "_width", {
        get: /**
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement.offsetWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "_isOpened", {
        get: /**
         * @return {?}
         */
        function () {
            return this._drawerOpened && !this._animationPromise;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "_isOpening", {
        get: /**
         * @return {?}
         */
        function () {
            return this._drawerOpened && !!this._animationPromise;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "_isClosed", {
        get: /**
         * @return {?}
         */
        function () {
            return !this._drawerOpened && !this._animationPromise;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "_isClosing", {
        get: /**
         * @return {?}
         */
        function () {
            return !this._drawerOpened && !!this._animationPromise;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "_isRight", {
        get: /**
         * @return {?}
         */
        function () {
            return this._align === 'right';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drawer.prototype, "_openState", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._drawerOpened) {
                if (this._animationDisabled) {
                    return 'open-instant';
                }
                return this._align === 'right' ? 'open-right' : 'open-left';
            }
            return 'void';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    Drawer.prototype._onAnimationStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._animationStarted.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Drawer.prototype._onAnimationEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._openChange.next(this.opened);
        if (this._animationPromise) {
            this._resolveAnimationPromise();
            this._resolveAnimationPromise = (/**
             * @return {?}
             */
            function () { });
            this._animationPromise = null;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Drawer.prototype._onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === 27) {
            this.toggleClose();
            event.stopPropagation();
        }
    };
    /**
     * @return {?}
     */
    Drawer.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this._animationPromise) {
            this._resolveAnimationPromise();
            this._resolveAnimationPromise = (/**
             * @return {?}
             */
            function () { });
            this._animationPromise = null;
        }
        this._animationDisabled = false;
    };
    /** Toggles the drawer open */
    /**
     * Toggles the drawer open
     * @return {?}
     */
    Drawer.prototype.toggleOpen = /**
     * Toggles the drawer open
     * @return {?}
     */
    function () {
        return this.toggle(true);
    };
    /** Toggles the drawer closed */
    /**
     * Toggles the drawer closed
     * @return {?}
     */
    Drawer.prototype.toggleClose = /**
     * Toggles the drawer closed
     * @return {?}
     */
    function () {
        return this.toggle(false);
    };
    /** Toggles the drawer */
    /**
     * Toggles the drawer
     * @param {?=} isOpen
     * @return {?}
     */
    Drawer.prototype.toggle = /**
     * Toggles the drawer
     * @param {?=} isOpen
     * @return {?}
     */
    function (isOpen) {
        var _this = this;
        if (isOpen === void 0) { isOpen = !this.opened; }
        if (!this._animationPromise) {
            this._drawerOpened = isOpen;
            this._animationPromise = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) {
                _this._resolveAnimationPromise = (/**
                 * @return {?}
                 */
                function () { return resolve(new DrawerPromiseResult(isOpen ? 'open' : 'close')); });
            }));
        }
        return this._animationPromise;
    };
    Drawer.decorators = [
        { type: Component, args: [{
                    selector: 'hc-drawer',
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None,
                    animations: [
                        trigger('openState', [
                            state('open-left, open-right, open-instant', style({
                                visibility: 'visible'
                            })),
                            state('void', style({
                                'box-shadow': 'none',
                                visibility: 'hidden'
                            })),
                            transition('void => open-instant', animate('0ms')),
                            transition('open-instant => void', animate(openStateAnimation)),
                            transition('void => open-left', [
                                animate('0ms', style({ transform: 'translate3d(-100%, 0, 0)' })),
                                animate(openStateAnimation)
                            ]),
                            transition('open-left => void', [
                                animate(openStateAnimation, style({ transform: 'translate3d(-100%, 0, 0)' }))
                            ]),
                            transition('void => open-right', [
                                animate('0ms', style({ transform: 'translate3d(100%, 0, 0)' })),
                                animate(openStateAnimation)
                            ]),
                            transition('open-right => void', [
                                animate(openStateAnimation, style({ transform: 'translate3d(100%, 0, 0)' }))
                            ])
                        ])
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".hc-drawer,.hc-menu-drawer{bottom:0;box-sizing:border-box;display:block;height:100%;outline:0;overflow-y:auto;position:absolute;top:0;z-index:3}.hc-drawer.hc-drawer-opened:not(.drawer-side),.hc-drawer.hc-drawer-opening:not(.drawer-side),.hc-menu-drawer.hc-drawer-opened:not(.drawer-side),.hc-menu-drawer.hc-drawer-opening:not(.drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.hc-drawer-right{right:0}.hc-drawer-container{position:relative;z-index:1;box-sizing:border-box;display:block;overflow:hidden}.hc-drawer-content{position:relative;z-index:1;display:block;height:100%;left:0;overflow:auto;padding:10px 20px;right:0;-webkit-transition-duration:.4s;transition-duration:.4s;-webkit-transition-property:margin-left,margin-right,-webkit-transform;transition-property:transform,margin-left,margin-right,-webkit-transform;-webkit-transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-timing-function:cubic-bezier(.25,.8,.25,1)}"]
                }] }
    ];
    /** @nocollapse */
    Drawer.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    Drawer.propDecorators = {
        mode: [{ type: Input }],
        align: [{ type: Input }],
        openStart: [{ type: Output }],
        closeStart: [{ type: Output }],
        _openStream: [{ type: Output, args: ['opened',] }],
        _closeStream: [{ type: Output, args: ['closed',] }],
        tabindex: [{ type: HostBinding }],
        _drawerClass: [{ type: HostBinding, args: ['class.hc-drawer',] }],
        opened: [{ type: Input }],
        _isOpened: [{ type: HostBinding, args: ['class.hc-drawer-opened',] }],
        _isOpening: [{ type: HostBinding, args: ['class.hc-drawer-opening',] }],
        _isClosed: [{ type: HostBinding, args: ['class.hc-drawer-closed',] }],
        _isClosing: [{ type: HostBinding, args: ['class.hc-drawer-closing',] }],
        _isRight: [{ type: HostBinding, args: ['class.hc-drawer-right',] }],
        _openState: [{ type: HostBinding, args: ['@openState',] }],
        _onAnimationStart: [{ type: HostListener, args: ['@openState.start', ['$event'],] }],
        _onAnimationEnd: [{ type: HostListener, args: ['@openState.done', ['$event'],] }],
        _onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return Drawer;
}());
export { Drawer };
if (false) {
    /** @type {?} */
    Drawer.prototype._openChange;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._mode;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._align;
    /**
     * Tabindex of the element
     * @type {?}
     */
    Drawer.prototype.tabindex;
    /** @type {?} */
    Drawer.prototype._drawerClass;
    /** @type {?} */
    Drawer.prototype._animationStarted;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._animationDisabled;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._drawerOpened;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._animationPromise;
    /**
     * @type {?}
     * @private
     */
    Drawer.prototype._resolveAnimationPromise;
    /**
     * @type {?}
     * @protected
     */
    Drawer.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,