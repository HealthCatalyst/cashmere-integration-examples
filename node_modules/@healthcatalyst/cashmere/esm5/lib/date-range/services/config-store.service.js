/**
 * @fileoverview added by tsickle
 * Generated from: lib/date-range/services/config-store.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
var ConfigStoreService = /** @class */ (function () {
    function ConfigStoreService() {
        var _this = this;
        this.defaultOptions = {
            presets: [],
            format: 'medium',
            mode: 'date',
            hourCycle: 12,
            excludeWeekends: false,
            locale: 'en-us',
            applyLabel: 'Apply',
            cancelLabel: 'Cancel',
            startDatePrefix: 'Start date:',
            endDatePrefix: 'End date:',
            invalidDateLabel: 'Please enter valid date'
        };
        this.dateRangeOptionsSubject = new BehaviorSubject(this.defaultOptions);
        this.rangeUpdateSubject = new BehaviorSubject({ fromDate: undefined, toDate: undefined });
        this.presetUpdateSubject = new BehaviorSubject({
            fromDate: undefined,
            toDate: undefined
        });
        this.weekendFilter = (/**
         * @return {?}
         */
        function () { return true; });
        this.emptyWeekendFilter = (/**
         * @return {?}
         */
        function () { return true; });
        this.excludeWeekendFilter = (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var day = d.getDay();
            return day !== 0 && day !== 6;
        });
        this.dateRangeOptions$ = this.dateRangeOptionsSubject.pipe(map((/**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            return tslib_1.__assign({}, _this.defaultOptions, options);
        })), tap((/**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (!!options.excludeWeekends) {
                _this.weekendFilter = _this.excludeWeekendFilter;
            }
            else {
                _this.weekendFilter = _this.emptyWeekendFilter;
            }
        })));
        this.rangeUpdate$ = this.rangeUpdateSubject.pipe();
        this.presetUpdate$ = this.presetUpdateSubject.pipe();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    ConfigStoreService.prototype.updateDateRangeOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.dateRangeOptionsSubject.next(options);
    };
    /**
     * @param {?} dateRange
     * @return {?}
     */
    ConfigStoreService.prototype.updateRange = /**
     * @param {?} dateRange
     * @return {?}
     */
    function (dateRange) {
        this.rangeUpdateSubject.next(dateRange);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ConfigStoreService.prototype.updatePreset = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.presetUpdateSubject.next(value);
    };
    ConfigStoreService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ConfigStoreService.ctorParameters = function () { return []; };
    return ConfigStoreService;
}());
export { ConfigStoreService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.defaultOptions;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.dateRangeOptionsSubject;
    /** @type {?} */
    ConfigStoreService.prototype.dateRangeOptions$;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.rangeUpdateSubject;
    /** @type {?} */
    ConfigStoreService.prototype.rangeUpdate$;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.presetUpdateSubject;
    /** @type {?} */
    ConfigStoreService.prototype.presetUpdate$;
    /** @type {?} */
    ConfigStoreService.prototype.weekendFilter;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.emptyWeekendFilter;
    /**
     * @type {?}
     * @private
     */
    ConfigStoreService.prototype.excludeWeekendFilter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXN0b3JlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvZGF0ZS1yYW5nZS9zZXJ2aWNlcy9jb25maWctc3RvcmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBYSxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFakQsT0FBTyxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QztJQW9DSTtRQUFBLGlCQW1CQztRQXJETyxtQkFBYyxHQUFxQjtZQUN2QyxPQUFPLEVBQUUsRUFBRTtZQUNYLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLElBQUksRUFBRSxNQUFNO1lBQ1osU0FBUyxFQUFFLEVBQUU7WUFDYixlQUFlLEVBQUUsS0FBSztZQUN0QixNQUFNLEVBQUUsT0FBTztZQUNmLFVBQVUsRUFBRSxPQUFPO1lBQ25CLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLGVBQWUsRUFBRSxhQUFhO1lBQzlCLGFBQWEsRUFBRSxXQUFXO1lBQzFCLGdCQUFnQixFQUFFLHlCQUF5QjtTQUM5QyxDQUFDO1FBRU0sNEJBQXVCLEdBQXNDLElBQUksZUFBZSxDQUFtQixJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFHeEgsdUJBQWtCLEdBQStCLElBQUksZUFBZSxDQUFZLEVBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztRQUcxSCx3QkFBbUIsR0FBd0MsSUFBSSxlQUFlLENBQXFCO1lBQ3ZHLFFBQVEsRUFBRSxTQUFTO1lBQ25CLE1BQU0sRUFBRSxTQUFTO1NBQ3BCLENBQUMsQ0FBQztRQUdJLGtCQUFhOzs7UUFBc0IsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJLEVBQUM7UUFFcEMsdUJBQWtCOzs7UUFBRyxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUksRUFBQztRQUNoQyx5QkFBb0I7Ozs7UUFBRyxVQUFDLENBQU87O2dCQUN0QyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUN0QixPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLEVBQUM7UUFHRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FDdEQsR0FBRzs7OztRQUFDLFVBQUMsT0FBeUI7WUFDMUIsNEJBQ08sS0FBSSxDQUFDLGNBQWMsRUFDbkIsT0FBTyxFQUNaO1FBQ04sQ0FBQyxFQUFDLEVBQ0YsR0FBRzs7OztRQUFDLFVBQUMsT0FBeUI7WUFDMUIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRTtnQkFDM0IsS0FBSSxDQUFDLGFBQWEsR0FBRyxLQUFJLENBQUMsb0JBQW9CLENBQUM7YUFDbEQ7aUJBQU07Z0JBQ0gsS0FBSSxDQUFDLGFBQWEsR0FBRyxLQUFJLENBQUMsa0JBQWtCLENBQUM7YUFDaEQ7UUFDTCxDQUFDLEVBQUMsQ0FDTCxDQUFDO1FBRUYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekQsQ0FBQzs7Ozs7SUFFRCxtREFBc0I7Ozs7SUFBdEIsVUFBdUIsT0FBeUI7UUFDNUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7OztJQUVELHdDQUFXOzs7O0lBQVgsVUFBWSxTQUFvQjtRQUM1QixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7O0lBRUQseUNBQVk7Ozs7SUFBWixVQUFhLEtBQXlCO1FBQ2xDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQzs7Z0JBbkVKLFVBQVU7Ozs7SUFvRVgseUJBQUM7Q0FBQSxBQXBFRCxJQW9FQztTQW5FWSxrQkFBa0I7Ozs7OztJQUMzQiw0Q0FZRTs7Ozs7SUFFRixxREFBZ0k7O0lBQ2hJLCtDQUF1RDs7Ozs7SUFFdkQsZ0RBQWtJOztJQUNsSSwwQ0FBMkM7Ozs7O0lBRTNDLGlEQUdHOztJQUNILDJDQUFxRDs7SUFFckQsMkNBQXFEOzs7OztJQUVyRCxnREFBaUQ7Ozs7O0lBQ2pELGtEQUdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGF0ZVJhbmdlT3B0aW9ucywgRGF0ZVJhbmdlfSBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XG5pbXBvcnQge09ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0R9IGZyb20gJy4uLy4uL2RhdGVwaWNrZXInO1xuaW1wb3J0IHttYXAsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29uZmlnU3RvcmVTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGRlZmF1bHRPcHRpb25zOiBEYXRlUmFuZ2VPcHRpb25zID0ge1xuICAgICAgICBwcmVzZXRzOiBbXSxcbiAgICAgICAgZm9ybWF0OiAnbWVkaXVtJyxcbiAgICAgICAgbW9kZTogJ2RhdGUnLFxuICAgICAgICBob3VyQ3ljbGU6IDEyLFxuICAgICAgICBleGNsdWRlV2Vla2VuZHM6IGZhbHNlLFxuICAgICAgICBsb2NhbGU6ICdlbi11cycsXG4gICAgICAgIGFwcGx5TGFiZWw6ICdBcHBseScsXG4gICAgICAgIGNhbmNlbExhYmVsOiAnQ2FuY2VsJyxcbiAgICAgICAgc3RhcnREYXRlUHJlZml4OiAnU3RhcnQgZGF0ZTonLFxuICAgICAgICBlbmREYXRlUHJlZml4OiAnRW5kIGRhdGU6JyxcbiAgICAgICAgaW52YWxpZERhdGVMYWJlbDogJ1BsZWFzZSBlbnRlciB2YWxpZCBkYXRlJ1xuICAgIH07XG5cbiAgICBwcml2YXRlIGRhdGVSYW5nZU9wdGlvbnNTdWJqZWN0OiBCZWhhdmlvclN1YmplY3Q8RGF0ZVJhbmdlT3B0aW9ucz4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PERhdGVSYW5nZU9wdGlvbnM+KHRoaXMuZGVmYXVsdE9wdGlvbnMpO1xuICAgIHB1YmxpYyBkYXRlUmFuZ2VPcHRpb25zJDogT2JzZXJ2YWJsZTxEYXRlUmFuZ2VPcHRpb25zPjtcblxuICAgIHByaXZhdGUgcmFuZ2VVcGRhdGVTdWJqZWN0OiBCZWhhdmlvclN1YmplY3Q8RGF0ZVJhbmdlPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RGF0ZVJhbmdlPih7ZnJvbURhdGU6IHVuZGVmaW5lZCwgdG9EYXRlOiB1bmRlZmluZWR9KTtcbiAgICBwdWJsaWMgcmFuZ2VVcGRhdGUkOiBPYnNlcnZhYmxlPERhdGVSYW5nZT47XG5cbiAgICBwcml2YXRlIHByZXNldFVwZGF0ZVN1YmplY3Q6IEJlaGF2aW9yU3ViamVjdDxudW1iZXIgfCBEYXRlUmFuZ2U+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXIgfCBEYXRlUmFuZ2U+KHtcbiAgICAgICAgZnJvbURhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgdG9EYXRlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgICBwdWJsaWMgcHJlc2V0VXBkYXRlJDogT2JzZXJ2YWJsZTxudW1iZXIgfCBEYXRlUmFuZ2U+O1xuXG4gICAgcHVibGljIHdlZWtlbmRGaWx0ZXI6IChkOiBEKSA9PiBib29sZWFuID0gKCkgPT4gdHJ1ZTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZW1wdHlXZWVrZW5kRmlsdGVyID0gKCkgPT4gdHJ1ZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV4Y2x1ZGVXZWVrZW5kRmlsdGVyID0gKGQ6IERhdGUpOiBib29sZWFuID0+IHtcbiAgICAgICAgY29uc3QgZGF5ID0gZC5nZXREYXkoKTtcbiAgICAgICAgcmV0dXJuIGRheSAhPT0gMCAmJiBkYXkgIT09IDY7XG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRhdGVSYW5nZU9wdGlvbnMkID0gdGhpcy5kYXRlUmFuZ2VPcHRpb25zU3ViamVjdC5waXBlKFxuICAgICAgICAgICAgbWFwKChvcHRpb25zOiBEYXRlUmFuZ2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRhcCgob3B0aW9uczogRGF0ZVJhbmdlT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghIW9wdGlvbnMuZXhjbHVkZVdlZWtlbmRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2VuZEZpbHRlciA9IHRoaXMuZXhjbHVkZVdlZWtlbmRGaWx0ZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZW5kRmlsdGVyID0gdGhpcy5lbXB0eVdlZWtlbmRGaWx0ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnJhbmdlVXBkYXRlJCA9IHRoaXMucmFuZ2VVcGRhdGVTdWJqZWN0LnBpcGUoKTtcbiAgICAgICAgdGhpcy5wcmVzZXRVcGRhdGUkID0gdGhpcy5wcmVzZXRVcGRhdGVTdWJqZWN0LnBpcGUoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVEYXRlUmFuZ2VPcHRpb25zKG9wdGlvbnM6IERhdGVSYW5nZU9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5kYXRlUmFuZ2VPcHRpb25zU3ViamVjdC5uZXh0KG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHVwZGF0ZVJhbmdlKGRhdGVSYW5nZTogRGF0ZVJhbmdlKSB7XG4gICAgICAgIHRoaXMucmFuZ2VVcGRhdGVTdWJqZWN0Lm5leHQoZGF0ZVJhbmdlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVQcmVzZXQodmFsdWU6IG51bWJlciB8IERhdGVSYW5nZSkge1xuICAgICAgICB0aGlzLnByZXNldFVwZGF0ZVN1YmplY3QubmV4dCh2YWx1ZSk7XG4gICAgfVxufVxuIl19