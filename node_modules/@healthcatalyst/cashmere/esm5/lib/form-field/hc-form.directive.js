/**
 * @fileoverview added by tsickle
 * Generated from: lib/form-field/hc-form.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ContentChildren, QueryList } from '@angular/core';
import { parseBooleanAttribute } from '../util';
import { HcFormFieldComponent } from './hc-form-field.component';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
/**
 * `hcForm` directive that allows settings to be applied to all included HcFormFields
 */
var HcFormDirective = /** @class */ (function () {
    function HcFormDirective() {
        this._tight = false;
        this.unsubscribe$ = new Subject();
    }
    Object.defineProperty(HcFormDirective.prototype, "tight", {
        /** Set the tight parameter on all enclosed HcFormFields. *Defaults to `false`.*  */
        get: /**
         * Set the tight parameter on all enclosed HcFormFields. *Defaults to `false`.*
         * @return {?}
         */
        function () {
            return this._tight;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tight = parseBooleanAttribute(value);
            this._updateTightFields();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HcFormDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._updateTightFields();
        // Pass the tight setting to any FormFields added dynamically
        this._formFields.changes.pipe(takeUntil(this.unsubscribe$)).subscribe((/**
         * @return {?}
         */
        function () { return _this._updateTightFields(); }));
    };
    /**
     * @return {?}
     */
    HcFormDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    /**
     * @return {?}
     */
    HcFormDirective.prototype._updateTightFields = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._formFields) {
            this._formFields.forEach((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                field.tight = _this._tight;
            }));
        }
    };
    HcFormDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[hcForm]'
                },] }
    ];
    HcFormDirective.propDecorators = {
        _formFields: [{ type: ContentChildren, args: [HcFormFieldComponent,] }],
        tight: [{ type: Input }]
    };
    return HcFormDirective;
}());
export { HcFormDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcFormDirective.prototype._tight;
    /**
     * @type {?}
     * @private
     */
    HcFormDirective.prototype.unsubscribe$;
    /** @type {?} */
    HcFormDirective.prototype._formFields;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGMtZm9ybS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvZm9ybS1maWVsZC9oYy1mb3JtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQThCLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM5QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQzs7OztBQUc3QjtJQUFBO1FBSVksV0FBTSxHQUFZLEtBQUssQ0FBQztRQUN4QixpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFpQy9DLENBQUM7SUEzQkcsc0JBQ0ksa0NBQUs7UUFGVCxvRkFBb0Y7Ozs7O1FBQ3BGO1lBRUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7Ozs7O1FBQ0QsVUFBVSxLQUFLO1lBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUM5QixDQUFDOzs7T0FKQTs7OztJQU1ELDRDQUFrQjs7O0lBQWxCO1FBQUEsaUJBSUM7UUFIRyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxQiw2REFBNkQ7UUFDN0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGtCQUFrQixFQUFFLEVBQXpCLENBQXlCLEVBQUMsQ0FBQztJQUMzRyxDQUFDOzs7O0lBRUQscUNBQVc7OztJQUFYO1FBQ0ksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFFRCw0Q0FBa0I7OztJQUFsQjtRQUFBLGlCQU1DO1FBTEcsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsS0FBSztnQkFDMUIsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDO1lBQzlCLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOztnQkFyQ0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxVQUFVO2lCQUN2Qjs7OzhCQUtJLGVBQWUsU0FBQyxvQkFBb0I7d0JBSXBDLEtBQUs7O0lBMkJWLHNCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0FuQ1ksZUFBZTs7Ozs7O0lBQ3hCLGlDQUFnQzs7Ozs7SUFDaEMsdUNBQTJDOztJQUUzQyxzQ0FDNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5wdXQsIENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtwYXJzZUJvb2xlYW5BdHRyaWJ1dGV9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtIY0Zvcm1GaWVsZENvbXBvbmVudH0gZnJvbSAnLi9oYy1mb3JtLWZpZWxkLmNvbXBvbmVudCc7XG5pbXBvcnQge3Rha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuLyoqIGBoY0Zvcm1gIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyBzZXR0aW5ncyB0byBiZSBhcHBsaWVkIHRvIGFsbCBpbmNsdWRlZCBIY0Zvcm1GaWVsZHMgKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2hjRm9ybV0nXG59KVxuZXhwb3J0IGNsYXNzIEhjRm9ybURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfdGlnaHQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKEhjRm9ybUZpZWxkQ29tcG9uZW50KVxuICAgIF9mb3JtRmllbGRzOiBRdWVyeUxpc3Q8SGNGb3JtRmllbGRDb21wb25lbnQ+O1xuXG4gICAgLyoqIFNldCB0aGUgdGlnaHQgcGFyYW1ldGVyIG9uIGFsbCBlbmNsb3NlZCBIY0Zvcm1GaWVsZHMuICpEZWZhdWx0cyB0byBgZmFsc2VgLiogICovXG4gICAgQElucHV0KClcbiAgICBnZXQgdGlnaHQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aWdodDtcbiAgICB9XG4gICAgc2V0IHRpZ2h0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3RpZ2h0ID0gcGFyc2VCb29sZWFuQXR0cmlidXRlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVGlnaHRGaWVsZHMoKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVRpZ2h0RmllbGRzKCk7XG4gICAgICAgIC8vIFBhc3MgdGhlIHRpZ2h0IHNldHRpbmcgdG8gYW55IEZvcm1GaWVsZHMgYWRkZWQgZHluYW1pY2FsbHlcbiAgICAgICAgdGhpcy5fZm9ybUZpZWxkcy5jaGFuZ2VzLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKCgpID0+IHRoaXMuX3VwZGF0ZVRpZ2h0RmllbGRzKCkpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlJC5uZXh0KCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgX3VwZGF0ZVRpZ2h0RmllbGRzKCkge1xuICAgICAgICBpZiAodGhpcy5fZm9ybUZpZWxkcykge1xuICAgICAgICAgICAgdGhpcy5fZm9ybUZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgICBmaWVsZC50aWdodCA9IHRoaXMuX3RpZ2h0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=