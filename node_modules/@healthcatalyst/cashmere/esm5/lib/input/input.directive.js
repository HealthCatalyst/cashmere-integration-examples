/**
 * @fileoverview added by tsickle
 * Generated from: lib/input/input.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostBinding, HostListener, Input, Optional, Self, forwardRef } from '@angular/core';
import { parseBooleanAttribute } from '../util';
import { HcFormControlComponent } from '../form-field/hc-form-control.component';
import { FormGroupDirective, NgControl, NgForm } from '@angular/forms';
/**
 * @param {?} type
 * @return {?}
 */
export function getUnsupportedHCInputType(type) {
    return new Error("hc-input doesn't support the following type: " + type);
}
/** @type {?} */
var uniqueId = 1;
/** @type {?} */
var unsupportedTypes = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset'];
/**
 * Directive that allows a native input to work inside a HcFormFieldComponent
 */
var InputDirective = /** @class */ (function (_super) {
    tslib_1.__extends(InputDirective, _super);
    function InputDirective(_elementRef, _parentForm, _parentFormGroup, _ngControl) {
        var _this = _super.call(this) || this;
        _this._elementRef = _elementRef;
        _this._ngControl = _ngControl;
        _this._focused = false;
        _this._uniqueInputId = "hc-input-" + uniqueId++;
        _this._componentId = _this._uniqueInputId;
        _this._type = 'input';
        _this._readonly = false;
        _this._hostHcInputClass = true;
        _this._form = _parentForm || _parentFormGroup;
        return _this;
    }
    Object.defineProperty(InputDirective.prototype, "type", {
        /** Input type of the element. */
        get: /**
         * Input type of the element.
         * @return {?}
         */
        function () {
            return this._type;
        },
        set: /**
         * @param {?} type
         * @return {?}
         */
        function (type) {
            if (unsupportedTypes.indexOf(type) > -1) {
                throw getUnsupportedHCInputType(type);
            }
            this._type = type;
            // textArea doesn't have type property
            if (!this._isTextArea()) {
                this._elementRef.nativeElement.type = this.type;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDirective.prototype, "id", {
        /** Element id. */
        get: /**
         * Element id.
         * @return {?}
         */
        function () {
            return this._componentId || this._uniqueInputId;
        },
        set: /**
         * @param {?} idVal
         * @return {?}
         */
        function (idVal) {
            this._componentId = idVal ? idVal : this._uniqueInputId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDirective.prototype, "readonly", {
        /** Sets input element as readonly. */
        get: /**
         * Sets input element as readonly.
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        set: /**
         * @param {?} isReadOnly
         * @return {?}
         */
        function (isReadOnly) {
            this._readonly = parseBooleanAttribute(isReadOnly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDirective.prototype, "disabled", {
        /** Disables the input element. */
        get: /**
         * Disables the input element.
         * @return {?}
         */
        function () {
            if (this._ngControl && this._ngControl.disabled) {
                return this._ngControl.disabled;
            }
            return this._isDisabled;
        },
        set: /**
         * @param {?} disabledInput
         * @return {?}
         */
        function (disabledInput) {
            this._isDisabled = parseBooleanAttribute(disabledInput);
            if (this._focused) {
                this._focused = false;
                // TODO: trigger state change
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDirective.prototype, "required", {
        /** Sets required attribute. */
        get: /**
         * Sets required attribute.
         * @return {?}
         */
        function () {
            return this._isRequired;
        },
        set: /**
         * @param {?} requiredInput
         * @return {?}
         */
        function (requiredInput) {
            this._isRequired = parseBooleanAttribute(requiredInput);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDirective.prototype, "_hostId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._componentId || this._uniqueInputId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDirective.prototype, "_hostReadOnly", {
        get: /**
         * @return {?}
         */
        function () {
            return this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDirective.prototype, "_hostDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDirective.prototype, "_hostRequired", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isRequired;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputDirective.prototype._onBlur = /**
     * @return {?}
     */
    function () {
        this._changeFocus(false);
    };
    /**
     * @return {?}
     */
    InputDirective.prototype._onFocus = /**
     * @return {?}
     */
    function () {
        this._changeFocus(true);
    };
    Object.defineProperty(InputDirective.prototype, "value", {
        /** Sets value of the input element */
        get: /**
         * Sets value of the input element
         * @return {?}
         */
        function () {
            return this._elementRef.nativeElement.value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this.value) {
                this._elementRef.nativeElement.value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputDirective.prototype._inputEvent = /**
     * @return {?}
     */
    function () {
        // causes angular to run change detection on input event
    };
    /**
     * @return {?}
     */
    InputDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        // This needs to be checked every cycle because we can't subscribe to form submissions
        if (this._ngControl) {
            this._updateErrorState();
        }
    };
    /** Sets the focus on the input element */
    /**
     * Sets the focus on the input element
     * @return {?}
     */
    InputDirective.prototype.focus = /**
     * Sets the focus on the input element
     * @return {?}
     */
    function () {
        this._elementRef.nativeElement.focus();
    };
    /**
     * @private
     * @param {?} focused
     * @return {?}
     */
    InputDirective.prototype._changeFocus = /**
     * @private
     * @param {?} focused
     * @return {?}
     */
    function (focused) {
        if (this._focused !== focused && !this.readonly) {
            this._focused = focused;
            // TODO: trigger state change
        }
    };
    /**
     * @private
     * @return {?}
     */
    InputDirective.prototype._isTextArea = /**
     * @private
     * @return {?}
     */
    function () {
        return this._elementRef.nativeElement.nodeName.toLowerCase() !== 'textarea';
    };
    /**
     * @private
     * @return {?}
     */
    InputDirective.prototype._updateErrorState = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oldState = this._errorState;
        // TODO: this could be abstracted out as an @Input() if we need this to be configurable
        /** @type {?} */
        var newState = !!(this._ngControl &&
            this._ngControl.invalid &&
            (this._ngControl.touched || (this._form && this._form.submitted)));
        if (oldState !== newState) {
            this._errorState = newState;
        }
    };
    InputDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[hcInput]',
                    providers: [{ provide: HcFormControlComponent, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return InputDirective; })) }]
                },] }
    ];
    /** @nocollapse */
    InputDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    InputDirective.propDecorators = {
        type: [{ type: Input }],
        id: [{ type: Input }],
        readonly: [{ type: Input }],
        disabled: [{ type: Input }],
        required: [{ type: Input }],
        _hostHcInputClass: [{ type: HostBinding, args: ['class.hc-input',] }],
        _hostId: [{ type: HostBinding, args: ['attr.id',] }],
        _hostReadOnly: [{ type: HostBinding, args: ['readonly',] }],
        _hostDisabled: [{ type: HostBinding, args: ['disabled',] }],
        _hostRequired: [{ type: HostBinding, args: ['required',] }],
        _onBlur: [{ type: HostListener, args: ['blur',] }],
        _onFocus: [{ type: HostListener, args: ['focus',] }],
        value: [{ type: Input }],
        _inputEvent: [{ type: HostListener, args: ['input',] }]
    };
    return InputDirective;
}(HcFormControlComponent));
export { InputDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._focused;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._uniqueInputId;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._form;
    /** @type {?} */
    InputDirective.prototype._componentId;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._type;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._readonly;
    /** @type {?} */
    InputDirective.prototype._hostHcInputClass;
    /**
     * @type {?}
     * @private
     */
    InputDirective.prototype._elementRef;
    /** @type {?} */
    InputDirective.prototype._ngControl;
}
//# sourceMappingURL=data:application/json;base64,