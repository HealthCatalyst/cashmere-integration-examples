/**
 * @fileoverview added by tsickle
 * Generated from: lib/scroll-nav/content/scroll-nav-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, ViewChild, EventEmitter, Output, QueryList, ContentChildren, HostListener } from '@angular/core';
import { CdkScrollable } from '@angular/cdk/scrolling';
import { Subject } from 'rxjs';
import { HcScrollNavComponent } from '../nav/scroll-nav.component';
import { takeUntil } from 'rxjs/operators';
import { ScrollNavTargetDirective } from './scroll-nav-target.directive';
/**
 * Contains scrollable content that is navigable via `hc-scroll-nav` links.
 */
var HcScrollNavContentComponent = /** @class */ (function () {
    function HcScrollNavContentComponent() {
        this.DEFAULT_BUFFER = 40;
        /**
         * If true, will force the height of the final scroll target area to be the height of the scrollable container.
         * This is helpful if you want the last target in the content area to be able to scroll to the top. You can alternatively
         * target the last item with css. *Defaults to true.*
         */
        this.makeLastTargetFullHeight = true;
        /**
         * Number in pixels, used to give a little leeway in the shifting of the active nav when scrolling. *Defaults to 40.*
         * Example: Left at default, if showing just the bottom 40 pixels of the section before, count the next section as active.
         */
        this.bufferSpace = this.DEFAULT_BUFFER;
        /**
         * If true, applies smooth scrolling via css. *Defaults to true.*
         */
        this.shouldAnimateScroll = true;
        /**
         * Fires when a new section is scrolled into view. Broadcasts the id of that section.
         */
        this.newSectionInView = new EventEmitter();
        this.unsubscribe$ = new Subject();
        this.minHeightForLastTargetSet = false;
    }
    Object.defineProperty(HcScrollNavContentComponent.prototype, "_scrollTargets", {
        get: /**
         * @return {?}
         */
        function () {
            return this.targets.toArray().map((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t._el.nativeElement; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HcScrollNavContentComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    /**
     * @return {?}
     */
    HcScrollNavContentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._cdkScrollableElement) {
            this._cdkScrollableElement
                .elementScrolled()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.checkActiveSection();
            }));
        }
    };
    /**
     * @return {?}
     */
    HcScrollNavContentComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this.makeLastTargetFullHeight && !this.minHeightForLastTargetSet) {
            this.insureMinHeightForLastTarget();
        }
    };
    /**
     * @return {?}
     */
    HcScrollNavContentComponent.prototype._onWindowResize = /**
     * @return {?}
     */
    function () {
        if (this.makeLastTargetFullHeight) {
            this.minHeightForLastTargetSet = false;
        }
    };
    /** Scroll to top and reset the "automatic full height for the last item" setting. */
    /**
     * Scroll to top and reset the "automatic full height for the last item" setting.
     * @return {?}
     */
    HcScrollNavContentComponent.prototype.refresh = /**
     * Scroll to top and reset the "automatic full height for the last item" setting.
     * @return {?}
     */
    function () {
        this.scrollToTop();
        this.minHeightForLastTargetSet = false;
    };
    /** Helper function to scroll to the top of the content area. */
    /**
     * Helper function to scroll to the top of the content area.
     * @return {?}
     */
    HcScrollNavContentComponent.prototype.scrollToTop = /**
     * Helper function to scroll to the top of the content area.
     * @return {?}
     */
    function () {
        this._cdkScrollableElement.scrollTo({ top: 0 });
    };
    /** Will update the navigation state. */
    /**
     * Will update the navigation state.
     * @return {?}
     */
    HcScrollNavContentComponent.prototype.checkActiveSection = /**
     * Will update the navigation state.
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var offset = this._cdkScrollableElement.measureScrollOffset('top') + this._scrollTargets[0].offsetTop;
        this._scrollTargets.forEach((/**
         * @param {?} t
         * @param {?} index
         * @return {?}
         */
        function (t, index) {
            /** @type {?} */
            var el = t;
            /** @type {?} */
            var initialOffset = 0;
            /** @type {?} */
            var nextOffset = 0;
            if (index > 0) {
                initialOffset = el.offsetTop - _this.bufferSpace;
            }
            if (index + 1 < _this._scrollTargets.length) {
                /** @type {?} */
                var nextEl = _this._scrollTargets[index + 1];
                nextOffset = nextEl.offsetTop;
            }
            if ((initialOffset && nextOffset && offset >= initialOffset && offset < nextOffset) ||
                (initialOffset && !nextOffset && offset >= initialOffset) ||
                (!initialOffset && nextOffset && offset < nextOffset)) {
                _this.setActiveClass(el.getAttribute('id') || '');
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    HcScrollNavContentComponent.prototype.insureMinHeightForLastTarget = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containerHeight = this._cdkScrollableElement.getElementRef().nativeElement.offsetHeight;
        if (containerHeight && this._scrollTargets.length > 0) {
            /** @type {?} */
            var targetEl = this._scrollTargets[this._scrollTargets.length - 1];
            targetEl.style.minHeight = containerHeight + 50 + "px";
            this.minHeightForLastTargetSet = true;
        }
    };
    /**
     * @private
     * @param {?} scrollTarget
     * @return {?}
     */
    HcScrollNavContentComponent.prototype.setActiveClass = /**
     * @private
     * @param {?} scrollTarget
     * @return {?}
     */
    function (scrollTarget) {
        if (this.sectionInView !== scrollTarget) {
            this.sectionInView = scrollTarget;
            this.nav._setActiveClassById(scrollTarget);
            this.newSectionInView.next(scrollTarget);
        }
    };
    HcScrollNavContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-scroll-nav-content',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div #scrollContainer class=\"hc-scroll-nav-content-container\" [ngClass]=\"{'hc-scroll-nav-smooth': shouldAnimateScroll}\" cdk-scrollable>\n  <ng-content></ng-content>\n</div>",
                    styles: [".hc-scroll-nav-content-container{max-height:100%;overflow:scroll;overflow-x:hidden;width:100%}.hc-scroll-nav-smooth{scroll-behavior:smooth}"]
                }] }
    ];
    HcScrollNavContentComponent.propDecorators = {
        nav: [{ type: Input }],
        makeLastTargetFullHeight: [{ type: Input }],
        bufferSpace: [{ type: Input }],
        shouldAnimateScroll: [{ type: Input }],
        newSectionInView: [{ type: Output }],
        _cdkScrollableElement: [{ type: ViewChild, args: ['scrollContainer', { read: CdkScrollable, static: false },] }],
        targets: [{ type: ContentChildren, args: [ScrollNavTargetDirective,] }],
        _onWindowResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return HcScrollNavContentComponent;
}());
export { HcScrollNavContentComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcScrollNavContentComponent.prototype.DEFAULT_BUFFER;
    /**
     * Reference to the scroll nav component.
     * @type {?}
     */
    HcScrollNavContentComponent.prototype.nav;
    /**
     * If true, will force the height of the final scroll target area to be the height of the scrollable container.
     * This is helpful if you want the last target in the content area to be able to scroll to the top. You can alternatively
     * target the last item with css. *Defaults to true.*
     * @type {?}
     */
    HcScrollNavContentComponent.prototype.makeLastTargetFullHeight;
    /**
     * Number in pixels, used to give a little leeway in the shifting of the active nav when scrolling. *Defaults to 40.*
     * Example: Left at default, if showing just the bottom 40 pixels of the section before, count the next section as active.
     * @type {?}
     */
    HcScrollNavContentComponent.prototype.bufferSpace;
    /**
     * If true, applies smooth scrolling via css. *Defaults to true.*
     * @type {?}
     */
    HcScrollNavContentComponent.prototype.shouldAnimateScroll;
    /**
     * Fires when a new section is scrolled into view. Broadcasts the id of that section.
     * @type {?}
     */
    HcScrollNavContentComponent.prototype.newSectionInView;
    /** @type {?} */
    HcScrollNavContentComponent.prototype._cdkScrollableElement;
    /**
     * @type {?}
     * @private
     */
    HcScrollNavContentComponent.prototype.targets;
    /**
     * Id of the current section scrolled into view.
     * @type {?}
     */
    HcScrollNavContentComponent.prototype.sectionInView;
    /**
     * @type {?}
     * @private
     */
    HcScrollNavContentComponent.prototype.unsubscribe$;
    /**
     * @type {?}
     * @private
     */
    HcScrollNavContentComponent.prototype.minHeightForLastTargetSet;
}
//# sourceMappingURL=data:application/json;base64,