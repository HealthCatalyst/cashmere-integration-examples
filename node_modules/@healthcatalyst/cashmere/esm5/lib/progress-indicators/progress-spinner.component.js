/**
 * @fileoverview added by tsickle
 * Generated from: lib/progress-indicators/progress-spinner.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
/** @type {?} */
var supportedColors = ['blue', 'green', 'purple', 'orange', 'red', 'gray', 'white'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateColorInput(inputStr) {
    if (supportedColors.indexOf(inputStr) < 0) {
        throw Error('Unsupported progress spinner color value: ' + inputStr);
    }
}
var ProgressSpinnerComponent = /** @class */ (function () {
    function ProgressSpinnerComponent() {
        this._color = 'blue';
        /**
         * If true, the spinner will center itself inside its container.
         */
        this.isCentered = true;
        /**
         * If true, include background "channel" circle.
         */
        this.hasChannel = true;
        /**
         * If true, switches to determinate mode. Must pass in progress (0-100%), instead of having the loader spin freely.
         */
        this.isDeterminate = false;
        this._rightCircleTransform = '';
        this._leftCircleTransform = '';
        this._rightCircleTransition = '';
        this._leftCircleTransition = '';
        this._progress = 0;
        this._diameter = 0;
        this._minDiameter = 20;
        this._maxDiameter = 250;
    }
    Object.defineProperty(ProgressSpinnerComponent.prototype, "color", {
        /** Color of the spinner: `blue`, `green`, `purple`, `orange`, `red`, `gray`, `white` */
        get: /**
         * Color of the spinner: `blue`, `green`, `purple`, `orange`, `red`, `gray`, `white`
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} colorVal
         * @return {?}
         */
        function (colorVal) {
            validateColorInput(colorVal);
            this._color = colorVal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressSpinnerComponent.prototype, "progress", {
        get: /**
         * @return {?}
         */
        function () {
            return this._progress;
        },
        /** (0-100%) Only used if "isDeterminate" is set to true. */
        set: /**
         * (0-100%) Only used if "isDeterminate" is set to true.
         * @param {?} progress
         * @return {?}
         */
        function (progress) {
            this.setProgress(progress);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressSpinnerComponent.prototype, "diameter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._diameter;
        },
        /** Set the diameter of the circle, in pixels. Minimum is 20, maximum is 250. */
        set: /**
         * Set the diameter of the circle, in pixels. Minimum is 20, maximum is 250.
         * @param {?} diameter
         * @return {?}
         */
        function (diameter) {
            this._diameter = Math.min(Math.max(this._minDiameter, diameter), this._maxDiameter);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} progress
     * @return {?}
     */
    ProgressSpinnerComponent.prototype.setProgress = /**
     * @private
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        progress = Math.min(100, progress);
        progress = Math.max(0, progress);
        this.setProgressTransition(progress);
        this.setProgressTransform(progress);
        this._progress = progress;
    };
    /**
     * @private
     * @param {?} progress
     * @return {?}
     */
    ProgressSpinnerComponent.prototype.setProgressTransition = /**
     * @private
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        /** @type {?} */
        var sizeBasedTime = this.diameter > 150 ? 0.6 : 0.4;
        /** @type {?} */
        var timing = Math.abs(progress - this._progress) > 40 ? sizeBasedTime : sizeBasedTime / 2;
        /** @type {?} */
        var halfTime = timing / 2;
        if ((progress <= 50 && this._progress <= 50) || (progress >= 51 && this._progress >= 51)) {
            this._leftCircleTransition = "transform " + timing + "s ease-in-out 0s";
            this._rightCircleTransition = "transform " + timing + "s ease-in-out 0s";
        }
        else if (progress <= 50 && this._progress >= 51) {
            this._leftCircleTransition = "transform " + halfTime + "s ease-in 0s";
            this._rightCircleTransition = "transform " + halfTime + "s ease-out " + (halfTime - 0.001) + "s";
        }
        else if (progress >= 51 && this._progress <= 50) {
            this._leftCircleTransition = "transform " + halfTime + "s ease-out " + (halfTime - 0.001) + "s";
            this._rightCircleTransition = "transform " + halfTime + "s ease-in 0s";
        }
    };
    /**
     * Using a somewhat complicated set of transforms to achive the animation.
     * For 0% to 50% the right circle element rotates from -135deg to 45deg
     * For 51% to 100% the left circle element rotates from 135deg to 315deg
     */
    /**
     * Using a somewhat complicated set of transforms to achive the animation.
     * For 0% to 50% the right circle element rotates from -135deg to 45deg
     * For 51% to 100% the left circle element rotates from 135deg to 315deg
     * @private
     * @param {?} progress
     * @return {?}
     */
    ProgressSpinnerComponent.prototype.setProgressTransform = /**
     * Using a somewhat complicated set of transforms to achive the animation.
     * For 0% to 50% the right circle element rotates from -135deg to 45deg
     * For 51% to 100% the left circle element rotates from 135deg to 315deg
     * @private
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        if (progress <= 50) {
            /** @type {?} */
            var rightDegrees = (progress / 50) * 180 - 135;
            this._rightCircleTransform = "rotate(" + rightDegrees + "deg)";
            this._leftCircleTransform = "rotate(135deg)";
        }
        else if (progress >= 51) {
            /** @type {?} */
            var leftDegrees = ((progress - 50) / 50) * 180 + 135;
            this._leftCircleTransform = "rotate(" + leftDegrees + "deg)";
            this._rightCircleTransform = 'rotate(45deg)';
        }
    };
    ProgressSpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-progress-spinner',
                    template: "<div class=\"hc-spinner-container\" [ngClass]=\"{'center-spinner': isCentered }\">\n    <div class=\"hc-spinner\" \n        [ngClass]=\"{'indeterminate-spin': !isDeterminate, 'large-spinner': diameter >= 150 }\"\n        [style.width.px]=\"diameter\"\n        [style.height.px]=\"diameter\"\n        [style.marginTop.px]=\"isCentered ? diameter / -2 : 0\"\n        [style.marginLeft.px]=\"isCentered ? diameter / -2 : 0\">\n        <div class=\"spinner-layer spinner-{{color}}\" [ngClass]=\"{'spinner-base': hasChannel }\">\n            <div class=\"circle base-circle\"></div>\n            <div class=\"circle-clipper left\"><div class=\"circle\" [style.transform]=\"_leftCircleTransform\" [style.transition]=\"_leftCircleTransition\"></div>\n            </div><div class=\"gap-patch\"><div class=\"circle\"></div>\n            </div><div class=\"circle-clipper right\"><div class=\"circle\" [style.transform]=\"_rightCircleTransform\" [style.transition]=\"_rightCircleTransition\"></div></div>\n        </div>\n    </div>\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    ProgressSpinnerComponent.propDecorators = {
        color: [{ type: Input }],
        isCentered: [{ type: Input }],
        hasChannel: [{ type: Input }],
        isDeterminate: [{ type: Input }],
        progress: [{ type: Input }],
        diameter: [{ type: Input }]
    };
    return ProgressSpinnerComponent;
}());
export { ProgressSpinnerComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._color;
    /**
     * If true, the spinner will center itself inside its container.
     * @type {?}
     */
    ProgressSpinnerComponent.prototype.isCentered;
    /**
     * If true, include background "channel" circle.
     * @type {?}
     */
    ProgressSpinnerComponent.prototype.hasChannel;
    /**
     * If true, switches to determinate mode. Must pass in progress (0-100%), instead of having the loader spin freely.
     * @type {?}
     */
    ProgressSpinnerComponent.prototype.isDeterminate;
    /** @type {?} */
    ProgressSpinnerComponent.prototype._rightCircleTransform;
    /** @type {?} */
    ProgressSpinnerComponent.prototype._leftCircleTransform;
    /** @type {?} */
    ProgressSpinnerComponent.prototype._rightCircleTransition;
    /** @type {?} */
    ProgressSpinnerComponent.prototype._leftCircleTransition;
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._progress;
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._diameter;
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._minDiameter;
    /**
     * @type {?}
     * @private
     */
    ProgressSpinnerComponent.prototype._maxDiameter;
}
//# sourceMappingURL=data:application/json;base64,