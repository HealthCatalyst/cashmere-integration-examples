/**
 * @fileoverview added by tsickle
 * Generated from: lib/progress-indicators/progress-dots.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
/** @type {?} */
var supportedColors = ['light', 'dark'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateColorInput(inputStr) {
    if (supportedColors.indexOf(inputStr) < 0) {
        throw Error('Unsupported progress dots color value: ' + inputStr);
    }
}
var ProgressDotsComponent = /** @class */ (function () {
    function ProgressDotsComponent() {
        this._color = 'dark';
        /**
         * If true, the loader will center itself within its container.
         */
        this.isCentered = true;
        /**
         * If true, you'll get a teeny tiny little loader.
         */
        this.isMini = false;
    }
    Object.defineProperty(ProgressDotsComponent.prototype, "color", {
        /** Use `light` on darker backgrounds and `dark` for lighter backgrounds. */
        get: /**
         * Use `light` on darker backgrounds and `dark` for lighter backgrounds.
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} colorVal
         * @return {?}
         */
        function (colorVal) {
            validateColorInput(colorVal);
            this._color = colorVal;
        },
        enumerable: true,
        configurable: true
    });
    ProgressDotsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-progress-dots',
                    template: "<div class=\"hc-dots-container\" [ngClass]=\"{'center-dots': isCentered }\">\n    <div class=\"hc-dots-loader\" [ngClass]=\"{'loader-light': color === 'light', 'loader-mini': isMini}\">\n        <div class=\"loader-animate\"></div>\n    </div>\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    ProgressDotsComponent.propDecorators = {
        color: [{ type: Input }],
        isCentered: [{ type: Input }],
        isMini: [{ type: Input }]
    };
    return ProgressDotsComponent;
}());
export { ProgressDotsComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProgressDotsComponent.prototype._color;
    /**
     * If true, the loader will center itself within its container.
     * @type {?}
     */
    ProgressDotsComponent.prototype.isCentered;
    /**
     * If true, you'll get a teeny tiny little loader.
     * @type {?}
     */
    ProgressDotsComponent.prototype.isMini;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtZG90cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcHJvZ3Jlc3MtaW5kaWNhdG9ycy9wcm9ncmVzcy1kb3RzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDOztJQUU1RCxlQUFlLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDOzs7OztBQUV6QyxNQUFNLFVBQVUsa0JBQWtCLENBQUMsUUFBZ0I7SUFDL0MsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN2QyxNQUFNLEtBQUssQ0FBQyx5Q0FBeUMsR0FBRyxRQUFRLENBQUMsQ0FBQztLQUNyRTtBQUNMLENBQUM7QUFFRDtJQUFBO1FBTVksV0FBTSxHQUFHLE1BQU0sQ0FBQzs7OztRQWVqQixlQUFVLEdBQUcsSUFBSSxDQUFDOzs7O1FBR2xCLFdBQU0sR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQWhCRyxzQkFDSSx3Q0FBSztRQUZULDRFQUE0RTs7Ozs7UUFDNUU7WUFFSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkIsQ0FBQzs7Ozs7UUFFRCxVQUFVLFFBQWdCO1lBQ3RCLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQzNCLENBQUM7OztPQUxBOztnQkFaSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsdVFBQTJDO29CQUMzQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtpQkFDeEM7Ozt3QkFLSSxLQUFLOzZCQVdMLEtBQUs7eUJBR0wsS0FBSzs7SUFFViw0QkFBQztDQUFBLEFBekJELElBeUJDO1NBcEJZLHFCQUFxQjs7Ozs7O0lBQzlCLHVDQUF3Qjs7Ozs7SUFjeEIsMkNBQ3lCOzs7OztJQUV6Qix1Q0FDc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9ufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3Qgc3VwcG9ydGVkQ29sb3JzID0gWydsaWdodCcsICdkYXJrJ107XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbG9ySW5wdXQoaW5wdXRTdHI6IHN0cmluZykge1xuICAgIGlmIChzdXBwb3J0ZWRDb2xvcnMuaW5kZXhPZihpbnB1dFN0cikgPCAwKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdVbnN1cHBvcnRlZCBwcm9ncmVzcyBkb3RzIGNvbG9yIHZhbHVlOiAnICsgaW5wdXRTdHIpO1xuICAgIH1cbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdoYy1wcm9ncmVzcy1kb3RzJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2dyZXNzLWRvdHMuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NEb3RzQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIF9jb2xvciA9ICdkYXJrJztcblxuICAgIC8qKiBVc2UgYGxpZ2h0YCBvbiBkYXJrZXIgYmFja2dyb3VuZHMgYW5kIGBkYXJrYCBmb3IgbGlnaHRlciBiYWNrZ3JvdW5kcy4gKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBjb2xvcigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3I7XG4gICAgfVxuXG4gICAgc2V0IGNvbG9yKGNvbG9yVmFsOiBzdHJpbmcpIHtcbiAgICAgICAgdmFsaWRhdGVDb2xvcklucHV0KGNvbG9yVmFsKTtcbiAgICAgICAgdGhpcy5fY29sb3IgPSBjb2xvclZhbDtcbiAgICB9XG5cbiAgICAvKiogSWYgdHJ1ZSwgdGhlIGxvYWRlciB3aWxsIGNlbnRlciBpdHNlbGYgd2l0aGluIGl0cyBjb250YWluZXIuICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaXNDZW50ZXJlZCA9IHRydWU7XG4gICAgLyoqIElmIHRydWUsIHlvdSdsbCBnZXQgYSB0ZWVueSB0aW55IGxpdHRsZSBsb2FkZXIuICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaXNNaW5pID0gZmFsc2U7XG59XG4iXX0=