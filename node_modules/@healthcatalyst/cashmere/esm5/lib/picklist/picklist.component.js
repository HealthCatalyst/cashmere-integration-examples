/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/picklist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { PicklistOptionsSource, PicklistSettings } from './picklist.model';
/** @type {?} */
var supportedSortModes = ['asc', 'desc', 'none'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateSortInput(inputStr) {
    if (supportedSortModes.indexOf(inputStr) < 0) {
        throw Error('Unsupported sort input value: ' + inputStr);
    }
}
var PicklistComponent = /** @class */ (function () {
    function PicklistComponent() {
        /**
         * Fired when a change is made to the picklist selection.
         */
        this.changed = new EventEmitter();
        this.picklistSettings = new PicklistSettings();
        this.stringOptions = null;
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(PicklistComponent.prototype, "settings", {
        get: /**
         * @return {?}
         */
        function () {
            return this.picklistSettings;
        },
        /**
         * Settings for the picklist. Internally, this will trigger a call to `reset()`.
         */
        set: /**
         * Settings for the picklist. Internally, this will trigger a call to `reset()`.
         * @param {?} settings
         * @return {?}
         */
        function (settings) {
            this.reset(settings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistComponent.prototype, "simpleOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stringOptions;
        },
        /**
         * An array of unique strings to be used as the picklist options.
         */
        set: /**
         * An array of unique strings to be used as the picklist options.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this.updateStateFromStringOptions(options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistComponent.prototype, "showHeaderText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.picklistSettings.showHeaderText;
        },
        /**
         * Set to true to show text in the header. *Defaults to true.*
         */
        set: /**
         * Set to true to show text in the header. *Defaults to true.*
         * @param {?} shouldShow
         * @return {?}
         */
        function (shouldShow) {
            this.update({ showHeaderText: shouldShow });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistComponent.prototype, "leftHeaderText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.picklistSettings.leftHeaderText;
        },
        /**
         * Text for left header. *Defaults to "Available".*
         */
        set: /**
         * Text for left header. *Defaults to "Available".*
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this.update({ leftHeaderText: text });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistComponent.prototype, "rightHeaderText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.picklistSettings.rightHeaderText;
        },
        /**
         * Text for right header. *Defaults to "Selected".*
         */
        set: /**
         * Text for right header. *Defaults to "Selected".*
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this.update({ rightHeaderText: text });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistComponent.prototype, "sort", {
        get: /**
         * @return {?}
         */
        function () {
            return this.picklistSettings.sort;
        },
        /**
         * How to sort options in the pane. Options: `asc` | `desc` | `none`; *Defaults to `none`.*
         */
        set: /**
         * How to sort options in the pane. Options: `asc` | `desc` | `none`; *Defaults to `none`.*
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            validateSortInput(sort);
            this.update({ sort: sort });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistComponent.prototype, "_leftToRightMoveBtnIsDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._available ? !this._available.isAnySelected() : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.stringOptions) {
                return this.picklistSettings.selected.values.map((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return v.title; }));
            }
            else {
                return this.picklistSettings.selected;
            }
        },
        /**
         * Current selected value of the picklist. Will be either `IPicklistOptions` or `string[]` depending on the type of options provided.
         */
        set: /**
         * Current selected value of the picklist. Will be either `IPicklistOptions` or `string[]` depending on the type of options provided.
         * @param {?} model
         * @return {?}
         */
        function (model) {
            /** @type {?} */
            var selectedValues = { values: [], valueSets: [] };
            if (this.picklistModelisArray(model)) {
                /** @type {?} */
                var selected = this.convertStringsToValueOptions(model);
                selectedValues.values = selected || [];
            }
            else {
                selectedValues.values = model.values || [];
                selectedValues.valueSets = model.valueSets || [];
            }
            this.update({ selected: selectedValues });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    PicklistComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PicklistComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PicklistComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.value = value;
        }
    };
    /**
     * Will update the picklist with the given settings, maintaining any previous settings that have not been overridden.
     */
    /**
     * Will update the picklist with the given settings, maintaining any previous settings that have not been overridden.
     * @param {?} settings
     * @return {?}
     */
    PicklistComponent.prototype.update = /**
     * Will update the picklist with the given settings, maintaining any previous settings that have not been overridden.
     * @param {?} settings
     * @return {?}
     */
    function (settings) {
        /** @type {?} */
        var updatedSettings = Object.assign(this.picklistSettings, settings);
        this.reset(updatedSettings);
    };
    /**
     * Will reset the picklist settings with the given settings. (Clears out any previous settings.)
     */
    /**
     * Will reset the picklist settings with the given settings. (Clears out any previous settings.)
     * @param {?=} settings
     * @return {?}
     */
    PicklistComponent.prototype.reset = /**
     * Will reset the picklist settings with the given settings. (Clears out any previous settings.)
     * @param {?=} settings
     * @return {?}
     */
    function (settings) {
        if (settings === void 0) { settings = new PicklistSettings(); }
        this.picklistSettings = Object.assign(new PicklistSettings(), settings);
        this.resetPanes(this.picklistSettings);
        this.setActiveValueType(this.picklistSettings.useValuesets ? 'valueSets' : 'values');
        this.applyChangeToModel();
    };
    /**
     * Will change the active tab. (Will do nothing if `settings.useValuesets` is false.)
     */
    /**
     * Will change the active tab. (Will do nothing if `settings.useValuesets` is false.)
     * @param {?} type
     * @return {?}
     */
    PicklistComponent.prototype.setActiveValueType = /**
     * Will change the active tab. (Will do nothing if `settings.useValuesets` is false.)
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (!this._available) {
            console.warn('Available picklist pane not available yet.');
            return;
        }
        if (!this.settings.useValuesets) {
            type = 'values';
        }
        this._available.valueList.isActive = type === 'values';
        this._available.valueSetList.isActive = type === 'valueSets';
        this._available.selectNone();
        this._available.scrollToTop();
    };
    /**
     * Will move all selected items from the given pane into its companion pane. Used internally by the left and right arrow buttons.
     * @param pane the pane from which we are moving items out of
     */
    /**
     * Will move all selected items from the given pane into its companion pane. Used internally by the left and right arrow buttons.
     * @param {?} pane the pane from which we are moving items out of
     * @return {?}
     */
    PicklistComponent.prototype.moveSelectedItems = /**
     * Will move all selected items from the given pane into its companion pane. Used internally by the left and right arrow buttons.
     * @param {?} pane the pane from which we are moving items out of
     * @return {?}
     */
    function (pane) {
        /** @type {?} */
        var shouldBreakValuesets = pane === this._confirmed;
        /** @type {?} */
        var selectedOptions = pane.listService.moveOutSelectedOptions(shouldBreakValuesets);
        if (pane.companion) {
            pane.companion.listService.addOptions(selectedOptions);
        }
        else {
            console.warn('This pane does not have a companion pane to move the select options in to.');
        }
        pane.filterService.reloadIfEmpty();
        this.applyChangeToModel();
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    PicklistComponent.prototype.updateStateFromStringOptions = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var valueOptions = this.convertStringsToValueOptions(options);
        this.stringOptions = options;
        this.update({ options: { values: valueOptions || [] } });
    };
    /**
     * @private
     * @param {?} settings
     * @return {?}
     */
    PicklistComponent.prototype.resetPanes = /**
     * @private
     * @param {?} settings
     * @return {?}
     */
    function (settings) {
        if (!(this._available && this._confirmed)) {
            console.warn('Picklist panes not available yet.');
            return;
        }
        /** @type {?} */
        var confirmedSource = new PicklistOptionsSource();
        confirmedSource.values = this.picklistSettings.selected.values.slice(0);
        confirmedSource.valueSets = this.picklistSettings.selected.valueSets.slice(0);
        confirmedSource.getValuesForValueset = this.picklistSettings.options.getValuesForValueset;
        this._confirmed.reset(confirmedSource, this.picklistSettings, this._available, false);
        /** @type {?} */
        var availableSource = Object.assign(new PicklistOptionsSource(), this.picklistSettings.options);
        this._available.reset(availableSource, this.picklistSettings, this._confirmed, true);
    };
    /**
     * @private
     * @return {?}
     */
    PicklistComponent.prototype.applyChangeToModel = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!(this._available && this._confirmed)) {
            console.warn('Picklist panes not available yet.');
            return;
        }
        this.picklistSettings.selected.values.length = 0;
        this.picklistSettings.selected.valueSets.length = 0;
        this._confirmed.valueList.options.forEach((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return _this.picklistSettings.selected.values.push(e.option); }));
        this._confirmed.valueSetList.options.forEach((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return _this.picklistSettings.selected.valueSets.push(e.option); }));
        this.changed.emit();
        this.onChange(this.value);
        this.onTouched();
    };
    /**
     * @private
     * @param {?} vals
     * @return {?}
     */
    PicklistComponent.prototype.convertStringsToValueOptions = /**
     * @private
     * @param {?} vals
     * @return {?}
     */
    function (vals) {
        return vals ? vals.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return ({ code: "" + o, title: "" + o }); })) : null;
    };
    /**
     * @private
     * @param {?} model
     * @return {?}
     */
    PicklistComponent.prototype.picklistModelisArray = /**
     * @private
     * @param {?} model
     * @return {?}
     */
    function (model) {
        /** @type {?} */
        var array = (/** @type {?} */ (model));
        return array && array.length !== undefined;
    };
    PicklistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hc-picklist',
                    template: "<div class=\"hc-picklist\">\n    <div class=\"pane-wrap\">\n        <div class=\"pane-header\">\n            <h2 *ngIf=\"settings.showHeaderText\">{{settings.leftHeaderText}}</h2>\n            <div *ngIf=\"settings.useValuesets\" class=\"pane-tabs hc-tab-bar-horizontal\">\n                <a title=\"Search for Value Sets\"\n                        (click)=\"setActiveValueType('valueSets')\"\n                        class=\"hc-tab-horizontal\"\n                        [ngClass]=\"{'active': _available?.valueSetList.isActive}\">Value Sets</a>\n                <a title=\"Search for Values\"\n                    (click)=\"setActiveValueType('values')\"\n                    class=\"hc-tab-horizontal\"\n                    [ngClass]=\"{'active': _available?.valueList.isActive}\">Values</a>\n            </div>\n        </div>\n        <hc-picklist-pane #availableList\n            emptyMsg=\"No options available.\"\n            (moveSelectedItems)=\"moveSelectedItems($event);\">\n        </hc-picklist-pane>\n    </div>\n\n    <div class=\"move-btns-wrap\">\n        <button hc-button color=\"primary-alt\" type=\"button\" name=\"addBtn\"\n                (click)=\"moveSelectedItems(availableList);\"\n                [disabled]=\"_leftToRightMoveBtnIsDisabled\">\n            <hc-icon hcIconSm fontSet=\"fa\" fontIcon=\"fa-arrow-right\"></hc-icon>\n        </button>\n        <button hc-button color=\"primary-alt\" type=\"button\" name=\"removeBtn\"\n                (click)=\"moveSelectedItems(confirmedList);\"\n                [disabled]=\"!_confirmed?.isAnySelected()\">\n            <hc-icon hcIconSm fontSet=\"fa\" fontIcon=\"fa-arrow-left\"></hc-icon>\n        </button>\n    </div>\n\n    <div class=\"pane-wrap\">\n        <div class=\"pane-header\">\n            <h2 *ngIf=\"settings.showHeaderText\">{{settings.rightHeaderText}}</h2>\n        </div>\n        <hc-picklist-pane #confirmedList\n            emptyMsg=\"No options selected.\"\n            (moveSelectedItems)=\"moveSelectedItems($event);\">\n        </hc-picklist-pane>\n    </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PicklistComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".hc-picklist{-webkit-box-align:stretch;align-items:stretch;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-flow:row;height:100%;-webkit-box-pack:justify;justify-content:space-between;min-width:650px;overflow:hidden}.hc-picklist .pane-wrap{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;width:45%}.hc-picklist .pane-header{display:-webkit-box;display:flex;-webkit-box-flex:0;flex:0 0 30px;-webkit-box-pack:justify;justify-content:space-between}.hc-picklist .pane-header h2{font-size:16px;font-weight:700;margin:3px 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.hc-picklist .pane-tabs{border-bottom:none;-webkit-box-flex:0;flex:0 0 auto}.hc-picklist .pane-tabs a{font-size:13px}.hc-picklist hc-picklist-pane{display:block;-webkit-box-flex:1;flex:1 1 auto;height:calc(100% - 30px)}.hc-picklist hc-picklist-pane.hide{display:none}.hc-picklist .move-btns-wrap{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-flow:column;-webkit-box-pack:center;justify-content:center;padding-top:100px;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.hc-picklist .move-btns-wrap button{height:60px;margin-top:12px;min-width:0;padding:0;width:30px}.hc-picklist .move-btns-wrap button[disabled],.hc-picklist .move-btns-wrap button[disabled]:hover{background-color:#ccc;border-color:#ccc}.hc-picklist .move-btns-wrap .hc-icon{color:#fff}"]
                }] }
    ];
    PicklistComponent.propDecorators = {
        settings: [{ type: Input }],
        simpleOptions: [{ type: Input }],
        showHeaderText: [{ type: Input }],
        leftHeaderText: [{ type: Input }],
        rightHeaderText: [{ type: Input }],
        sort: [{ type: Input }],
        _available: [{ type: ViewChild, args: ['availableList', { static: true },] }],
        _confirmed: [{ type: ViewChild, args: ['confirmedList', { static: true },] }],
        changed: [{ type: Output }]
    };
    return PicklistComponent;
}());
export { PicklistComponent };
if (false) {
    /** @type {?} */
    PicklistComponent.prototype._available;
    /** @type {?} */
    PicklistComponent.prototype._confirmed;
    /**
     * Fired when a change is made to the picklist selection.
     * @type {?}
     */
    PicklistComponent.prototype.changed;
    /**
     * @type {?}
     * @private
     */
    PicklistComponent.prototype.picklistSettings;
    /**
     * @type {?}
     * @private
     */
    PicklistComponent.prototype.stringOptions;
    /** @type {?} */
    PicklistComponent.prototype.onChange;
    /** @type {?} */
    PicklistComponent.prototype.onTouched;
}
//# sourceMappingURL=data:application/json;base64,