/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-filter-remote.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from, of, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { PicklistStateService } from './picklist-state.service';
import { PicklistRemoteQueryOptions } from '../picklist.model';
var PicklistFilterRemoteService = /** @class */ (function () {
    function PicklistFilterRemoteService(stateService) {
        this.stateService = stateService;
        this.currentValuePage = 1;
        this.currentValueSetPage = 1;
        this.cancelSearch = new Subject();
        this.options$ = from([]);
    }
    Object.defineProperty(PicklistFilterRemoteService.prototype, "valueList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.valueList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistFilterRemoteService.prototype, "valueSetList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.valueSetList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistFilterRemoteService.prototype, "searchTerm", {
        get: /**
         * @return {?}
         */
        function () {
            return this.filterService ? this.filterService.searchTerm : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistFilterRemoteService.prototype, "cancelSearch$", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.cancelSearch.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} filterService
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.reset = /**
     * @param {?} filterService
     * @return {?}
     */
    function (filterService) {
        this.filterService = filterService;
        this.currentValuePage = 1;
        this.currentValueSetPage = 1;
    };
    /**
     * @param {?=} type
     * @param {?=} shouldAppend
     * @param {?=} selectAllCount
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.filter = /**
     * @param {?=} type
     * @param {?=} shouldAppend
     * @param {?=} selectAllCount
     * @return {?}
     */
    function (type, shouldAppend, selectAllCount) {
        var _this = this;
        if (type === void 0) { type = 'both'; }
        if (shouldAppend === void 0) { shouldAppend = false; }
        if (selectAllCount === void 0) { selectAllCount = null; }
        if (!this.stateService.optionsSource.getOptions) {
            console.warn('Remote query callback not provided for this picklist.');
            return from([]).subscribe();
        }
        if (this.options$) {
            this.cancelSearch.next();
        }
        /** @type {?} */
        var params = this.buildRemoteQueryParams(type, selectAllCount);
        if (!shouldAppend) {
            this.clearFilteredOptions(type);
        }
        this.resetPagingForSelectAllIfNeeded(selectAllCount);
        this.options$ = this.stateService.optionsSource.getOptions(params).pipe(takeUntil(this.cancelSearch$));
        return this.options$.subscribe((/**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            _this.processIncomingRemoteOptions(options, type, shouldAppend);
        }), (/**
         * @return {?}
         */
        function () {
            console.warn('Unable to filter options');
            _this.clearLists('both');
            return of({});
        }), (/**
         * @return {?}
         */
        function () {
            _this.options$ = of({});
        }));
    };
    /**
     * @private
     * @param {?} options
     * @param {?=} type
     * @param {?=} shouldAppend
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.processIncomingRemoteOptions = /**
     * @private
     * @param {?} options
     * @param {?=} type
     * @param {?=} shouldAppend
     * @return {?}
     */
    function (options, type, shouldAppend) {
        if (type === void 0) { type = 'both'; }
        if (shouldAppend === void 0) { shouldAppend = false; }
        if (!shouldAppend) {
            this.clearLists(type);
        }
        if (this.stateService.optionsSource.isPaged) {
            if (options.pagedValues) {
                this.processPagedValues(options.pagedValues);
            }
            if (options.pagedValueSets) {
                this.processPagedValueSets(options.pagedValueSets);
            }
        }
        else {
            if (options.values) {
                this.stateService.updateValueList(options.values);
            }
            if (options.valueSets) {
                this.stateService.updateValueSetList(options.valueSets);
            }
            this.valueList.additionalRemoteOptions = 0;
            this.valueSetList.additionalRemoteOptions = 0;
        }
    };
    /**
     * @private
     * @param {?} pagedValues
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.processPagedValues = /**
     * @private
     * @param {?} pagedValues
     * @return {?}
     */
    function (pagedValues) {
        this.stateService.updateValueList(pagedValues.values);
        this.valueList.additionalRemoteOptions = pagedValues.totalItems - this.valueList.options.size;
    };
    /**
     * @private
     * @param {?} pagedValueSets
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.processPagedValueSets = /**
     * @private
     * @param {?} pagedValueSets
     * @return {?}
     */
    function (pagedValueSets) {
        this.stateService.updateValueSetList(pagedValueSets.values);
        this.valueSetList.additionalRemoteOptions = pagedValueSets.totalItems - this.valueSetList.options.size;
    };
    /**
     * @private
     * @param {?} type
     * @param {?=} selectAllCount
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.buildRemoteQueryParams = /**
     * @private
     * @param {?} type
     * @param {?=} selectAllCount
     * @return {?}
     */
    function (type, selectAllCount) {
        if (selectAllCount === void 0) { selectAllCount = null; }
        /** @type {?} */
        var params = new PicklistRemoteQueryOptions(this.stateService.picklist, this.searchTerm, type);
        if (type === 'values' || type === 'both') {
            params.valuePageSettings = this.buildPageSettings(this.currentValuePage, selectAllCount);
        }
        if (type === 'valuesets' || type === 'both') {
            params.valueSetPageSettings = this.buildPageSettings(this.currentValueSetPage, selectAllCount);
        }
        return params;
    };
    /**
     * @private
     * @param {?} currentPage
     * @param {?} selectAllCount
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.buildPageSettings = /**
     * @private
     * @param {?} currentPage
     * @param {?} selectAllCount
     * @return {?}
     */
    function (currentPage, selectAllCount) {
        /** @type {?} */
        var pagerSettings = { currentPage: 1, itemsPerPage: this.stateService.optionsSource.pageSize };
        pagerSettings.currentPage = selectAllCount ? 1 : currentPage;
        pagerSettings.itemsPerPage = selectAllCount || pagerSettings.itemsPerPage;
        return pagerSettings;
    };
    /**
     * @private
     * @param {?=} selectAllCount
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.resetPagingForSelectAllIfNeeded = /**
     * @private
     * @param {?=} selectAllCount
     * @return {?}
     */
    function (selectAllCount) {
        if (selectAllCount === void 0) { selectAllCount = null; }
        if (selectAllCount) {
            this.currentValuePage = Math.floor(selectAllCount / this.stateService.optionsSource.pageSize);
        }
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.clearLists = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === 'both' || type === 'values') {
            this.stateService.clearList(this.valueList);
        }
        if (type === 'both' || type === 'valuesets') {
            this.stateService.clearList(this.valueSetList);
        }
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    PicklistFilterRemoteService.prototype.clearFilteredOptions = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === 'both' || type === 'values') {
            this.valueList.filteredOptions.length = 0;
        }
        if (type === 'both' || type === 'valuesets') {
            this.valueSetList.filteredOptions.length = 0;
        }
    };
    PicklistFilterRemoteService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PicklistFilterRemoteService.ctorParameters = function () { return [
        { type: PicklistStateService }
    ]; };
    return PicklistFilterRemoteService;
}());
export { PicklistFilterRemoteService };
if (false) {
    /** @type {?} */
    PicklistFilterRemoteService.prototype.filterService;
    /** @type {?} */
    PicklistFilterRemoteService.prototype.currentValuePage;
    /** @type {?} */
    PicklistFilterRemoteService.prototype.currentValueSetPage;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterRemoteService.prototype.cancelSearch;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterRemoteService.prototype.options$;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterRemoteService.prototype.stateService;
}
//# sourceMappingURL=data:application/json;base64,