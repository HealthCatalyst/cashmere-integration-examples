/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-filter.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WorkTrackerService } from '../../shared/work-tracker.service';
import { PicklistFilterRemoteService } from './picklist-filter-remote.service';
import { PicklistFilterLocalService } from './picklist-filter-local.service';
import { PicklistStateService } from './picklist-state.service';
var PicklistFilterService = /** @class */ (function () {
    function PicklistFilterService(workTracker, stateService, remoteFilterService, localFilterService) {
        this.workTracker = workTracker;
        this.stateService = stateService;
        this.remoteFilterService = remoteFilterService;
        this.localFilterService = localFilterService;
        this.searchTerm = '';
    }
    Object.defineProperty(PicklistFilterService.prototype, "valueList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.valueList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistFilterService.prototype, "valueSetList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.valueSetList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistFilterService.prototype, "searchTokens", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchTerm
                .toLocaleLowerCase()
                .replace(/\s+/g, ' ')
                .split(' ');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PicklistFilterService.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.remoteFilterService.reset(this);
        this.searchTerm = '';
    };
    /**
     * @param {?} searchTerm
     * @return {?}
     */
    PicklistFilterService.prototype.runFilter = /**
     * @param {?} searchTerm
     * @return {?}
     */
    function (searchTerm) {
        var _this = this;
        this.searchTerm = searchTerm;
        if (!this.stateService.optionsSource.isPaged) {
            this.localFilterService.filter(this.valueList, this.searchTokens);
            this.localFilterService.filter(this.valueSetList, this.searchTokens);
        }
        else {
            this.remoteFilterService.currentValuePage = 1;
            this.remoteFilterService.currentValueSetPage = 1;
            /** @type {?} */
            var workTracker = this.workTracker.startObservable((/**
             * @return {?}
             */
            function () { return _this.remoteFilterService.filter(); }));
            this.showListLoadingIndicators(workTracker, 'both');
        }
    };
    /**
     * @param {?=} type
     * @param {?=} shouldAppend
     * @param {?=} selectAllCount
     * @return {?}
     */
    PicklistFilterService.prototype.filterOptionsRemote = /**
     * @param {?=} type
     * @param {?=} shouldAppend
     * @param {?=} selectAllCount
     * @return {?}
     */
    function (type, shouldAppend, selectAllCount) {
        if (type === void 0) { type = 'both'; }
        if (shouldAppend === void 0) { shouldAppend = false; }
        if (selectAllCount === void 0) { selectAllCount = null; }
        return this.remoteFilterService.filter(type, shouldAppend, selectAllCount);
    };
    /**
     * @param {?=} type
     * @param {?=} autoLoadMore
     * @return {?}
     */
    PicklistFilterService.prototype.loadMore = /**
     * @param {?=} type
     * @param {?=} autoLoadMore
     * @return {?}
     */
    function (type, autoLoadMore) {
        var _this = this;
        if (type === void 0) { type = 'both'; }
        if (autoLoadMore === void 0) { autoLoadMore = false; }
        if (type === 'both' || type === 'values') {
            this.remoteFilterService.currentValuePage++;
        }
        if (type === 'both' || type === 'valuesets') {
            this.remoteFilterService.currentValueSetPage++;
        }
        /** @type {?} */
        var loading$ = this.workTracker.startObservable((/**
         * @return {?}
         */
        function () { return _this.filterOptionsRemote(type, true); }));
        this.showListLoadingIndicators(loading$, type, !autoLoadMore);
    };
    /**
     * @param {?} numberToLoad
     * @return {?}
     */
    PicklistFilterService.prototype.loadForSelectAll = /**
     * @param {?} numberToLoad
     * @return {?}
     */
    function (numberToLoad) {
        var _this = this;
        /** @type {?} */
        var loading$ = this.workTracker.startObservable((/**
         * @return {?}
         */
        function () { return _this.filterOptionsRemote('values', false, numberToLoad); }));
        this.showListLoadingIndicators(loading$, 'values');
        return loading$;
    };
    /**
     * @return {?}
     */
    PicklistFilterService.prototype.reloadIfEmpty = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var valuesNeedReload = this.valueList.options.size === 0 && this.valueList.additionalRemoteOptions > 0;
        /** @type {?} */
        var valueSetsNeedReload = this.valueSetList.options.size === 0 && this.valueSetList.additionalRemoteOptions > 0;
        if (valuesNeedReload || valueSetsNeedReload) {
            this.runFilter(this.searchTerm);
        }
    };
    /**
     * @param {?} valuesMap
     * @param {?} list
     * @return {?}
     */
    PicklistFilterService.prototype.preFilterOptionsForRemoteMode = /**
     * @param {?} valuesMap
     * @param {?} list
     * @return {?}
     */
    function (valuesMap, list) {
        var _this = this;
        // if server is handling filtering, but I want to avoid the round trip to the server when moving options
        // I need to double check that those options belong before adding them, or risk errant option counts
        valuesMap.forEach((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (!_this.localFilterService.itemHasSearchTokens(list, v, _this.searchTokens)) {
                valuesMap.delete(v.code);
            }
        }));
    };
    /**
     * @param {?} workTracker
     * @param {?=} type
     * @param {?=} isAppending
     * @return {?}
     */
    PicklistFilterService.prototype.showListLoadingIndicators = /**
     * @param {?} workTracker
     * @param {?=} type
     * @param {?=} isAppending
     * @return {?}
     */
    function (workTracker, type, isAppending) {
        if (type === void 0) { type = 'both'; }
        if (isAppending === void 0) { isAppending = false; }
        if (type === 'both' || type === 'values') {
            this.showLoadingIndicatorForList(this.valueList, workTracker, isAppending);
        }
        if (type === 'both' || type === 'valuesets') {
            this.showLoadingIndicatorForList(this.valueSetList, workTracker, isAppending);
        }
    };
    /**
     * @private
     * @param {?} list
     * @param {?} tracker
     * @param {?=} isAppending
     * @return {?}
     */
    PicklistFilterService.prototype.showLoadingIndicatorForList = /**
     * @private
     * @param {?} list
     * @param {?} tracker
     * @param {?=} isAppending
     * @return {?}
     */
    function (list, tracker, isAppending) {
        if (isAppending === void 0) { isAppending = false; }
        if (isAppending) {
            list.appendingOptions = tracker;
        }
        else {
            list.loadingOptions = tracker;
        }
    };
    PicklistFilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PicklistFilterService.ctorParameters = function () { return [
        { type: WorkTrackerService },
        { type: PicklistStateService },
        { type: PicklistFilterRemoteService },
        { type: PicklistFilterLocalService }
    ]; };
    return PicklistFilterService;
}());
export { PicklistFilterService };
if (false) {
    /** @type {?} */
    PicklistFilterService.prototype.searchTerm;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterService.prototype.workTracker;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterService.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterService.prototype.remoteFilterService;
    /**
     * @type {?}
     * @private
     */
    PicklistFilterService.prototype.localFilterService;
}
//# sourceMappingURL=data:application/json;base64,