/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-filter-local.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var PicklistFilterLocalService = /** @class */ (function () {
    function PicklistFilterLocalService() {
    }
    /**
     * @template T
     * @param {?} list
     * @param {?} searchTokens
     * @return {?}
     */
    PicklistFilterLocalService.prototype.filter = /**
     * @template T
     * @param {?} list
     * @param {?} searchTokens
     * @return {?}
     */
    function (list, searchTokens) {
        var _this = this;
        list.filteredOptions = [];
        list.options.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (_this.itemHasSearchTokens(list, item, searchTokens)) {
                list.filteredOptions.push(item);
            }
        }));
        if (list.sort !== "none") {
            list.filteredOptions.sort(this.getSortFunc(list));
        }
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} item
     * @param {?} searchTokens
     * @return {?}
     */
    PicklistFilterLocalService.prototype.itemHasSearchTokens = /**
     * @template T
     * @param {?} list
     * @param {?} item
     * @param {?} searchTokens
     * @return {?}
     */
    function (list, item, searchTokens) {
        /** @type {?} */
        var valuesToSearchIn = [item.option.title, list.codeIsSignificant ? item.option.code : ''];
        valuesToSearchIn.filter((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return !!val; }));
        return searchTokens.every((/**
         * @param {?} token
         * @return {?}
         */
        function (token) { return valuesToSearchIn.some((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value.toLocaleLowerCase().indexOf(token) > -1; })); }));
    };
    /**
     * @private
     * @template T
     * @param {?} list
     * @return {?}
     */
    PicklistFilterLocalService.prototype.getSortFunc = /**
     * @private
     * @template T
     * @param {?} list
     * @return {?}
     */
    function (list) {
        /** @type {?} */
        var sortField = list.codeIsSignificant ? 'code' : 'title';
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return a.option[sortField].localeCompare(b.option[sortField]) * (list.sort === "asc" ? -1 : 1); });
    };
    PicklistFilterLocalService.decorators = [
        { type: Injectable }
    ];
    return PicklistFilterLocalService;
}());
export { PicklistFilterLocalService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2xpc3QtZmlsdGVyLWxvY2FsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGVhbHRoY2F0YWx5c3QvY2FzaG1lcmUvIiwic291cmNlcyI6WyJsaWIvcGlja2xpc3Qvc2VydmljZXMvcGlja2xpc3QtZmlsdGVyLWxvY2FsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBR3pDO0lBQUE7SUF3QkEsQ0FBQzs7Ozs7OztJQXRCVSwyQ0FBTTs7Ozs7O0lBQWIsVUFBMEMsSUFBNkIsRUFBRSxZQUFzQjtRQUEvRixpQkFVQztRQVRHLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsSUFBSTtZQUNyQixJQUFJLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFO2dCQUNwRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQztRQUNMLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtZQUN0QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDckQ7SUFDTCxDQUFDOzs7Ozs7OztJQUVNLHdEQUFtQjs7Ozs7OztJQUExQixVQUF1RCxJQUE2QixFQUFFLElBQU8sRUFBRSxZQUFzQjs7WUFDM0csZ0JBQWdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDNUYsZ0JBQWdCLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEdBQUcsRUFBTCxDQUFLLEVBQUMsQ0FBQztRQUN0QyxPQUFPLFlBQVksQ0FBQyxLQUFLOzs7O1FBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxnQkFBZ0IsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQTdDLENBQTZDLEVBQUMsRUFBN0UsQ0FBNkUsRUFBQyxDQUFDO0lBQ3RILENBQUM7Ozs7Ozs7SUFFTyxnREFBVzs7Ozs7O0lBQW5CLFVBQWdELElBQTZCOztZQUNuRSxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU87UUFDM0Q7Ozs7O1FBQU8sVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBdkYsQ0FBdUYsRUFBQztJQUM3RyxDQUFDOztnQkF2QkosVUFBVTs7SUF3QlgsaUNBQUM7Q0FBQSxBQXhCRCxJQXdCQztTQXZCWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGaWx0ZXJhYmxlU2VsZWN0TGlzdCwgU2VsZWN0TGlzdE9wdGlvbn0gZnJvbSAnLi4vcGFuZS9waWNrbGlzdC1wYW5lLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBpY2tsaXN0RmlsdGVyTG9jYWxTZXJ2aWNlIHtcbiAgICBwdWJsaWMgZmlsdGVyPFQgZXh0ZW5kcyBTZWxlY3RMaXN0T3B0aW9uPihsaXN0OiBGaWx0ZXJhYmxlU2VsZWN0TGlzdDxUPiwgc2VhcmNoVG9rZW5zOiBzdHJpbmdbXSkge1xuICAgICAgICBsaXN0LmZpbHRlcmVkT3B0aW9ucyA9IFtdO1xuICAgICAgICBsaXN0Lm9wdGlvbnMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1IYXNTZWFyY2hUb2tlbnMobGlzdCwgaXRlbSwgc2VhcmNoVG9rZW5zKSkge1xuICAgICAgICAgICAgICAgIGxpc3QuZmlsdGVyZWRPcHRpb25zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGlzdC5zb3J0ICE9PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgbGlzdC5maWx0ZXJlZE9wdGlvbnMuc29ydCh0aGlzLmdldFNvcnRGdW5jKGxpc3QpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpdGVtSGFzU2VhcmNoVG9rZW5zPFQgZXh0ZW5kcyBTZWxlY3RMaXN0T3B0aW9uPihsaXN0OiBGaWx0ZXJhYmxlU2VsZWN0TGlzdDxUPiwgaXRlbTogVCwgc2VhcmNoVG9rZW5zOiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB2YWx1ZXNUb1NlYXJjaEluID0gW2l0ZW0ub3B0aW9uLnRpdGxlLCBsaXN0LmNvZGVJc1NpZ25pZmljYW50ID8gaXRlbS5vcHRpb24uY29kZSA6ICcnXTtcbiAgICAgICAgdmFsdWVzVG9TZWFyY2hJbi5maWx0ZXIodmFsID0+ICEhdmFsKTtcbiAgICAgICAgcmV0dXJuIHNlYXJjaFRva2Vucy5ldmVyeSh0b2tlbiA9PiB2YWx1ZXNUb1NlYXJjaEluLnNvbWUodmFsdWUgPT4gdmFsdWUudG9Mb2NhbGVMb3dlckNhc2UoKS5pbmRleE9mKHRva2VuKSA+IC0xKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTb3J0RnVuYzxUIGV4dGVuZHMgU2VsZWN0TGlzdE9wdGlvbj4obGlzdDogRmlsdGVyYWJsZVNlbGVjdExpc3Q8VD4pOiAoYTogYW55LCBiOiBhbnkpID0+IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHNvcnRGaWVsZCA9IGxpc3QuY29kZUlzU2lnbmlmaWNhbnQgPyAnY29kZScgOiAndGl0bGUnO1xuICAgICAgICByZXR1cm4gKGEsIGIpID0+IGEub3B0aW9uW3NvcnRGaWVsZF0ubG9jYWxlQ29tcGFyZShiLm9wdGlvbltzb3J0RmllbGRdKSAqIChsaXN0LnNvcnQgPT09IFwiYXNjXCIgPyAtMSA6IDEpO1xuICAgIH1cbn1cbiJdfQ==