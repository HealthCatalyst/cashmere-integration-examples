/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PicklistOptionsSource, PicklistSettings } from '../picklist.model';
import { FilterableSelectList, ValueListOption, ValueSetListOption } from '../pane/picklist-pane.model';
import { PicklistFilterLocalService } from './picklist-filter-local.service';
var PicklistStateService = /** @class */ (function () {
    function PicklistStateService(localFilterService) {
        this.localFilterService = localFilterService;
        this.picklist = new PicklistSettings();
        this.optionsSource = new PicklistOptionsSource();
        this.valueList = new FilterableSelectList();
        this.valueSetList = new FilterableSelectList();
    }
    /**
     * @param {?} settings
     * @param {?} optionsSource
     * @param {?} pane
     * @return {?}
     */
    PicklistStateService.prototype.reset = /**
     * @param {?} settings
     * @param {?} optionsSource
     * @param {?} pane
     * @return {?}
     */
    function (settings, optionsSource, pane) {
        this.picklist = settings;
        this.pane = pane;
        this.optionsSource = optionsSource;
        this.clearList(this.valueList);
        this.clearList(this.valueSetList);
    };
    /**
     * @param {?} options
     * @param {?=} searchTokens
     * @return {?}
     */
    PicklistStateService.prototype.updateValueList = /**
     * @param {?} options
     * @param {?=} searchTokens
     * @return {?}
     */
    function (options, searchTokens) {
        if (searchTokens === void 0) { searchTokens = []; }
        /** @type {?} */
        var listOptions = options.map((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return new ValueListOption(v, v.code); }));
        /** @type {?} */
        var companionList = this.pane.companion ? this.pane.companion.valueList : null;
        this.valueList.sort = this.picklist.sort;
        this.updateList(listOptions, this.valueList, companionList, searchTokens);
    };
    /**
     * @param {?} options
     * @param {?=} searchTokens
     * @return {?}
     */
    PicklistStateService.prototype.updateValueSetList = /**
     * @param {?} options
     * @param {?=} searchTokens
     * @return {?}
     */
    function (options, searchTokens) {
        var _this = this;
        if (searchTokens === void 0) { searchTokens = []; }
        /** @type {?} */
        var listOptions = new Array();
        /** @type {?} */
        var companionList = this.pane.companion ? this.pane.companion.valueSetList : null;
        options.forEach((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            /** @type {?} */
            var listOption = new ValueSetListOption(v, v.code);
            if (v.subValues && v.subValues.length > 0) {
                /** @type {?} */
                var subValueListOptions = v.subValues.map((/**
                 * @param {?} sv
                 * @return {?}
                 */
                function (sv) { return new ValueListOption(sv, sv.code); }));
                _this.updateList(subValueListOptions, listOption.subValuesSelectList, null, searchTokens);
            }
            listOptions.push(listOption);
        }));
        this.updateList(listOptions, this.valueSetList, companionList, searchTokens);
    };
    /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    PicklistStateService.prototype.clearList = /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    function (list) {
        list.options.clear();
        list.filteredOptions.length = 0;
        list.selectedOptions.clear();
        list.lastClickedOption = null;
        list.additionalRemoteOptions = 0;
    };
    /**
     * @private
     * @template T
     * @param {?} options
     * @param {?} list
     * @param {?=} companionList
     * @param {?=} searchTokens
     * @return {?}
     */
    PicklistStateService.prototype.updateList = /**
     * @private
     * @template T
     * @param {?} options
     * @param {?} list
     * @param {?=} companionList
     * @param {?=} searchTokens
     * @return {?}
     */
    function (options, list, companionList, searchTokens) {
        if (companionList === void 0) { companionList = null; }
        if (searchTokens === void 0) { searchTokens = []; }
        if (!this.optionsSource.isPaged && this.pane.shouldExcludeCompanion && companionList) {
            options = options.filter((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return !companionList.options.get(o.code); }));
        }
        options.forEach((/**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            list.options.set(o.code, o);
            list.filteredOptions.push(o);
        }));
        this.localFilterService.filter(list, searchTokens);
    };
    PicklistStateService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PicklistStateService.ctorParameters = function () { return [
        { type: PicklistFilterLocalService }
    ]; };
    return PicklistStateService;
}());
export { PicklistStateService };
if (false) {
    /** @type {?} */
    PicklistStateService.prototype.pane;
    /** @type {?} */
    PicklistStateService.prototype.picklist;
    /** @type {?} */
    PicklistStateService.prototype.optionsSource;
    /** @type {?} */
    PicklistStateService.prototype.valueList;
    /** @type {?} */
    PicklistStateService.prototype.valueSetList;
    /**
     * @type {?}
     * @private
     */
    PicklistStateService.prototype.localFilterService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2xpc3Qtc3RhdGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9waWNrbGlzdC9zZXJ2aWNlcy9waWNrbGlzdC1zdGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQWdDLHFCQUFxQixFQUFFLGdCQUFnQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDekcsT0FBTyxFQUFDLG9CQUFvQixFQUFvQixlQUFlLEVBQUUsa0JBQWtCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUV4SCxPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUUzRTtJQVFJLDhCQUEyQixrQkFBOEM7UUFBOUMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUE0QjtRQUxsRSxhQUFRLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2xDLGtCQUFhLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBQzVDLGNBQVMsR0FBRyxJQUFJLG9CQUFvQixFQUFtQixDQUFDO1FBQ3hELGlCQUFZLEdBQUcsSUFBSSxvQkFBb0IsRUFBc0IsQ0FBQztJQUVPLENBQUM7Ozs7Ozs7SUFFdEUsb0NBQUs7Ozs7OztJQUFaLFVBQWEsUUFBMEIsRUFBRSxhQUFvQyxFQUFFLElBQTJCO1FBQ3RHLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7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QUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBbEMsQ0FBa0MsRUFBQyxDQUFDO1NBQ3JFO1FBQ0QsT0FBTyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLENBQUM7WUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Z0JBN0RKLFVBQVU7Ozs7Z0JBRkgsMEJBQTBCOztJQWdFbEMsMkJBQUM7Q0FBQSxBQTlERCxJQThEQztTQTdEWSxvQkFBb0I7OztJQUM3QixvQ0FBbUM7O0lBQ25DLHdDQUF5Qzs7SUFDekMsNkNBQW1EOztJQUNuRCx5Q0FBK0Q7O0lBQy9ELDRDQUFxRTs7Ozs7SUFFbEQsa0RBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtJVmFsdWVPcHRpb24sIElWYWx1ZVNldE9wdGlvbiwgUGlja2xpc3RPcHRpb25zU291cmNlLCBQaWNrbGlzdFNldHRpbmdzfSBmcm9tICcuLi9waWNrbGlzdC5tb2RlbCc7XG5pbXBvcnQge0ZpbHRlcmFibGVTZWxlY3RMaXN0LCBTZWxlY3RMaXN0T3B0aW9uLCBWYWx1ZUxpc3RPcHRpb24sIFZhbHVlU2V0TGlzdE9wdGlvbn0gZnJvbSAnLi4vcGFuZS9waWNrbGlzdC1wYW5lLm1vZGVsJztcbmltcG9ydCB7UGlja2xpc3RQYW5lQ29tcG9uZW50fSBmcm9tICcuLi9wYW5lL3BpY2tsaXN0LXBhbmUuY29tcG9uZW50JztcbmltcG9ydCB7UGlja2xpc3RGaWx0ZXJMb2NhbFNlcnZpY2V9IGZyb20gJy4vcGlja2xpc3QtZmlsdGVyLWxvY2FsLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGlja2xpc3RTdGF0ZVNlcnZpY2Uge1xuICAgIHB1YmxpYyBwYW5lOiBQaWNrbGlzdFBhbmVDb21wb25lbnQ7XG4gICAgcHVibGljIHBpY2tsaXN0ID0gbmV3IFBpY2tsaXN0U2V0dGluZ3MoKTtcbiAgICBwdWJsaWMgb3B0aW9uc1NvdXJjZSA9IG5ldyBQaWNrbGlzdE9wdGlvbnNTb3VyY2UoKTtcbiAgICBwdWJsaWMgdmFsdWVMaXN0ID0gbmV3IEZpbHRlcmFibGVTZWxlY3RMaXN0PFZhbHVlTGlzdE9wdGlvbj4oKTtcbiAgICBwdWJsaWMgdmFsdWVTZXRMaXN0ID0gbmV3IEZpbHRlcmFibGVTZWxlY3RMaXN0PFZhbHVlU2V0TGlzdE9wdGlvbj4oKTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsRmlsdGVyU2VydmljZTogUGlja2xpc3RGaWx0ZXJMb2NhbFNlcnZpY2UpIHt9XG5cbiAgICBwdWJsaWMgcmVzZXQoc2V0dGluZ3M6IFBpY2tsaXN0U2V0dGluZ3MsIG9wdGlvbnNTb3VyY2U6IFBpY2tsaXN0T3B0aW9uc1NvdXJjZSwgcGFuZTogUGlja2xpc3RQYW5lQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMucGlja2xpc3QgPSBzZXR0aW5ncztcbiAgICAgICAgdGhpcy5wYW5lID0gcGFuZTtcbiAgICAgICAgdGhpcy5vcHRpb25zU291cmNlID0gb3B0aW9uc1NvdXJjZTtcbiAgICAgICAgdGhpcy5jbGVhckxpc3QodGhpcy52YWx1ZUxpc3QpO1xuICAgICAgICB0aGlzLmNsZWFyTGlzdCh0aGlzLnZhbHVlU2V0TGlzdCk7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZVZhbHVlTGlzdChvcHRpb25zOiBJVmFsdWVPcHRpb25bXSwgc2VhcmNoVG9rZW5zOiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgICAgIGNvbnN0IGxpc3RPcHRpb25zID0gb3B0aW9ucy5tYXAodiA9PiBuZXcgVmFsdWVMaXN0T3B0aW9uKHYsIHYuY29kZSkpO1xuICAgICAgICBjb25zdCBjb21wYW5pb25MaXN0ID0gdGhpcy5wYW5lLmNvbXBhbmlvbiA/IHRoaXMucGFuZS5jb21wYW5pb24udmFsdWVMaXN0IDogbnVsbDtcbiAgICAgICAgdGhpcy52YWx1ZUxpc3Quc29ydCA9IHRoaXMucGlja2xpc3Quc29ydDtcbiAgICAgICAgdGhpcy51cGRhdGVMaXN0KGxpc3RPcHRpb25zLCB0aGlzLnZhbHVlTGlzdCwgY29tcGFuaW9uTGlzdCwgc2VhcmNoVG9rZW5zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlVmFsdWVTZXRMaXN0KG9wdGlvbnM6IElWYWx1ZVNldE9wdGlvbltdLCBzZWFyY2hUb2tlbnM6IHN0cmluZ1tdID0gW10pIHtcbiAgICAgICAgY29uc3QgbGlzdE9wdGlvbnMgPSBuZXcgQXJyYXk8VmFsdWVTZXRMaXN0T3B0aW9uPigpO1xuICAgICAgICBjb25zdCBjb21wYW5pb25MaXN0ID0gdGhpcy5wYW5lLmNvbXBhbmlvbiA/IHRoaXMucGFuZS5jb21wYW5pb24udmFsdWVTZXRMaXN0IDogbnVsbDtcbiAgICAgICAgb3B0aW9ucy5mb3JFYWNoKHYgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGlzdE9wdGlvbiA9IG5ldyBWYWx1ZVNldExpc3RPcHRpb24odiwgdi5jb2RlKTtcbiAgICAgICAgICAgIGlmICh2LnN1YlZhbHVlcyAmJiB2LnN1YlZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViVmFsdWVMaXN0T3B0aW9ucyA9IHYuc3ViVmFsdWVzLm1hcCgoc3Y6IElWYWx1ZU9wdGlvbikgPT4gbmV3IFZhbHVlTGlzdE9wdGlvbihzdiwgc3YuY29kZSkpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTGlzdChzdWJWYWx1ZUxpc3RPcHRpb25zLCBsaXN0T3B0aW9uLnN1YlZhbHVlc1NlbGVjdExpc3QsIG51bGwsIHNlYXJjaFRva2Vucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0T3B0aW9ucy5wdXNoKGxpc3RPcHRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVMaXN0KGxpc3RPcHRpb25zLCB0aGlzLnZhbHVlU2V0TGlzdCwgY29tcGFuaW9uTGlzdCwgc2VhcmNoVG9rZW5zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYXJMaXN0PFQgZXh0ZW5kcyBTZWxlY3RMaXN0T3B0aW9uPihsaXN0OiBGaWx0ZXJhYmxlU2VsZWN0TGlzdDxUPikge1xuICAgICAgICBsaXN0Lm9wdGlvbnMuY2xlYXIoKTtcbiAgICAgICAgbGlzdC5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoID0gMDtcbiAgICAgICAgbGlzdC5zZWxlY3RlZE9wdGlvbnMuY2xlYXIoKTtcbiAgICAgICAgbGlzdC5sYXN0Q2xpY2tlZE9wdGlvbiA9IG51bGw7XG4gICAgICAgIGxpc3QuYWRkaXRpb25hbFJlbW90ZU9wdGlvbnMgPSAwO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlTGlzdDxUIGV4dGVuZHMgU2VsZWN0TGlzdE9wdGlvbj4oXG4gICAgICAgIG9wdGlvbnM6IFRbXSxcbiAgICAgICAgbGlzdDogRmlsdGVyYWJsZVNlbGVjdExpc3Q8VD4sXG4gICAgICAgIGNvbXBhbmlvbkxpc3Q6IEZpbHRlcmFibGVTZWxlY3RMaXN0PFQ+IHwgbnVsbCA9IG51bGwsXG4gICAgICAgIHNlYXJjaFRva2Vuczogc3RyaW5nW10gPSBbXVxuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9uc1NvdXJjZS5pc1BhZ2VkICYmIHRoaXMucGFuZS5zaG91bGRFeGNsdWRlQ29tcGFuaW9uICYmIGNvbXBhbmlvbkxpc3QpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zLmZpbHRlcihvID0+ICFjb21wYW5pb25MaXN0Lm9wdGlvbnMuZ2V0KG8uY29kZSkpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaChvID0+IHtcbiAgICAgICAgICAgIGxpc3Qub3B0aW9ucy5zZXQoby5jb2RlLCBvKTtcbiAgICAgICAgICAgIGxpc3QuZmlsdGVyZWRPcHRpb25zLnB1c2gobyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxvY2FsRmlsdGVyU2VydmljZS5maWx0ZXIobGlzdCwgc2VhcmNoVG9rZW5zKTtcbiAgICB9XG59XG4iXX0=