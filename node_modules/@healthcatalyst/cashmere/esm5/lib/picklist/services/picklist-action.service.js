/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-action.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { isSubList } from '../pane/picklist-pane.model';
import { PicklistService } from './picklist.service';
var PicklistActionService = /** @class */ (function () {
    function PicklistActionService(listService) {
        this.listService = listService;
    }
    Object.defineProperty(PicklistActionService.prototype, "valueList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.listService.valueList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistActionService.prototype, "valueSetList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.listService.valueSetList;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template T
     * @param {?} event
     * @param {?} index
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    PicklistActionService.prototype.onItemClicked = /**
     * @template T
     * @param {?} event
     * @param {?} index
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    function (event, index, list, item) {
        if (event.shiftKey && list.lastClickedOption && !(item.code === list.lastClickedOption.code)) {
            this.shiftClick(index, list, item, list.lastClickedOption);
        }
        else if (event.ctrlKey) {
            this.ctrlClick(list, item);
        }
        else {
            // regular click
            this.selectNone();
            this.selectItem(list, item);
            list.lastClickedOption = item;
        }
    };
    /**
     * @template T
     * @param {?} event
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    PicklistActionService.prototype.onItemDoubleClicked = /**
     * @template T
     * @param {?} event
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    function (event, list, item) {
        this.selectNone();
        this.selectItem(list, item);
    };
    /**
     * @param {?} event
     * @param {?} valueset
     * @return {?}
     */
    PicklistActionService.prototype.onValuesetCaretClicked = /**
     * @param {?} event
     * @param {?} valueset
     * @return {?}
     */
    function (event, valueset) {
        if (!valueset.showValues && valueset.subValuesSelectList.filteredOptions.length === 0) {
            this.listService.loadValuesForValueset(valueset);
        }
        valueset.showValues = !valueset.showValues;
    };
    /**
     * @return {?}
     */
    PicklistActionService.prototype.selectAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.valueSetList.filteredOptions.forEach((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            _this.clearListSelection(v.subValuesSelectList);
        })); // deselect sublist items
        this.selectAllInList(this.valueList);
        this.selectAllInList(this.valueSetList);
    };
    /**
     * @return {?}
     */
    PicklistActionService.prototype.selectNone = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.valueSetList.filteredOptions.forEach((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            _this.clearListSelection(v.subValuesSelectList);
        }));
        this.clearListSelection(this.valueList);
        this.clearListSelection(this.valueSetList);
    };
    /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    PicklistActionService.prototype.selectAllInList = /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    function (list) {
        if (!list.isActive) {
            return;
        }
        list.selectedOptions.clear();
        list.lastClickedOption = null;
        list.filteredOptions.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.selected = true;
            list.selectedOptions.set(item.code, item);
        }));
    };
    /**
     * @private
     * @template T
     * @param {?} list
     * @return {?}
     */
    PicklistActionService.prototype.clearListSelection = /**
     * @private
     * @template T
     * @param {?} list
     * @return {?}
     */
    function (list) {
        list.selectedOptions.clear();
        list.lastClickedOption = null;
        list.filteredOptions.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.selected = false;
        }));
    };
    /**
     * @private
     * @template T
     * @param {?} index
     * @param {?} list
     * @param {?} item
     * @param {?} lastClickedItem
     * @return {?}
     */
    PicklistActionService.prototype.shiftClick = /**
     * @private
     * @template T
     * @param {?} index
     * @param {?} list
     * @param {?} item
     * @param {?} lastClickedItem
     * @return {?}
     */
    function (index, list, item, lastClickedItem) {
        /** @type {?} */
        var lastIndex = list.filteredOptions.indexOf(lastClickedItem);
        /** @type {?} */
        var largeIndex = Math.max(index, lastIndex);
        /** @type {?} */
        var smallIndex = Math.min(index, lastIndex);
        /** @type {?} */
        var formerLastClicked = list.lastClickedOption;
        this.selectNone();
        list.lastClickedOption = formerLastClicked;
        for (var i = smallIndex; i <= largeIndex; i++) {
            this.selectItem(list, list.filteredOptions[i]);
        }
    };
    /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    PicklistActionService.prototype.ctrlClick = /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    function (list, item) {
        // if ctrl clicking a sub value of a valueset that is selected (such that all subvalues appear selected)
        if (isSubList(list) && list.parentValueSet.selected) {
            this.selectAllInList(list);
            this.deselectItem(this.valueSetList, list.parentValueSet);
            this.deselectItem(list, item);
        }
        else {
            this.toggleItemSelection(list, item);
        }
        list.lastClickedOption = item;
    };
    /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    PicklistActionService.prototype.deselectItem = /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    function (list, item) {
        item.selected = false;
        list.selectedOptions.delete(item.code);
    };
    /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    PicklistActionService.prototype.selectItem = /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    function (list, item) {
        item.selected = true;
        list.selectedOptions.set(item.code, item);
    };
    /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    PicklistActionService.prototype.toggleItemSelection = /**
     * @private
     * @template T
     * @param {?} list
     * @param {?} item
     * @return {?}
     */
    function (list, item) {
        if (item.selected) {
            this.deselectItem(list, item);
        }
        else {
            this.selectItem(list, item);
        }
    };
    PicklistActionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PicklistActionService.ctorParameters = function () { return [
        { type: PicklistService }
    ]; };
    return PicklistActionService;
}());
export { PicklistActionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PicklistActionService.prototype.listService;
}
//# sourceMappingURL=data:application/json;base64,