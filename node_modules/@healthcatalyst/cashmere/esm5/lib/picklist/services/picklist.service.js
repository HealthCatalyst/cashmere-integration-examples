/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WorkTrackerService } from '../../shared/work-tracker.service';
import { PicklistFilterService } from './picklist-filter.service';
import { PicklistValuesetMovingService } from './picklist-valueset-moving.service';
import { PicklistFilterLocalService } from './picklist-filter-local.service';
import { PicklistStateService } from './picklist-state.service';
import { PicklistValueOptions, ValueListOption } from '../pane/picklist-pane.model';
/**
 * Handles loading + moving items to/from list
 */
var PicklistService = /** @class */ (function () {
    function PicklistService(workTracker, filterService, localFilterService, valuesetMovingService, stateService) {
        this.workTracker = workTracker;
        this.filterService = filterService;
        this.localFilterService = localFilterService;
        this.valuesetMovingService = valuesetMovingService;
        this.stateService = stateService;
    }
    Object.defineProperty(PicklistService.prototype, "pane", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.pane;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistService.prototype, "picklist", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.picklist;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistService.prototype, "optionsSource", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.optionsSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistService.prototype, "valueList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.valueList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistService.prototype, "valueSetList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.valueSetList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistService.prototype, "totalValuesCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.valueList.options.size + this.valueList.additionalRemoteOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistService.prototype, "totalValueSetsCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.valueSetList.options.size + this.valueSetList.additionalRemoteOptions;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} settings
     * @param {?} optionsSource
     * @param {?} pane
     * @return {?}
     */
    PicklistService.prototype.reset = /**
     * @param {?} settings
     * @param {?} optionsSource
     * @param {?} pane
     * @return {?}
     */
    function (settings, optionsSource, pane) {
        var _this = this;
        this.stateService.reset(settings, optionsSource, pane);
        this.filterService.reset();
        if (this.optionsSource.optionsAreLocal()) {
            this.stateService.updateValueList(this.optionsSource.values);
            this.stateService.updateValueSetList(this.optionsSource.valueSets);
            this.localFilterService.filter(this.valueList, this.filterService.searchTokens);
            this.localFilterService.filter(this.valueSetList, this.filterService.searchTokens);
        }
        else {
            /** @type {?} */
            var loading$ = this.workTracker.startObservable((/**
             * @return {?}
             */
            function () { return _this.filterService.filterOptionsRemote(); }));
            this.valueList.loadingOptions = loading$;
            this.valueSetList.loadingOptions = loading$;
        }
    };
    /**
     * @param {?} listOptions
     * @return {?}
     */
    PicklistService.prototype.addOptions = /**
     * @param {?} listOptions
     * @return {?}
     */
    function (listOptions) {
        var _this = this;
        if (!this.optionsSource.optionsAreLocal()) {
            this.filterService.preFilterOptionsForRemoteMode(listOptions.values, this.valueList);
            this.filterService.preFilterOptionsForRemoteMode(listOptions.valueSets, this.valueSetList);
        }
        listOptions.values.forEach((/**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            _this.valueList.options.set(o.code, o);
        }));
        listOptions.valueSets.forEach((/**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            _this.valueSetList.options.set(o.code, o);
        }));
        this.localFilterService.filter(this.valueList, this.filterService.searchTokens);
        this.localFilterService.filter(this.valueSetList, this.filterService.searchTokens);
        this.pane.selectNone();
    };
    /**
     * @param {?=} shouldBreakValuesets
     * @return {?}
     */
    PicklistService.prototype.moveOutSelectedOptions = /**
     * @param {?=} shouldBreakValuesets
     * @return {?}
     */
    function (shouldBreakValuesets) {
        var _this = this;
        if (shouldBreakValuesets === void 0) { shouldBreakValuesets = false; }
        /** @type {?} */
        var optionsToMove = new PicklistValueOptions();
        this.valueList.selectedOptions.forEach((/**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            optionsToMove.values.set(o.code, o);
            _this.valueList.options.delete(o.code);
        }));
        this.valuesetMovingService.moveOutValuesets(optionsToMove, this.pane, shouldBreakValuesets);
        this.localFilterService.filter(this.valueList, this.filterService.searchTokens);
        this.localFilterService.filter(this.valueSetList, this.filterService.searchTokens);
        this.pane.selectNone();
        return optionsToMove;
    };
    /**
     * @param {?} valueset
     * @return {?}
     */
    PicklistService.prototype.loadValuesForValueset = /**
     * @param {?} valueset
     * @return {?}
     */
    function (valueset) {
        valueset.loadingValues = true;
        if (!this.optionsSource.getValuesForValueset) {
            return;
        }
        this.optionsSource.getValuesForValueset(valueset.option.code).subscribe((/**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            valueset.subValuesSelectList.filteredOptions.length = 0;
            values.forEach((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                valueset.subValuesSelectList.filteredOptions.push(new ValueListOption(v, v.code));
            }));
        }), (/**
         * @return {?}
         */
        function () {
            console.warn('Unable to load values for valueset');
            valueset.showValues = false;
        }), (/**
         * @return {?}
         */
        function () {
            valueset.loadingValues = false;
        }));
    };
    PicklistService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PicklistService.ctorParameters = function () { return [
        { type: WorkTrackerService },
        { type: PicklistFilterService },
        { type: PicklistFilterLocalService },
        { type: PicklistValuesetMovingService },
        { type: PicklistStateService }
    ]; };
    return PicklistService;
}());
export { PicklistService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.workTracker;
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.localFilterService;
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.valuesetMovingService;
    /**
     * @type {?}
     * @private
     */
    PicklistService.prototype.stateService;
}
//# sourceMappingURL=data:application/json;base64,