/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/services/picklist-valueset-moving.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PicklistFilterService } from './picklist-filter.service';
import { ValueListOption } from '../pane/picklist-pane.model';
import { PicklistStateService } from './picklist-state.service';
var PicklistValuesetMovingService = /** @class */ (function () {
    function PicklistValuesetMovingService(filterService, stateService) {
        this.filterService = filterService;
        this.stateService = stateService;
    }
    Object.defineProperty(PicklistValuesetMovingService.prototype, "valueList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.valueList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PicklistValuesetMovingService.prototype, "valueSetList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stateService.valueSetList;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} optionsToMove
     * @param {?} pane
     * @param {?=} shouldBreakValuesets
     * @return {?}
     */
    PicklistValuesetMovingService.prototype.moveOutValuesets = /**
     * @param {?} optionsToMove
     * @param {?} pane
     * @param {?=} shouldBreakValuesets
     * @return {?}
     */
    function (optionsToMove, pane, shouldBreakValuesets) {
        var _this = this;
        if (shouldBreakValuesets === void 0) { shouldBreakValuesets = false; }
        this.valueSetList.selectedOptions.forEach((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            v.showValues = false;
            optionsToMove.valueSets.set(v.code, v);
            _this.valueSetList.options.delete(v.code);
        }));
        this.valueSetList.filteredOptions.forEach((/**
         * @param {?} valueset
         * @return {?}
         */
        function (valueset) {
            if (valueset.selected || valueset.subValuesSelectList.selectedOptions.size < 1) {
                return;
            }
            if (shouldBreakValuesets) {
                _this.breakValueset(valueset, optionsToMove, pane.companion);
            }
            else {
                _this.moveSubValues(valueset.subValuesSelectList.selectedOptions, pane);
            }
        }));
    };
    /**
     * @private
     * @param {?} valueset
     * @param {?} optionsToMove
     * @param {?} companionPane
     * @return {?}
     */
    PicklistValuesetMovingService.prototype.breakValueset = /**
     * @private
     * @param {?} valueset
     * @param {?} optionsToMove
     * @param {?} companionPane
     * @return {?}
     */
    function (valueset, optionsToMove, companionPane) {
        valueset.showValues = false;
        optionsToMove.valueSets.set(valueset.code, valueset);
        this.valueSetList.options.delete(valueset.code);
        /** @type {?} */
        var unselectedSubValues = new Map();
        valueset.subValuesSelectList.filteredOptions
            .filter((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return !o.selected; }))
            .forEach((/**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            unselectedSubValues.set(o.code, new ValueListOption(o.option, o.code));
        }));
        if (!companionPane) {
            return;
        }
        this.moveSubValues(unselectedSubValues, companionPane);
    };
    /**
     * @private
     * @param {?} valuesMap
     * @param {?} sourcePane
     * @return {?}
     */
    PicklistValuesetMovingService.prototype.moveSubValues = /**
     * @private
     * @param {?} valuesMap
     * @param {?} sourcePane
     * @return {?}
     */
    function (valuesMap, sourcePane) {
        this.removeValuesFromPane(valuesMap, sourcePane);
        if (!sourcePane.companion) {
            return;
        }
        valuesMap.forEach((/**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            // tslint:disable-next-line:no-non-null-assertion
            (/** @type {?} */ (sourcePane.companion)).valueList.options.set(o.code, new ValueListOption(o.option, o.code));
        }));
    };
    /**
     * Handles complex logic for when one pane is paged, and we want to keep the "x of y" counts accurate without a round trip to the server
     */
    /**
     * Handles complex logic for when one pane is paged, and we want to keep the "x of y" counts accurate without a round trip to the server
     * @private
     * @param {?} valuesMap
     * @param {?} pane
     * @return {?}
     */
    PicklistValuesetMovingService.prototype.removeValuesFromPane = /**
     * Handles complex logic for when one pane is paged, and we want to keep the "x of y" counts accurate without a round trip to the server
     * @private
     * @param {?} valuesMap
     * @param {?} pane
     * @return {?}
     */
    function (valuesMap, pane) {
        if (pane.isPaged) {
            // don't bother trying to remove values or decrement count for options that are already filtered out
            this.filterService.preFilterOptionsForRemoteMode(valuesMap, pane.valueList);
        }
        valuesMap.forEach((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            /** @type {?} */
            var optionDeleted = pane.valueList.options.delete(v.code);
            /** @type {?} */
            var optionAlreadyInCompanionList = pane.companion ? pane.companion.valueList.options.has(v.code) : false;
            if (!optionDeleted && pane.isPaged && !optionAlreadyInCompanionList) {
                pane.valueList.additionalRemoteOptions--;
            }
        }));
    };
    PicklistValuesetMovingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PicklistValuesetMovingService.ctorParameters = function () { return [
        { type: PicklistFilterService },
        { type: PicklistStateService }
    ]; };
    return PicklistValuesetMovingService;
}());
export { PicklistValuesetMovingService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PicklistValuesetMovingService.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    PicklistValuesetMovingService.prototype.stateService;
}
//# sourceMappingURL=data:application/json;base64,