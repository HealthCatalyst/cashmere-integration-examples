/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/picklist.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Represents a simple picklist option.
 * @record
 */
export function IValueOption() { }
if (false) {
    /**
     * Any unique string identifier.
     * @type {?}
     */
    IValueOption.prototype.code;
    /**
     * The name of the option that will be displayed in the UI.
     * @type {?}
     */
    IValueOption.prototype.title;
}
/**
 * Represents a collection or bundle of picklist options.
 * @record
 */
export function IValueSetOption() { }
if (false) {
    /**
     * Number of subvalues. Required because of the fact that `subValues` isn't always preloaded.
     * @type {?}
     */
    IValueSetOption.prototype.subValueCount;
    /**
     * Collection of values in this value set. The code and title of each subvalue should match what
     * is used by the value when used outside of a valueset. Note: The `subValues` array can initially be
     * empty if the `getValuesForValueset` callback function is provided.
     * @type {?}
     */
    IValueSetOption.prototype.subValues;
}
/**
 * @record
 */
export function IPicklistOptions() { }
if (false) {
    /**
     * A collection of values.
     * @type {?}
     */
    IPicklistOptions.prototype.values;
    /**
     * A collection of value sets, which may or may not be pre-seeded with its subvalues.
     * @type {?}
     */
    IPicklistOptions.prototype.valueSets;
}
/**
 * @record
 */
export function IPicklistSettings() { }
if (false) {
    /**
     * True if code is considered important. If so, search and sorting will use the code. *Defaults to false.*
     * @type {?|undefined}
     */
    IPicklistSettings.prototype.codeIsSignificant;
    /**
     * Set to true to use valuesets. *Defaults to false.*
     * @type {?|undefined}
     */
    IPicklistSettings.prototype.useValuesets;
    /**
     * Set to true to show text in the header. *Defaults to true.*
     * @type {?|undefined}
     */
    IPicklistSettings.prototype.showHeaderText;
    /**
     * Text for left header. *Defaults to "Available".*
     * @type {?|undefined}
     */
    IPicklistSettings.prototype.leftHeaderText;
    /**
     * Text for right header. *Defaults to "Selected".*
     * @type {?|undefined}
     */
    IPicklistSettings.prototype.rightHeaderText;
    /**
     * How to sort options in the pane. Options: `asc` | `desc` | `none`; *Defaults to `none`.*
     * @type {?|undefined}
     */
    IPicklistSettings.prototype.sort;
    /**
     * Pre-seed the modal with selected options.
     * @type {?|undefined}
     */
    IPicklistSettings.prototype.selected;
    /**
     * Available options in the picklist. Set with local values or callbacks to retrieve remote values.
     * @type {?|undefined}
     */
    IPicklistSettings.prototype.options;
}
/**
 * @record
 */
export function IPicklistOptionsSource() { }
if (false) {
    /**
     * Collection of values to select from.
     * @type {?|undefined}
     */
    IPicklistOptionsSource.prototype.values;
    /**
     * Collection of value sets to select from.
     * @type {?|undefined}
     */
    IPicklistOptionsSource.prototype.valueSets;
    /**
     * Will the results from the server be paged? *Defaults to false.* Not used without `getOptions` callback.
     * @type {?|undefined}
     */
    IPicklistOptionsSource.prototype.isPaged;
    /**
     * What size results will be returned from the server? *Defaults to 100.* Not used without `getOptions` callback.
     * @type {?|undefined}
     */
    IPicklistOptionsSource.prototype.pageSize;
    /**
     * Callback function retrieve values.
     * @type {?|undefined}
     */
    IPicklistOptionsSource.prototype.getOptions;
    /**
     * Callback function to retrieve values for a value set.
     * @type {?|undefined}
     */
    IPicklistOptionsSource.prototype.getValuesForValueset;
}
/**
 * @ignore
 */
var /**
 * @ignore
 */
PicklistOptionsSource = /** @class */ (function () {
    function PicklistOptionsSource() {
        this.values = new Array();
        this.valueSets = new Array();
        this.isPaged = false;
        this.pageSize = 100;
    }
    /**
     * @return {?}
     */
    PicklistOptionsSource.prototype.optionsAreLocal = /**
     * @return {?}
     */
    function () {
        return !this.getOptions;
    };
    return PicklistOptionsSource;
}());
/**
 * @ignore
 */
export { PicklistOptionsSource };
if (false) {
    /** @type {?} */
    PicklistOptionsSource.prototype.values;
    /** @type {?} */
    PicklistOptionsSource.prototype.valueSets;
    /** @type {?} */
    PicklistOptionsSource.prototype.isPaged;
    /** @type {?} */
    PicklistOptionsSource.prototype.pageSize;
    /** @type {?} */
    PicklistOptionsSource.prototype.getOptions;
    /** @type {?} */
    PicklistOptionsSource.prototype.getValuesForValueset;
}
/**
 * @ignore
 */
var /**
 * @ignore
 */
PicklistSettings = /** @class */ (function () {
    function PicklistSettings() {
        this.codeIsSignificant = false;
        this.useValuesets = false;
        this.showHeaderText = true;
        this.leftHeaderText = 'Available';
        this.rightHeaderText = 'Selected';
        this.sort = 'none';
        this.selected = { values: new Array(), valueSets: new Array() }; // options selected in modal
        // options selected in modal
        this.options = new PicklistOptionsSource(); // options available for choosing
    }
    return PicklistSettings;
}());
/**
 * @ignore
 */
export { PicklistSettings };
if (false) {
    /** @type {?} */
    PicklistSettings.prototype.codeIsSignificant;
    /** @type {?} */
    PicklistSettings.prototype.useValuesets;
    /** @type {?} */
    PicklistSettings.prototype.showHeaderText;
    /** @type {?} */
    PicklistSettings.prototype.leftHeaderText;
    /** @type {?} */
    PicklistSettings.prototype.rightHeaderText;
    /** @type {?} */
    PicklistSettings.prototype.sort;
    /** @type {?} */
    PicklistSettings.prototype.selected;
    /** @type {?} */
    PicklistSettings.prototype.options;
}
/**
 * Interface to be used as part of the response when loading values over HTTP.
 * @record
 * @template IT
 */
export function IPagedCollection() { }
if (false) {
    /**
     * Page being returned in the response, and the number of items per page.
     * @type {?}
     */
    IPagedCollection.prototype.pagerSettings;
    /**
     * Total number of items, including those already on the client or included in this response.
     * @type {?}
     */
    IPagedCollection.prototype.totalItems;
    /**
     * Total number of pages.
     * @type {?}
     */
    IPagedCollection.prototype.totalPages;
    /**
     * An array of `IValueOption` or `IValuesetOption`.
     * @type {?}
     */
    IPagedCollection.prototype.values;
}
/**
 * @record
 */
export function IPageSettings() { }
if (false) {
    /**
     * Current page of the request or response.
     * @type {?}
     */
    IPageSettings.prototype.currentPage;
    /**
     * Total number of items on a page
     * @type {?}
     */
    IPageSettings.prototype.itemsPerPage;
}
/**
 * Interface to be used for the response when loading values over HTTP. This the type your `getOptions()` callback should return.
 * @record
 */
export function IPicklistRemoteQueryResponse() { }
if (false) {
    /**
     * Paged collection of `IValueOptions`. Only used if this picklist has `optionSource.isPaged` set to true.
     * @type {?|undefined}
     */
    IPicklistRemoteQueryResponse.prototype.pagedValues;
    /**
     * Paged collection of `IValueSetOptions`. Only used if this picklist has `optionSource.isPaged` set to true.
     * @type {?|undefined}
     */
    IPicklistRemoteQueryResponse.prototype.pagedValueSets;
    /**
     * An array of `{ code: string, title: string}`. Only used if this picklist has `optionSource.isPaged` set to false.
     * @type {?|undefined}
     */
    IPicklistRemoteQueryResponse.prototype.values;
    /**
     * An array of `{ code: string, title: string, subValueCount: number, subValues: IValueOption[]}`.
     * Only used if this picklist has `optionSource.isPaged` set to false. Note: The `subValues` array can
     * initially be empty if the `getValuesForValueset` callback function is provided.
     * @type {?|undefined}
     */
    IPicklistRemoteQueryResponse.prototype.valueSets;
}
/**
 * An instance of this class will be sent to the `getOptions()` callback if loading values over HTTP.
 */
var /**
 * An instance of this class will be sent to the `getOptions()` callback if loading values over HTTP.
 */
PicklistRemoteQueryOptions = /** @class */ (function () {
    function PicklistRemoteQueryOptions(picklist, searchTerm, valueTypeToQuery) {
        this.picklist = picklist;
        this.searchTerm = searchTerm;
        this.valueTypeToQuery = valueTypeToQuery;
    }
    return PicklistRemoteQueryOptions;
}());
/**
 * An instance of this class will be sent to the `getOptions()` callback if loading values over HTTP.
 */
export { PicklistRemoteQueryOptions };
if (false) {
    /**
     * Page and number of items per page requested for values.
     * @type {?}
     */
    PicklistRemoteQueryOptions.prototype.valuePageSettings;
    /**
     * Page and number of items per page requested for value sets.
     * @type {?}
     */
    PicklistRemoteQueryOptions.prototype.valueSetPageSettings;
    /**
     * The settings for this picklist. Particularly, `codeIsSignificant`, `useValuesets`,
     * and selected values will be useful in obtaining the needed values & value sets.
     * @type {?}
     */
    PicklistRemoteQueryOptions.prototype.picklist;
    /**
     * Search term entered by the user that triggered the request.
     * @type {?}
     */
    PicklistRemoteQueryOptions.prototype.searchTerm;
    /**
     * Which types of values should we be getting?
     * @type {?}
     */
    PicklistRemoteQueryOptions.prototype.valueTypeToQuery;
}
//# sourceMappingURL=data:application/json;base64,