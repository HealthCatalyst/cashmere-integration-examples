/**
 * @fileoverview added by tsickle
 * Generated from: lib/picklist/pane/picklist-pane.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { from } from 'rxjs';
/**
 * @template T
 */
var /**
 * @template T
 */
FilterableSelectList = /** @class */ (function () {
    function FilterableSelectList(options) {
        if (options === void 0) { options = new Map(); }
        this.options = options;
        this.selectedOptions = new Map();
        this.lastClickedOption = null;
        this.filteredOptions = new Array();
        this.isActive = true;
        this.additionalRemoteOptions = 0;
        this.loadingOptions = from([]);
        this.appendingOptions = from([]);
        this.codeIsSignificant = false;
    }
    return FilterableSelectList;
}());
/**
 * @template T
 */
export { FilterableSelectList };
if (false) {
    /** @type {?} */
    FilterableSelectList.prototype.selectedOptions;
    /** @type {?} */
    FilterableSelectList.prototype.lastClickedOption;
    /** @type {?} */
    FilterableSelectList.prototype.filteredOptions;
    /** @type {?} */
    FilterableSelectList.prototype.isActive;
    /** @type {?} */
    FilterableSelectList.prototype.additionalRemoteOptions;
    /** @type {?} */
    FilterableSelectList.prototype.loadingOptions;
    /** @type {?} */
    FilterableSelectList.prototype.appendingOptions;
    /** @type {?} */
    FilterableSelectList.prototype.codeIsSignificant;
    /** @type {?} */
    FilterableSelectList.prototype.sort;
    /** @type {?} */
    FilterableSelectList.prototype.options;
}
var SubSelectList = /** @class */ (function (_super) {
    tslib_1.__extends(SubSelectList, _super);
    function SubSelectList(parentValueSet, options) {
        if (options === void 0) { options = new Map(); }
        var _this = _super.call(this, options) || this;
        _this.parentValueSet = parentValueSet;
        _this.options = options;
        return _this;
    }
    return SubSelectList;
}(FilterableSelectList));
export { SubSelectList };
if (false) {
    /** @type {?} */
    SubSelectList.prototype.parentValueSet;
    /** @type {?} */
    SubSelectList.prototype.options;
}
/**
 * @param {?} model
 * @return {?}
 */
export function isSubList(model) {
    /** @type {?} */
    var subList = (/** @type {?} */ (model));
    return subList && subList.parentValueSet !== undefined;
}
var SelectListOption = /** @class */ (function () {
    function SelectListOption(option, code) {
        this.option = option;
        this.code = code;
        this.selected = false;
    }
    return SelectListOption;
}());
export { SelectListOption };
if (false) {
    /** @type {?} */
    SelectListOption.prototype.selected;
    /** @type {?} */
    SelectListOption.prototype.option;
    /** @type {?} */
    SelectListOption.prototype.code;
}
var ValueListOption = /** @class */ (function (_super) {
    tslib_1.__extends(ValueListOption, _super);
    function ValueListOption(option, code) {
        return _super.call(this, option, code) || this;
    }
    return ValueListOption;
}(SelectListOption));
export { ValueListOption };
var ValueSetListOption = /** @class */ (function (_super) {
    tslib_1.__extends(ValueSetListOption, _super);
    function ValueSetListOption(option, code) {
        var _this = _super.call(this, option, code) || this;
        _this.showValues = false;
        _this.loadingValues = false;
        _this.subValuesSelectList = new SubSelectList(_this);
        return _this;
    }
    return ValueSetListOption;
}(SelectListOption));
export { ValueSetListOption };
if (false) {
    /** @type {?} */
    ValueSetListOption.prototype.subValuesSelectList;
    /** @type {?} */
    ValueSetListOption.prototype.showValues;
    /** @type {?} */
    ValueSetListOption.prototype.loadingValues;
}
var PicklistValueOptions = /** @class */ (function () {
    function PicklistValueOptions() {
        this.values = new Map();
        this.valueSets = new Map();
    }
    return PicklistValueOptions;
}());
export { PicklistValueOptions };
if (false) {
    /** @type {?} */
    PicklistValueOptions.prototype.values;
    /** @type {?} */
    PicklistValueOptions.prototype.valueSets;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2xpc3QtcGFuZS5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoZWFsdGhjYXRhbHlzdC9jYXNobWVyZS8iLCJzb3VyY2VzIjpbImxpYi9waWNrbGlzdC9wYW5lL3BpY2tsaXN0LXBhbmUubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBYSxNQUFNLE1BQU0sQ0FBQzs7OztBQUd0Qzs7OztJQVdJLDhCQUFtQixPQUE4QjtRQUE5Qix3QkFBQSxFQUFBLGNBQWMsR0FBRyxFQUFhO1FBQTlCLFlBQU8sR0FBUCxPQUFPLENBQXVCO1FBVjFDLG9CQUFlLEdBQUcsSUFBSSxHQUFHLEVBQWEsQ0FBQztRQUN2QyxzQkFBaUIsR0FBYSxJQUFJLENBQUM7UUFDbkMsb0JBQWUsR0FBRyxJQUFJLEtBQUssRUFBSyxDQUFDO1FBQ2pDLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFFaEIsNEJBQXVCLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLG1CQUFjLEdBQXdCLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQyxxQkFBZ0IsR0FBd0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELHNCQUFpQixHQUFZLEtBQUssQ0FBQztJQUVVLENBQUM7SUFDekQsMkJBQUM7QUFBRCxDQUFDLEFBWkQsSUFZQzs7Ozs7OztJQVhHLCtDQUE4Qzs7SUFDOUMsaURBQTBDOztJQUMxQywrQ0FBd0M7O0lBQ3hDLHdDQUF1Qjs7SUFFdkIsdURBQW1DOztJQUNuQyw4Q0FBc0Q7O0lBQ3RELGdEQUF3RDs7SUFDeEQsaURBQTBDOztJQUMxQyxvQ0FBb0I7O0lBQ1IsdUNBQXFDOztBQUdyRDtJQUFtQyx5Q0FBcUM7SUFDcEUsdUJBQW1CLGNBQWtDLEVBQVMsT0FBNEM7UUFBNUMsd0JBQUEsRUFBQSxjQUFjLEdBQUcsRUFBMkI7UUFBMUcsWUFDSSxrQkFBTSxPQUFPLENBQUMsU0FDakI7UUFGa0Isb0JBQWMsR0FBZCxjQUFjLENBQW9CO1FBQVMsYUFBTyxHQUFQLE9BQU8sQ0FBcUM7O0lBRTFHLENBQUM7SUFDTCxvQkFBQztBQUFELENBQUMsQUFKRCxDQUFtQyxvQkFBb0IsR0FJdEQ7Ozs7SUFIZSx1Q0FBeUM7O0lBQUUsZ0NBQW1EOzs7Ozs7QUFLOUcsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUE2Qzs7UUFDN0QsT0FBTyxHQUFHLG1CQUFlLEtBQUssRUFBQTtJQUNwQyxPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUMsY0FBYyxLQUFLLFNBQVMsQ0FBQztBQUMzRCxDQUFDO0FBRUQ7SUFHSSwwQkFBbUIsTUFBVyxFQUFTLElBQVk7UUFBaEMsV0FBTSxHQUFOLE1BQU0sQ0FBSztRQUFTLFNBQUksR0FBSixJQUFJLENBQVE7UUFDL0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0FBQyxBQU5ELElBTUM7Ozs7SUFMRyxvQ0FBeUI7O0lBRWIsa0NBQWtCOztJQUFFLGdDQUFtQjs7QUFLdkQ7SUFBcUMsMkNBQWdCO0lBQ2pELHlCQUFZLE1BQW9CLEVBQUUsSUFBWTtlQUMxQyxrQkFBTSxNQUFNLEVBQUUsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUFKRCxDQUFxQyxnQkFBZ0IsR0FJcEQ7O0FBRUQ7SUFBd0MsOENBQWdCO0lBS3BELDRCQUFZLE1BQXVCLEVBQUUsSUFBWTtRQUFqRCxZQUNJLGtCQUFNLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FFdEI7UUFOTSxnQkFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixtQkFBYSxHQUFHLEtBQUssQ0FBQztRQUl6QixLQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxhQUFhLENBQUMsS0FBSSxDQUFDLENBQUM7O0lBQ3ZELENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUFURCxDQUF3QyxnQkFBZ0IsR0FTdkQ7Ozs7SUFSRyxpREFBMEM7O0lBQzFDLHdDQUEwQjs7SUFDMUIsMkNBQTZCOztBQVFqQztJQUFBO1FBQ1csV0FBTSxHQUFHLElBQUksR0FBRyxFQUEyQixDQUFDO1FBQzVDLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBOEIsQ0FBQztJQUM3RCxDQUFDO0lBQUQsMkJBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQzs7OztJQUZHLHNDQUFtRDs7SUFDbkQseUNBQXlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtmcm9tLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7SVZhbHVlT3B0aW9uLCBJVmFsdWVTZXRPcHRpb259IGZyb20gJy4uL3BpY2tsaXN0Lm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIEZpbHRlcmFibGVTZWxlY3RMaXN0PFQgZXh0ZW5kcyBTZWxlY3RMaXN0T3B0aW9uPiB7XG4gICAgcHVibGljIHNlbGVjdGVkT3B0aW9ucyA9IG5ldyBNYXA8c3RyaW5nLCBUPigpO1xuICAgIHB1YmxpYyBsYXN0Q2xpY2tlZE9wdGlvbjogVCB8IG51bGwgPSBudWxsO1xuICAgIHB1YmxpYyBmaWx0ZXJlZE9wdGlvbnMgPSBuZXcgQXJyYXk8VD4oKTtcbiAgICBwdWJsaWMgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgcHVibGljIGFkZGl0aW9uYWxSZW1vdGVPcHRpb25zID0gMDtcbiAgICBwdWJsaWMgbG9hZGluZ09wdGlvbnM6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSBmcm9tKFtdKTtcbiAgICBwdWJsaWMgYXBwZW5kaW5nT3B0aW9uczogT2JzZXJ2YWJsZTxib29sZWFuPiA9IGZyb20oW10pO1xuICAgIHB1YmxpYyBjb2RlSXNTaWduaWZpY2FudDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBzb3J0OiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IocHVibGljIG9wdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgVD4oKSkge31cbn1cblxuZXhwb3J0IGNsYXNzIFN1YlNlbGVjdExpc3QgZXh0ZW5kcyBGaWx0ZXJhYmxlU2VsZWN0TGlzdDxWYWx1ZUxpc3RPcHRpb24+IHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGFyZW50VmFsdWVTZXQ6IFZhbHVlU2V0TGlzdE9wdGlvbiwgcHVibGljIG9wdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgVmFsdWVMaXN0T3B0aW9uPigpKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3ViTGlzdChtb2RlbDogRmlsdGVyYWJsZVNlbGVjdExpc3Q8U2VsZWN0TGlzdE9wdGlvbj4pOiBtb2RlbCBpcyBTdWJTZWxlY3RMaXN0IHtcbiAgICBjb25zdCBzdWJMaXN0ID0gPFN1YlNlbGVjdExpc3Q+bW9kZWw7XG4gICAgcmV0dXJuIHN1Ykxpc3QgJiYgc3ViTGlzdC5wYXJlbnRWYWx1ZVNldCAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY2xhc3MgU2VsZWN0TGlzdE9wdGlvbiB7XG4gICAgcHVibGljIHNlbGVjdGVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIG9wdGlvbjogYW55LCBwdWJsaWMgY29kZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWYWx1ZUxpc3RPcHRpb24gZXh0ZW5kcyBTZWxlY3RMaXN0T3B0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb246IElWYWx1ZU9wdGlvbiwgY29kZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbiwgY29kZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmFsdWVTZXRMaXN0T3B0aW9uIGV4dGVuZHMgU2VsZWN0TGlzdE9wdGlvbiB7XG4gICAgcHVibGljIHN1YlZhbHVlc1NlbGVjdExpc3Q6IFN1YlNlbGVjdExpc3Q7XG4gICAgcHVibGljIHNob3dWYWx1ZXMgPSBmYWxzZTtcbiAgICBwdWJsaWMgbG9hZGluZ1ZhbHVlcyA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uOiBJVmFsdWVTZXRPcHRpb24sIGNvZGU6IHN0cmluZykge1xuICAgICAgICBzdXBlcihvcHRpb24sIGNvZGUpO1xuICAgICAgICB0aGlzLnN1YlZhbHVlc1NlbGVjdExpc3QgPSBuZXcgU3ViU2VsZWN0TGlzdCh0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQaWNrbGlzdFZhbHVlT3B0aW9ucyB7XG4gICAgcHVibGljIHZhbHVlcyA9IG5ldyBNYXA8c3RyaW5nLCBWYWx1ZUxpc3RPcHRpb24+KCk7XG4gICAgcHVibGljIHZhbHVlU2V0cyA9IG5ldyBNYXA8c3RyaW5nLCBWYWx1ZVNldExpc3RPcHRpb24+KCk7XG59XG4iXX0=