/**
 * @fileoverview added by tsickle
 * Generated from: lib/toaster/hc-toast-ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { Input } from '@angular/core';
var HcToastRef = /** @class */ (function () {
    function HcToastRef(_overlayRef) {
        this._overlayRef = _overlayRef;
        this._beforeClose = new Subject();
        this._afterClosed = new Subject();
    }
    Object.defineProperty(HcToastRef.prototype, "progress", {
        /** If the `hasProgressBar` option is set to true in `hc-toast-options`, this 0-100 value can
         * be used to make it a determinate progress bar. If the progress bar is on but a value is not set,
         * the progress bar will be indeterminate.*/
        get: /**
         * If the `hasProgressBar` option is set to true in `hc-toast-options`, this 0-100 value can
         * be used to make it a determinate progress bar. If the progress bar is on but a value is not set,
         * the progress bar will be indeterminate.
         * @return {?}
         */
        function () {
            return this.componentInstance._progressVal;
        },
        set: /**
         * @param {?} progVal
         * @return {?}
         */
        function (progVal) {
            if (progVal < 0) {
                progVal = 0;
            }
            else if (progVal > 100) {
                progVal = 100;
            }
            this.componentInstance._progressVal = progVal;
            this.componentInstance._progressWidth = progVal + '%';
        },
        enumerable: true,
        configurable: true
    });
    /** Closes the associated toast message with this reference */
    /**
     * Closes the associated toast message with this reference
     * @return {?}
     */
    HcToastRef.prototype.close = /**
     * Closes the associated toast message with this reference
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.componentInstance._animationState !== 'leave') {
            this.componentInstance._animationStateChanged
                .pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event.phaseName === 'start'; })), take(1))
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this._beforeClose.next();
                _this._beforeClose.complete();
            }));
            this.componentInstance._animationStateChanged
                .pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event.phaseName === 'done' && event.toState === 'leave'; })), take(1))
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this._overlayRef.dispose();
                _this._afterClosed.next();
                _this._afterClosed.complete();
                _this.componentInstance._componentInstance.unsubscribe();
                _this.componentInstance = (/** @type {?} */ (null));
            }));
            this.componentInstance._startExitAnimation();
        }
    };
    HcToastRef.propDecorators = {
        progress: [{ type: Input }]
    };
    return HcToastRef;
}());
export { HcToastRef };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HcToastRef.prototype._beforeClose;
    /**
     * @type {?}
     * @private
     */
    HcToastRef.prototype._afterClosed;
    /** @type {?} */
    HcToastRef.prototype._toastPosition;
    /**
     * The HcToast component associated with the toast reference
     * @type {?}
     */
    HcToastRef.prototype.componentInstance;
    /** @type {?} */
    HcToastRef.prototype._overlayRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGMtdG9hc3QtcmVmLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhlYWx0aGNhdGFseXN0L2Nhc2htZXJlLyIsInNvdXJjZXMiOlsibGliL3RvYXN0ZXIvaGMtdG9hc3QtcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFcEM7SUEyQkksb0JBQW1CLFdBQXVCO1FBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBMUJsQyxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDbkMsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBeUJFLENBQUM7SUFmOUMsc0JBQ0ksZ0NBQVE7UUFKWjs7b0RBRTRDOzs7Ozs7O1FBQzVDO1lBRUksT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDO1FBQy9DLENBQUM7Ozs7O1FBRUQsVUFBYSxPQUFlO1lBQ3hCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtnQkFDYixPQUFPLEdBQUcsQ0FBQyxDQUFDO2FBQ2Y7aUJBQU0sSUFBSSxPQUFPLEdBQUcsR0FBRyxFQUFFO2dCQUN0QixPQUFPLEdBQUcsR0FBRyxDQUFDO2FBQ2pCO1lBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7WUFDOUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsR0FBRyxPQUFPLEdBQUcsR0FBRyxDQUFDO1FBQzFELENBQUM7OztPQVZBO0lBY0QsOERBQThEOzs7OztJQUM5RCwwQkFBSzs7OztJQUFMO1FBQUEsaUJBMkJDO1FBMUJHLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsS0FBSyxPQUFPLEVBQUU7WUFDcEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHNCQUFzQjtpQkFDeEMsSUFBSSxDQUNELE1BQU07Ozs7WUFBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxTQUFTLEtBQUssT0FBTyxFQUEzQixDQUEyQixFQUFDLEVBQzVDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDVjtpQkFDQSxTQUFTOzs7WUFBQztnQkFDUCxLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN6QixLQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2pDLENBQUMsRUFBQyxDQUFDO1lBRVAsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHNCQUFzQjtpQkFDeEMsSUFBSSxDQUNELE1BQU07Ozs7WUFBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxTQUFTLEtBQUssTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssT0FBTyxFQUF2RCxDQUF1RCxFQUFDLEVBQ3hFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDVjtpQkFDQSxTQUFTOzs7WUFBQztnQkFDUCxLQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUMzQixLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN6QixLQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUM3QixLQUFJLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ3hELEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxtQkFBQSxJQUFJLEVBQUMsQ0FBQztZQUNuQyxDQUFDLEVBQUMsQ0FBQztZQUVQLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQzs7MkJBN0NBLEtBQUs7O0lBOENWLGlCQUFDO0NBQUEsQUExREQsSUEwREM7U0ExRFksVUFBVTs7Ozs7O0lBQ25CLGtDQUEyQzs7Ozs7SUFDM0Msa0NBQTJDOztJQUUzQyxvQ0FBdUI7Ozs7O0lBR3ZCLHVDQUFvQzs7SUFvQnhCLGlDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T3ZlcmxheVJlZn0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHtIY1RvYXN0Q29tcG9uZW50fSBmcm9tICcuL2hjLXRvYXN0LmNvbXBvbmVudCc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIHRha2V9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7SW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgSGNUb2FzdFJlZiB7XG4gICAgcHJpdmF0ZSBfYmVmb3JlQ2xvc2UgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICAgIHByaXZhdGUgX2FmdGVyQ2xvc2VkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIF90b2FzdFBvc2l0aW9uOiBzdHJpbmc7XG5cbiAgICAvKiogVGhlIEhjVG9hc3QgY29tcG9uZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgdG9hc3QgcmVmZXJlbmNlICovXG4gICAgY29tcG9uZW50SW5zdGFuY2U6IEhjVG9hc3RDb21wb25lbnQ7XG5cbiAgICAvKiogSWYgdGhlIGBoYXNQcm9ncmVzc0JhcmAgb3B0aW9uIGlzIHNldCB0byB0cnVlIGluIGBoYy10b2FzdC1vcHRpb25zYCwgdGhpcyAwLTEwMCB2YWx1ZSBjYW5cbiAgICAgKiBiZSB1c2VkIHRvIG1ha2UgaXQgYSBkZXRlcm1pbmF0ZSBwcm9ncmVzcyBiYXIuIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgb24gYnV0IGEgdmFsdWUgaXMgbm90IHNldCxcbiAgICAgKiB0aGUgcHJvZ3Jlc3MgYmFyIHdpbGwgYmUgaW5kZXRlcm1pbmF0ZS4qL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHByb2dyZXNzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlLl9wcm9ncmVzc1ZhbDtcbiAgICB9XG5cbiAgICBzZXQgcHJvZ3Jlc3MocHJvZ1ZhbDogbnVtYmVyKSB7XG4gICAgICAgIGlmIChwcm9nVmFsIDwgMCkge1xuICAgICAgICAgICAgcHJvZ1ZhbCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvZ1ZhbCA+IDEwMCkge1xuICAgICAgICAgICAgcHJvZ1ZhbCA9IDEwMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXBvbmVudEluc3RhbmNlLl9wcm9ncmVzc1ZhbCA9IHByb2dWYWw7XG4gICAgICAgIHRoaXMuY29tcG9uZW50SW5zdGFuY2UuX3Byb2dyZXNzV2lkdGggPSBwcm9nVmFsICsgJyUnO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfb3ZlcmxheVJlZjogT3ZlcmxheVJlZikge31cblxuICAgIC8qKiBDbG9zZXMgdGhlIGFzc29jaWF0ZWQgdG9hc3QgbWVzc2FnZSB3aXRoIHRoaXMgcmVmZXJlbmNlICovXG4gICAgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudEluc3RhbmNlLl9hbmltYXRpb25TdGF0ZSAhPT0gJ2xlYXZlJykge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZS5fYW5pbWF0aW9uU3RhdGVDaGFuZ2VkXG4gICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcihldmVudCA9PiBldmVudC5waGFzZU5hbWUgPT09ICdzdGFydCcpLFxuICAgICAgICAgICAgICAgICAgICB0YWtlKDEpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iZWZvcmVDbG9zZS5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JlZm9yZUNsb3NlLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50SW5zdGFuY2UuX2FuaW1hdGlvblN0YXRlQ2hhbmdlZFxuICAgICAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoZXZlbnQgPT4gZXZlbnQucGhhc2VOYW1lID09PSAnZG9uZScgJiYgZXZlbnQudG9TdGF0ZSA9PT0gJ2xlYXZlJyksXG4gICAgICAgICAgICAgICAgICAgIHRha2UoMSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX292ZXJsYXlSZWYuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZnRlckNsb3NlZC5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50SW5zdGFuY2UuX2NvbXBvbmVudEluc3RhbmNlLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSBudWxsITtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZS5fc3RhcnRFeGl0QW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=