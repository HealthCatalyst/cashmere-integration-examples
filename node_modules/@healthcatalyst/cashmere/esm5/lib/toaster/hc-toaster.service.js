/**
 * @fileoverview added by tsickle
 * Generated from: lib/toaster/hc-toaster.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, TemplateRef } from '@angular/core';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';
import { HcToastComponent } from './hc-toast.component';
import { HcToastRef } from './hc-toast-ref';
import { filter, take } from 'rxjs/operators';
/**
 * Toasts provide users with instant feedback on actions they've taken. For more general information,
 * use a `hc-banner`.
 */
var HcToasterService = /** @class */ (function () {
    // Inject overlay service
    function HcToasterService(injector, _overlay) {
        this.injector = injector;
        this._overlay = _overlay;
        this._toasts = [];
    }
    /** Displays a new toaster message with the settings included in `toastOptions`. `toastContent` can be used to
     * create entirely custom toasts, but only if the type in toastOptions is set to `custom`. Be sure to set `border-radius: 5px`
     * in the style of your custom content template so it matches the toast container. If your custom toast is
     * using a component, the `componentSetup` parameter accepts an object or function to configure that component. */
    /**
     * Displays a new toaster message with the settings included in `toastOptions`. `toastContent` can be used to
     * create entirely custom toasts, but only if the type in toastOptions is set to `custom`. Be sure to set `border-radius: 5px`
     * in the style of your custom content template so it matches the toast container. If your custom toast is
     * using a component, the `componentSetup` parameter accepts an object or function to configure that component.
     * @template T
     * @param {?=} toastOptions
     * @param {?=} toastContent
     * @param {?=} componentSetup
     * @return {?}
     */
    HcToasterService.prototype.addToast = /**
     * Displays a new toaster message with the settings included in `toastOptions`. `toastContent` can be used to
     * create entirely custom toasts, but only if the type in toastOptions is set to `custom`. Be sure to set `border-radius: 5px`
     * in the style of your custom content template so it matches the toast container. If your custom toast is
     * using a component, the `componentSetup` parameter accepts an object or function to configure that component.
     * @template T
     * @param {?=} toastOptions
     * @param {?=} toastContent
     * @param {?=} componentSetup
     * @return {?}
     */
    function (toastOptions, toastContent, componentSetup) {
        var _this = this;
        /** @type {?} */
        var defaultOptions = {
            type: 'success',
            position: 'bottom-right',
            timeout: 5000,
            clickDismiss: false
        };
        /** @type {?} */
        var options = tslib_1.__assign({}, defaultOptions, toastOptions);
        // Returns an OverlayRef (which is a PortalHost)
        /** @type {?} */
        var _overlayRef = this._createOverlay(options);
        // Instantiate remote control
        /** @type {?} */
        var _toastRef = new HcToastRef(_overlayRef);
        /** @type {?} */
        var overlayComponent = this._attachToastContainer(_overlayRef, _toastRef);
        _toastRef.componentInstance = overlayComponent;
        if (options.type === 'custom' && toastContent) {
            if (toastContent instanceof TemplateRef) {
                _toastRef.componentInstance._toastPortal = new TemplatePortal(toastContent, _toastRef.componentInstance._viewContainerRef);
            }
            else {
                _toastRef.componentInstance._toastPortal = new ComponentPortal(toastContent);
                if (componentSetup) {
                    _toastRef.componentInstance._componentInstance.pipe(filter((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return !!c; }))).subscribe((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) {
                        if (componentSetup instanceof Function) {
                            componentSetup(c);
                        }
                        else {
                            Object.keys(componentSetup).forEach((/**
                             * @param {?} k
                             * @return {?}
                             */
                            function (k) { return (c[k] = componentSetup[k]); }));
                        }
                    }));
                }
            }
        }
        // Listen for click events to close the toast if the option is set
        if (options.clickDismiss) {
            _toastRef.componentInstance._canDismiss = options.clickDismiss;
            _toastRef.componentInstance._closeClick.subscribe((/**
             * @return {?}
             */
            function () {
                _toastRef.close();
            }));
        }
        // Set the class for the type set in options
        if (options.type) {
            if (options.type === 'success' ||
                options.type === 'info' ||
                options.type === 'warning' ||
                options.type === 'alert' ||
                options.type === 'custom') {
                _toastRef.componentInstance._styleType = options.type;
            }
            else {
                throw Error('Unsupported toaster type: ' + options.type);
            }
        }
        // Set the header text
        if (options.header) {
            _toastRef.componentInstance._headerText = options.header;
        }
        // Set the toast width
        if (options.width || options.width === 0) {
            _toastRef.componentInstance._width = options.width;
        }
        // Set the body text
        if (options.body) {
            _toastRef.componentInstance._bodyText = options.body;
        }
        // Store the positioning of the toast
        _toastRef._toastPosition = String(options.position);
        // Set progress bar
        if (options.hasProgressBar) {
            _toastRef.componentInstance._hasProgressBar = options.hasProgressBar;
        }
        // Set the timeout interval to close the toast if non-zero
        if (options.timeout !== 0) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_toastRef.componentInstance) {
                    _toastRef.close();
                }
            }), options.timeout);
        }
        // Cleanup functions called when the toast close animation is triggered
        _toastRef.componentInstance._animationStateChanged
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.phaseName === 'done' && event.toState === 'leave'; })), take(1))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this._removeToastPointer(_toastRef);
            if (options.toastClosed) {
                options.toastClosed();
            }
            _this._updateToastPositions();
            _toastRef.componentInstance._closeClick.unsubscribe();
        }));
        _toastRef.componentInstance._changeRef.detectChanges();
        this._toasts.push(_toastRef);
        return _toastRef;
    };
    /** Closes the most recent toast displayed */
    /**
     * Closes the most recent toast displayed
     * @return {?}
     */
    HcToasterService.prototype.closeLastToast = /**
     * Closes the most recent toast displayed
     * @return {?}
     */
    function () {
        if (this._toasts.length > 0) {
            /** @type {?} */
            var element = this._toasts[this._toasts.length - 1];
            if (element) {
                element.close();
            }
        }
    };
    /** Closes currently visible toasts */
    /**
     * Closes currently visible toasts
     * @return {?}
     */
    HcToasterService.prototype.closeAllToasts = /**
     * Closes currently visible toasts
     * @return {?}
     */
    function () {
        /** @type {?} */
        var len = this._toasts.length;
        for (var index = 0; index < len; index++) {
            /** @type {?} */
            var element = this._toasts[index];
            if (element) {
                element.close();
            }
        }
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    HcToasterService.prototype._createOverlay = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var overlayConfig = this._getOverlayConfig(config);
        return this._overlay.create(overlayConfig);
    };
    /**
     * @private
     * @param {?} overlayRef
     * @param {?} toastRef
     * @return {?}
     */
    HcToasterService.prototype._attachToastContainer = /**
     * @private
     * @param {?} overlayRef
     * @param {?} toastRef
     * @return {?}
     */
    function (overlayRef, toastRef) {
        /** @type {?} */
        var injector = this._createInjector(toastRef);
        /** @type {?} */
        var containerPortal = new ComponentPortal(HcToastComponent, null, injector);
        /** @type {?} */
        var containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    };
    /**
     * @private
     * @param {?} toastRef
     * @return {?}
     */
    HcToasterService.prototype._createInjector = /**
     * @private
     * @param {?} toastRef
     * @return {?}
     */
    function (toastRef) {
        /** @type {?} */
        var injectionTokens = new WeakMap();
        injectionTokens.set(HcToastRef, toastRef);
        return new PortalInjector(this.injector, injectionTokens);
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    HcToasterService.prototype._getOverlayConfig = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var overlayConfig;
        /** @type {?} */
        var positionStrategy = this._getPositionStrategy(String(config.position), this._toasts.length);
        if (config.position === 'top-full-width' || config.position === 'bottom-full-width') {
            overlayConfig = new OverlayConfig({ positionStrategy: positionStrategy, width: '96%', panelClass: 'overlay-pointer-events' });
        }
        else {
            overlayConfig = new OverlayConfig({ positionStrategy: positionStrategy, panelClass: 'overlay-pointer-events' });
        }
        return overlayConfig;
    };
    /**
     * @private
     * @param {?} position
     * @param {?} index
     * @return {?}
     */
    HcToasterService.prototype._getPositionStrategy = /**
     * @private
     * @param {?} position
     * @param {?} index
     * @return {?}
     */
    function (position, index) {
        /** @type {?} */
        var positionStrategy;
        /** @type {?} */
        var toastIndex = this._getLastToast(position, index);
        switch (position) {
            case 'top-right':
                if (toastIndex !== -1) {
                    positionStrategy = this._overlay
                        .position()
                        .flexibleConnectedTo(this._toasts[toastIndex].componentInstance._el.nativeElement.children[0])
                        .withPositions([
                        {
                            overlayX: 'end',
                            overlayY: 'top',
                            originX: 'end',
                            originY: 'bottom'
                        }
                    ]);
                }
                else {
                    positionStrategy = this._overlay
                        .position()
                        .global()
                        .right('10px');
                }
                break;
            case 'top-center':
                if (toastIndex !== -1) {
                    positionStrategy = this._overlay
                        .position()
                        .flexibleConnectedTo(this._toasts[toastIndex].componentInstance._el.nativeElement.children[0])
                        .withPositions([
                        {
                            overlayX: 'center',
                            overlayY: 'top',
                            originX: 'center',
                            originY: 'bottom'
                        }
                    ]);
                }
                else {
                    positionStrategy = this._overlay
                        .position()
                        .global()
                        .centerHorizontally();
                }
                break;
            case 'top-left':
                if (toastIndex !== -1) {
                    positionStrategy = this._overlay
                        .position()
                        .flexibleConnectedTo(this._toasts[toastIndex].componentInstance._el.nativeElement.children[0])
                        .withPositions([
                        {
                            overlayX: 'start',
                            overlayY: 'top',
                            originX: 'start',
                            originY: 'bottom'
                        }
                    ]);
                }
                else {
                    positionStrategy = this._overlay
                        .position()
                        .global()
                        .left('10px');
                }
                break;
            case 'top-full-width':
                if (toastIndex !== -1) {
                    positionStrategy = this._overlay
                        .position()
                        .flexibleConnectedTo(this._toasts[toastIndex].componentInstance._el.nativeElement.children[0])
                        .withFlexibleDimensions(false)
                        .withPositions([
                        {
                            overlayX: 'center',
                            overlayY: 'top',
                            originX: 'center',
                            originY: 'bottom'
                        }
                    ]);
                }
                else {
                    positionStrategy = this._overlay
                        .position()
                        .global()
                        .centerHorizontally();
                }
                break;
            case 'bottom-right':
                if (toastIndex !== -1) {
                    positionStrategy = this._overlay
                        .position()
                        .flexibleConnectedTo(this._toasts[toastIndex].componentInstance._el.nativeElement.children[0])
                        .withPositions([
                        {
                            overlayX: 'end',
                            overlayY: 'bottom',
                            originX: 'end',
                            originY: 'top'
                        }
                    ]);
                }
                else {
                    positionStrategy = this._overlay
                        .position()
                        .global()
                        .bottom()
                        .right('10px');
                }
                break;
            case 'bottom-center':
                if (toastIndex !== -1) {
                    positionStrategy = this._overlay
                        .position()
                        .flexibleConnectedTo(this._toasts[toastIndex].componentInstance._el.nativeElement.children[0])
                        .withPositions([
                        {
                            overlayX: 'center',
                            overlayY: 'bottom',
                            originX: 'center',
                            originY: 'top'
                        }
                    ]);
                }
                else {
                    positionStrategy = this._overlay
                        .position()
                        .global()
                        .bottom()
                        .centerHorizontally();
                }
                break;
            case 'bottom-left':
                if (toastIndex !== -1) {
                    positionStrategy = this._overlay
                        .position()
                        .flexibleConnectedTo(this._toasts[toastIndex].componentInstance._el.nativeElement.children[0])
                        .withPositions([
                        {
                            overlayX: 'start',
                            overlayY: 'bottom',
                            originX: 'start',
                            originY: 'top'
                        }
                    ]);
                }
                else {
                    positionStrategy = this._overlay
                        .position()
                        .global()
                        .bottom()
                        .left('10px');
                }
                break;
            case 'bottom-full-width':
                if (toastIndex !== -1) {
                    positionStrategy = this._overlay
                        .position()
                        .flexibleConnectedTo(this._toasts[toastIndex].componentInstance._el.nativeElement.children[0])
                        .withFlexibleDimensions(false)
                        .withPositions([
                        {
                            overlayX: 'center',
                            overlayY: 'bottom',
                            originX: 'center',
                            originY: 'top'
                        }
                    ]);
                }
                else {
                    positionStrategy = this._overlay
                        .position()
                        .global()
                        .bottom()
                        .centerHorizontally();
                }
                break;
            default:
                throw Error('Unsupported toaster message position: ' + position);
        }
        return positionStrategy;
    };
    // Removes the toast that was closed from the storage array
    // Removes the toast that was closed from the storage array
    /**
     * @private
     * @param {?} toastRef
     * @return {?}
     */
    HcToasterService.prototype._removeToastPointer = 
    // Removes the toast that was closed from the storage array
    /**
     * @private
     * @param {?} toastRef
     * @return {?}
     */
    function (toastRef) {
        for (var index = 0; index < this._toasts.length; index++) {
            if (this._toasts[index] === toastRef) {
                this._toasts.splice(index, 1);
            }
        }
    };
    // Returns one toast back from the index provided in the position provided
    // Returns one toast back from the index provided in the position provided
    /**
     * @private
     * @param {?} toastPos
     * @param {?} startIndex
     * @return {?}
     */
    HcToasterService.prototype._getLastToast = 
    // Returns one toast back from the index provided in the position provided
    /**
     * @private
     * @param {?} toastPos
     * @param {?} startIndex
     * @return {?}
     */
    function (toastPos, startIndex) {
        /** @type {?} */
        var toastIndex = -1;
        for (var index = startIndex - 1; index >= 0; index--) {
            if (this._toasts[index]._toastPosition === toastPos) {
                toastIndex = index;
                break;
            }
        }
        return toastIndex;
    };
    // Updates the position strategy for what toasts are connected after one is closed
    // Updates the position strategy for what toasts are connected after one is closed
    /**
     * @private
     * @return {?}
     */
    HcToasterService.prototype._updateToastPositions = 
    // Updates the position strategy for what toasts are connected after one is closed
    /**
     * @private
     * @return {?}
     */
    function () {
        for (var index = 0; index < this._toasts.length; index++) {
            this._toasts[index]._overlayRef.updatePositionStrategy(this._getPositionStrategy(this._toasts[index]._toastPosition, index));
        }
    };
    HcToasterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HcToasterService.ctorParameters = function () { return [
        { type: Injector },
        { type: Overlay }
    ]; };
    return HcToasterService;
}());
export { HcToasterService };
if (false) {
    /** @type {?} */
    HcToasterService.prototype._toasts;
    /**
     * @type {?}
     * @private
     */
    HcToasterService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    HcToasterService.prototype._overlay;
}
//# sourceMappingURL=data:application/json;base64,