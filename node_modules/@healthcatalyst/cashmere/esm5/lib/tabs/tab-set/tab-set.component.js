/**
 * @fileoverview added by tsickle
 * Generated from: lib/tabs/tab-set/tab-set.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, Input, QueryList, Output, ViewEncapsulation } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { TabComponent } from '../tab/tab.component';
import { ActivatedRoute, Router } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { parseBooleanAttribute } from '../../util';
var TabChangeEvent = /** @class */ (function () {
    function TabChangeEvent(index, tab) {
        this.index = index;
        this.tab = tab;
    }
    return TabChangeEvent;
}());
export { TabChangeEvent };
if (false) {
    /** @type {?} */
    TabChangeEvent.prototype.index;
    /** @type {?} */
    TabChangeEvent.prototype.tab;
}
/**
 * @param {?} tabsWithoutRouterLink
 * @return {?}
 */
export function throwErrorForMissingRouterLink(tabsWithoutRouterLink) {
    /** @type {?} */
    var tabTitles = tabsWithoutRouterLink.map((/**
     * @param {?} tab
     * @return {?}
     */
    function (tab) { return tab.tabTitle; }));
    throw Error("Routerlink missing on " + tabTitles.join(','));
}
/** @type {?} */
var supportedDirections = ['horizontal', 'vertical'];
/**
 * @param {?} inputStr
 * @return {?}
 */
export function validateDirectionInput(inputStr) {
    if (supportedDirections.indexOf(inputStr) < 0) {
        throw Error('Unsupported tab direction value: ' + inputStr);
    }
}
/**
 * @return {?}
 */
export function tabComponentMissing() {
    return new Error("TabSet must contain at least one TabComponent. Make sure to add a hc-tab to the hc-tab-set element.");
}
/**
 * @param {?} tabVal
 * @return {?}
 */
export function invalidDefaultTab(tabVal) {
    throw Error('Invalid default tab value: ' + tabVal + ". Must be 'none' or a value less than the total number of tabs in the set.");
}
var TabSetComponent = /** @class */ (function () {
    function TabSetComponent(router, route) {
        this.router = router;
        this.route = route;
        this._routerEnabled = false;
        this._direction = 'vertical';
        this._defaultTab = 0;
        this._stopTabSubscriptionSubject = new Subject();
        /**
         * Emits when the selected tab is changed
         */
        this.selectedTabChange = new EventEmitter();
        this._addContentContainer = true;
        this._tight = false;
    }
    Object.defineProperty(TabSetComponent.prototype, "direction", {
        /** Specify direction of tabs as either `horizontal` or `vertical`. Defaults to `vertical` */
        get: /**
         * Specify direction of tabs as either `horizontal` or `vertical`. Defaults to `vertical`
         * @return {?}
         */
        function () {
            return this._direction;
        },
        set: /**
         * @param {?} directionType
         * @return {?}
         */
        function (directionType) {
            validateDirectionInput(directionType);
            this._direction = directionType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabSetComponent.prototype, "defaultTab", {
        /** Zero-based numerical value specifying which tab to select by default, setting to `none` means no tab
         * will be immediately selected. Defaults to 0 (the first tab). */
        get: /**
         * Zero-based numerical value specifying which tab to select by default, setting to `none` means no tab
         * will be immediately selected. Defaults to 0 (the first tab).
         * @return {?}
         */
        function () {
            return this._defaultTab;
        },
        set: /**
         * @param {?} tabValue
         * @return {?}
         */
        function (tabValue) {
            if (!isNaN(+tabValue) || tabValue === 'none') {
                this._defaultTab = tabValue;
            }
            else {
                invalidDefaultTab(tabValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabSetComponent.prototype, "addContentContainer", {
        /** Determines whether the tab set will create a router-outlet or ng-container for the tab content.
         * If set to false, the app will need to add its own container.  Defaults to `true`. */
        get: /**
         * Determines whether the tab set will create a router-outlet or ng-container for the tab content.
         * If set to false, the app will need to add its own container.  Defaults to `true`.
         * @return {?}
         */
        function () {
            return this._addContentContainer;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._addContentContainer = parseBooleanAttribute(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabSetComponent.prototype, "tight", {
        /** If true, condense the default padding on all included tabs. *Defaults to `false`.*  */
        get: /**
         * If true, condense the default padding on all included tabs. *Defaults to `false`.*
         * @return {?}
         */
        function () {
            return this._tight;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tight = parseBooleanAttribute(value);
            this.setTabDirection();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TabSetComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setUpTabs();
        this._tabs.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.setUpTabs(); }));
    };
    /**
     * @private
     * @return {?}
     */
    TabSetComponent.prototype.setUpTabs = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._tabs.length === 0) {
            throw tabComponentMissing();
        }
        if (this.defaultTab !== 'none') {
            this.defaultToFirstTab();
        }
        this.checkForRouterUse();
        this.setTabDirection();
        this.subscribeToTabClicks();
    };
    /**
     * @private
     * @return {?}
     */
    TabSetComponent.prototype.setTabDirection = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            return _this._tabs.forEach((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                t._direction = _this.direction;
                t._tight = _this.tight;
            }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TabSetComponent.prototype.subscribeToTabClicks = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._stopTabSubscriptionSubject.next();
        this._tabs.forEach((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.tabClick.pipe(takeUntil(_this._stopTabSubscriptionSubject)).subscribe((/**
         * @return {?}
         */
        function () { return _this._setActive(t); })); }));
    };
    /** Sets the currently selected tab by either its numerical index or `TabComponent` object  */
    /**
     * Sets the currently selected tab by either its numerical index or `TabComponent` object
     * @param {?} tab
     * @return {?}
     */
    TabSetComponent.prototype.selectTab = /**
     * Sets the currently selected tab by either its numerical index or `TabComponent` object
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        /** @type {?} */
        var activeTab = typeof tab === 'number' ? this._tabs.toArray()[tab] : tab;
        this._setActive(activeTab);
    };
    /**
     * @param {?} tab
     * @return {?}
     */
    TabSetComponent.prototype._setActive = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        /** @type {?} */
        var activeIndex = 0;
        this._tabs.toArray().forEach((/**
         * @param {?} t
         * @param {?} index
         * @return {?}
         */
        function (t, index) {
            t._active = false;
            if (t === tab) {
                activeIndex = index;
            }
        }));
        tab._active = true;
        this.tabContent = tab.tabContent;
        this.selectedTabChange.emit(new TabChangeEvent(activeIndex, tab));
    };
    /**
     * @private
     * @return {?}
     */
    TabSetComponent.prototype.defaultToFirstTab = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._tabs.find((/**
         * @param {?} tab
         * @return {?}
         */
        function (tab) { return tab._active; }))) {
            // setTimeout to avoid change after checked error
            // when ngFor is used as projected nodes are registered
            // and stored as part of the existing view, not
            // the view in which they are projected
            // embedded views are checked *before* AfterContentInit
            // is triggered
            /** @type {?} */
            var tabArray_1 = this._tabs.toArray();
            if (tabArray_1[Number(this.defaultTab)]) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this._setActive(tabArray_1[Number(_this.defaultTab)]); }));
            }
            else {
                invalidDefaultTab(this.defaultTab);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    TabSetComponent.prototype.checkForRouterUse = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var countUsingRouter = this._tabs.filter((/**
         * @param {?} tab
         * @return {?}
         */
        function (tab) { return tab.routerLink !== undefined; })).length;
        if (countUsingRouter > 0 && countUsingRouter < this._tabs.length) {
            /** @type {?} */
            var tabsMissingRouterLink = this._tabs.filter((/**
             * @param {?} tab
             * @return {?}
             */
            function (tab) { return tab.routerLink === undefined; }));
            throwErrorForMissingRouterLink(tabsMissingRouterLink);
        }
        if (countUsingRouter === this._tabs.length) {
            this._routerEnabled = true;
            if (this._defaultTab !== 'none') {
                this.defaultToFirstRoute();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    TabSetComponent.prototype.defaultToFirstRoute = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var foundRoute = this._tabs
            .map((/**
         * @param {?} tab
         * @return {?}
         */
        function (tab) { return tab.routerLink; }))
            .map((/**
         * @param {?} routerLink
         * @return {?}
         */
        function (routerLink) { return _this.mapRouterLinkToString(routerLink); }))
            .find((/**
         * @param {?} routerLink
         * @return {?}
         */
        function (routerLink) {
            /** @type {?} */
            var currentRoute = _this.router.url;
            return currentRoute === routerLink || currentRoute.indexOf(routerLink + "/") > -1;
        }));
        if (foundRoute) {
            return;
        }
        /** @type {?} */
        var tabArray = this._tabs.toArray();
        if (tabArray[Number(this.defaultTab)]) {
            /** @type {?} */
            var firstRoute = this.mapRouterLinkToString(tabArray[Number(this.defaultTab)].routerLink);
            this.router.navigate([firstRoute], { relativeTo: this.route });
        }
    };
    /**
     * @private
     * @param {?} routerLink
     * @return {?}
     */
    TabSetComponent.prototype.mapRouterLinkToString = /**
     * @private
     * @param {?} routerLink
     * @return {?}
     */
    function (routerLink) {
        if (routerLink instanceof Array) {
            routerLink = routerLink.join('/').replace('//', '/');
        }
        return routerLink;
    };
    TabSetComponent.decorators = [
        { type: Component, args: [{
                    selector: "hc-tab-set",
                    template: "<div class=\"hc-{{direction}}-tab-container\">\n    <div class=\"hc-tab-bar-{{direction}}\">\n        <ng-content select=\"hc-tab\"></ng-content>\n        <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"_addContentContainer\" class=\"hc-tab-content-{{direction}}\">\n        <router-outlet *ngIf=\"_routerEnabled\"></router-outlet>\n        <ng-container *ngIf=\"!_routerEnabled\" [ngTemplateOutlet]=\"tabContent\"></ng-container>\n    </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".hc-horizontal-tab-container{height:auto;width:100%}.hc-tab-bar-horizontal{-webkit-box-align:baseline;align-items:baseline;background-color:inherit;border-bottom:1px solid #c0c5cc;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.hc-tab-content-horizontal{background-color:inherit;height:100%;overflow:auto;width:100%}.hc-vertical-tab-container{display:-webkit-box;display:flex;height:100%;width:100%}.hc-tab-bar-vertical{background-color:#fff;padding:15px 0;width:20%}.hc-tab-content-vertical{background-color:#f0f3f6;width:80%}"]
                }] }
    ];
    /** @nocollapse */
    TabSetComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    TabSetComponent.propDecorators = {
        _tabs: [{ type: ContentChildren, args: [TabComponent,] }],
        selectedTabChange: [{ type: Output }],
        direction: [{ type: Input }],
        defaultTab: [{ type: Input }],
        addContentContainer: [{ type: Input }],
        tight: [{ type: Input }]
    };
    return TabSetComponent;
}());
export { TabSetComponent };
if (false) {
    /** @type {?} */
    TabSetComponent.prototype._routerEnabled;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype._direction;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype._defaultTab;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype._stopTabSubscriptionSubject;
    /**
     * The content to be displayed for the currently selected tab.
     * This is read from the tab when it is selected.
     * Not used when this component uses routing.
     * @type {?}
     */
    TabSetComponent.prototype.tabContent;
    /** @type {?} */
    TabSetComponent.prototype._tabs;
    /**
     * Emits when the selected tab is changed
     * @type {?}
     */
    TabSetComponent.prototype.selectedTabChange;
    /** @type {?} */
    TabSetComponent.prototype._addContentContainer;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype._tight;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    TabSetComponent.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,